{"version":3,"file":"197-a9e1b1aec8b628f6bc60.js","mappings":"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","sources":["webpack://@my-react/ssr-example/./src/client/component/ThreeFiber/Pointcloud.tsx"],"sourcesContent":["import { Canvas, extend } from \"@my-react/react-three-fiber\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nimport type { ThreeEvent } from \"@my-react/react-three-fiber\";\n\nclass DotMaterialImpl extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      transparent: true,\n      uniforms: { size: { value: 15 }, scale: { value: 1 } },\n      vertexShader: THREE.ShaderLib.points.vertexShader,\n      fragmentShader: `\n      varying vec3 vColor;\n      void main() {\n        gl_FragColor = vec4(vColor, step(length(gl_PointCoord.xy - vec2(0.5)), 0.5));\n      }`,\n    });\n  }\n}\n\nconst DotMaterial = extend(DotMaterialImpl);\n\nconst white = new THREE.Color(\"white\");\nconst hotpink = new THREE.Color(\"hotpink\");\n\nfunction Particles({ pointCount }: { pointCount: number }) {\n  const [positions, colors] = useMemo(() => {\n    const positions = [...new Array(pointCount * 3)].map(() => 5 - Math.random() * 10);\n    const colors = [...new Array(pointCount)].flatMap(() => hotpink.toArray());\n    return [new Float32Array(positions), new Float32Array(colors)];\n  }, [pointCount]);\n\n  const points = useRef<THREE.Points>(null!);\n\n  const hover = useCallback((e: ThreeEvent<PointerEvent>) => {\n    e.stopPropagation();\n    white.toArray(points.current.geometry.attributes.color.array, e.index! * 3);\n    points.current.geometry.attributes.color.needsUpdate = true;\n  }, []);\n\n  const unhover = useCallback((e: ThreeEvent<PointerEvent>) => {\n    hotpink.toArray(points.current.geometry.attributes.color.array, e.index! * 3);\n    points.current.geometry.attributes.color.needsUpdate = true;\n  }, []);\n\n  return (\n    <points ref={points} onPointerOver={hover} onPointerOut={unhover}>\n      <bufferGeometry>\n        <bufferAttribute attach=\"attributes-position\" args={[positions, 3]} />\n        <bufferAttribute attach=\"attributes-color\" args={[colors, 3]} />\n      </bufferGeometry>\n      <DotMaterial vertexColors depthWrite={false} />\n    </points>\n  );\n}\n\nexport const Exp = function App() {\n  return (\n    <Canvas orthographic camera={{ zoom: 40, position: [0, 0, 100] }} raycaster={{ params: { Points: { threshold: 0.2 } } as any }}>\n      <Particles pointCount={1000} />\n    </Canvas>\n  );\n};\n"],"names":["DotMaterialImpl","_THREE$ShaderMaterial","_inherits","_super","_classCallCheck","call","transparent","uniforms","size","value","scale","vertexShader","THREE","points","fragmentShader","_createClass","DotMaterial","extend","white","hotpink","Particles","t0","t1","t2","t3","t4","$","_c","pointCount","_toConsumableArray","Array","positions","map","_temp","colors","flatMap","_temp2","Float32Array","t5","_t","_t2","_slicedToArray","positions_0","colors_0","useRef","Symbol","for","e","stopPropagation","toArray","current","geometry","attributes","color","array","index","needsUpdate","t6","hover","e_0","t7","t8","t9","t10","t11","unhover","_jsx","attach","args","_jsxs","children","vertexColors","depthWrite","Math","random","Exp","zoom","position","Points","threshold","Canvas","orthographic","camera","raycaster","params"],"sourceRoot":""}