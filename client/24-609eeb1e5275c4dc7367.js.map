{"version":3,"file":"24-609eeb1e5275c4dc7367.js","mappings":"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","sources":["webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollControlContext.ts","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollControl.tsx","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollSectionContext.ts","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollViewContext.ts","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollSection.tsx","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollContent.tsx","webpack://@my-react/ssr-example/./src/client/component/Arrow.tsx","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollToTop.tsx","webpack://@my-react/ssr-example/./src/client/component/ScrollControl/ScrollControlTool.tsx","webpack://@my-react/ssr-example/./src/client/component/Section.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/BaseTable.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/Column.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/Pagination.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/usePaginationController.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/ErrorCatch.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/Td.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/Cell.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/type.ts","webpack://@my-react/ssr-example/./src/client/component/Table/useSorter.ts","webpack://@my-react/ssr-example/./src/client/component/Table/HeadCell.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/useChildren.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/useSkeleton.tsx","webpack://@my-react/ssr-example/./src/client/component/Table/index.tsx"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const ScrollControlContext = createContext({\n  totalSection: 0,\n  currentSection: 0,\n  setTotalSection: (_length: number): void => void 0,\n  setCurrentSection: (_index: number): void => void 0,\n  onNextSection: (): void => void 0,\n  onPrevSection: (): void => void 0,\n});\n\nexport const useScrollControl = () => useContext(ScrollControlContext);\n","import { useCallbackRef, usePrevious } from \"@chakra-ui/react\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport { ScrollControlContext } from \"./ScrollControlContext\";\n\nimport type { ReactNode } from \"react\";\n\ntype ScrollControlProps = {\n  initialSectionLength?: number;\n  onSectionIndexChange?: (currentIndex: number, prevIndex: number) => void;\n  children: ReactNode;\n};\n\nexport const ScrollControl = ({ onSectionIndexChange, children, initialSectionLength }: ScrollControlProps) => {\n  const [currentSection, setCurrentSection] = useState(0);\n  \n  const [totalSection, setTotalSection] = useState(initialSectionLength || 0);\n\n  const prevSection = usePrevious(currentSection);\n\n  const onSectionIndexChangeRef = useCallbackRef(onSectionIndexChange);\n\n  const onNextSection = useCallbackRef(() => {\n    if (currentSection === totalSection - 1) {\n      setCurrentSection(0);\n    } else {\n      setCurrentSection((i) => i + 1);\n    }\n  });\n\n  const onPrevSection = useCallbackRef(() => {\n    if (currentSection === 0) {\n      setCurrentSection(totalSection - 1);\n    } else {\n      setCurrentSection((i) => i - 1);\n    }\n  });\n\n  useEffect(() => {\n    onSectionIndexChangeRef(currentSection, prevSection);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentSection, onSectionIndexChangeRef]);\n\n  const context = useMemo(\n    () => ({ totalSection, currentSection, onNextSection, onPrevSection, setCurrentSection, setTotalSection }),\n    [currentSection, onNextSection, onPrevSection, totalSection]\n  );\n\n  return <ScrollControlContext.Provider value={context}>{children}</ScrollControlContext.Provider>;\n};\n","import { createContext, useContext } from \"react\";\n\nimport type { RefObject } from \"react\";\n\nexport const ScrollSectionContext = createContext<{ ref: RefObject<HTMLElement> }>({ ref: { current: null } });\n\nexport const useScrollSection = () => useContext(ScrollSectionContext);\n","import { createContext, useContext } from \"react\";\n\nexport const ScrollViewContext = createContext({\n  inViewArray: [] as boolean[],\n  setCurrentView: (_inView: boolean, _index: number): void => void 0,\n});\n\nexport const useScrollView = () => useContext(ScrollViewContext);\n","import { Box } from \"@chakra-ui/react\";\nimport { useInView } from \"framer-motion\";\nimport { useEffect, useMemo, useRef } from \"react\";\n\nimport { useScrollControl } from \"./ScrollControlContext\";\nimport { ScrollSectionContext } from \"./ScrollSectionContext\";\nimport { useScrollView } from \"./ScrollViewContext\";\n\nimport type { ReactNode } from \"react\";\n\nexport type ScrollSectionProps = { children: ReactNode; index?: number };\n\nexport const ScrollSection = ({ children, index }: ScrollSectionProps) => {\n  const ref = useRef(null);\n  const context = useMemo(() => ({ ref }), []);\n  const { currentSection } = useScrollControl();\n  const { setCurrentView, inViewArray } = useScrollView();\n\n  const inView = useInView(ref, { amount: \"some\", margin: \"-300px 0px\" });\n\n  useEffect(() => {\n    if (index === null || index === undefined) return;\n    setCurrentView(inView, index);\n  }, [index, inView, setCurrentView, inViewArray.length]);\n\n  return (\n    <ScrollSectionContext.Provider value={context}>\n      <Box ref={ref} position=\"relative\" overflow=\"hidden\" data-scroll-section={index} data-active={currentSection === index}>\n        {children}\n      </Box>\n    </ScrollSectionContext.Provider>\n  );\n};\n","import { useCallbackRef, useSafeLayoutEffect } from \"@chakra-ui/react\";\nimport { useScroll } from \"framer-motion\";\nimport { throttle } from \"lodash-es\";\nimport { Children, cloneElement, isValidElement, useEffect, useMemo, useState } from \"react\";\n\nimport { useScrollControl } from \"./ScrollControlContext\";\nimport { ScrollSection } from \"./ScrollSection\";\nimport { ScrollViewContext } from \"./ScrollViewContext\";\n\nimport type { ScrollSectionProps } from \"./ScrollSection\";\nimport type { ReactElement } from \"react\";\n\nexport const ScrollContent = ({ children }: { children: ReactElement | ReactElement[] }) => {\n  const validElement: ReactElement<ScrollSectionProps>[] = [];\n\n  const { scrollY } = useScroll();\n\n  // filter all the valid `ScrollSection` element\n  Children.forEach(children, (element) => {\n    if (isValidElement<ScrollSectionProps>(element) && element.type === ScrollSection) {\n      validElement.push(element);\n    }\n  });\n\n  const count = validElement.length;\n\n  const [inViewArray, setInViewArray] = useState<boolean[]>(() => Array<boolean>(count).fill(false));\n\n  useEffect(() => {\n    setInViewArray(Array(count).fill(false));\n  }, [count]);\n\n  const setCurrentView = useCallbackRef((inView: boolean, index: number) => {\n    setInViewArray((last) => {\n      if (last[index] !== inView) {\n        const newInViewArray = [...last];\n        newInViewArray[index] = inView;\n        return newInViewArray;\n      } else {\n        return last;\n      }\n    });\n  });\n\n  const context = useMemo(() => ({ inViewArray, setCurrentView }), [inViewArray, setCurrentView]);\n\n  const { setTotalSection, setCurrentSection, currentSection } = useScrollControl();\n\n  const setCurrentSectionRef = useCallbackRef((prev: boolean) => {\n    if (prev) {\n      if (inViewArray[currentSection - 1]) {\n        setCurrentSection(currentSection - 1);\n      }\n    } else {\n      if (inViewArray[currentSection + 1]) {\n        setCurrentSection(currentSection + 1);\n      }\n    }\n  });\n\n  useEffect(() => {\n    let last = 0;\n    const handler = throttle(\n      (l: number) => {\n        if (l > last) {\n          setCurrentSectionRef(false);\n        } else {\n          setCurrentSectionRef(true);\n        }\n        last = l;\n      },\n      100,\n      { leading: true, trailing: true }\n    );\n    scrollY.onChange(handler);\n    return () => scrollY.clearListeners();\n  }, [setCurrentSectionRef, scrollY]);\n\n  useSafeLayoutEffect(() => {\n    setTotalSection(count);\n    setCurrentSection(0);\n  }, [count, setTotalSection, setCurrentSection]);\n\n  return (\n    <ScrollViewContext.Provider value={context}>\n      {Children.map(validElement, (element, index) => cloneElement(element, { index: index }))}\n    </ScrollViewContext.Provider>\n  );\n};\n","import { memo } from \"react\";\n\nconst _Arrow = ({ className }: { className: string }) => {\n  return (\n    <svg className={className} width=\"14\" height=\"8\" viewBox=\"0 0 14 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M1 7L7 1L13 7\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    </svg>\n  );\n};\n\nexport const Arrow = memo(_Arrow);\n","import { Box, Icon } from \"@chakra-ui/react\";\n\n// import { smoothScroll } from \"@client/utils/scroll\";\n\nimport { Arrow } from \"../Arrow\";\n\nimport { useScrollControl } from \"./ScrollControlContext\";\n\nexport const ScrollToTop = () => {\n  const { currentSection } = useScrollControl();\n  return (\n    <Box\n      fontSize=\"20px\"\n      position=\"fixed\"\n      right=\"10px\"\n      bottom=\"20px\"\n      width=\"20px\"\n      height=\"20px\"\n      color=\"orangeSand\"\n      textAlign=\"center\"\n      verticalAlign=\"middle\"\n      borderRadius=\"999999px\"\n      zIndex=\"sticky\"\n      display={{ base: currentSection > 0 ? \"flex\" : \"none\", md: \"none\" }}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      onClick={() => {\n        window.scrollTo({ top: 0, behavior: \"smooth\" });\n      }}\n    >\n      <Icon as={Arrow} width=\"20px\" height=\"20px\" />\n    </Box>\n  );\n};\n","import { Box, Flex, useCallbackRef, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\n\nimport { useScrollControl } from \"./ScrollControlContext\";\n\nimport type { ReactElement } from \"react\";\n\nexport const ScrollControlTool = ({\n  render,\n}: {\n  render?: ({ index, isSelect, onClick }: { index: number; isSelect: boolean; onClick: () => void }) => ReactElement;\n}) => {\n  const { totalSection, currentSection } = useScrollControl();\n\n  const clickHandler = useCallbackRef((index: number) => {\n    const targetElement = document.querySelector(`[data-scroll-section=\"${index}\"]`);\n    if (targetElement) {\n      const rect = targetElement.getBoundingClientRect();\n      const top = (document.scrollingElement?.scrollTop || 0) + rect.top;\n      window.scrollTo({ top, behavior: \"smooth\" });\n    }\n  });\n\n  const array = useMemo(() => Array(totalSection).fill(0) as number[], [totalSection]);\n\n  if (totalSection <= 1) return null;\n\n  return (\n    <Flex\n      height=\"100vh\"\n      position=\"fixed\"\n      width=\"30px\"\n      display={{ base: \"none\", md: \"flex\" }}\n      flexDirection=\"column\"\n      top=\"0\"\n      right=\"100px\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      zIndex=\"dropdown\"\n      data-scroll-tool\n    >\n      {currentSection <= totalSection - 1 && (\n        <Wrap spacing=\"6\">\n          {array.map((_, i) => (\n            <WrapItem key={i}>\n              {render ? (\n                render({ index: i, isSelect: currentSection === i, onClick: () => clickHandler(i) })\n              ) : (\n                <Box\n                  width=\"10px\"\n                  height=\"10px\"\n                  cursor=\"pointer\"\n                  borderRadius=\"full\"\n                  sx={{\n                    backgroundColor: currentSection === i ? \"purple.600\" : \"initial\",\n                    border: currentSection === i ? \"none\" : \"1.5px solid #e2e2e2\",\n                  }}\n                  onClick={() => clickHandler(i)}\n                />\n              )}\n            </WrapItem>\n          ))}\n        </Wrap>\n      )}\n    </Flex>\n  );\n};\n","import { motion, useScroll, useTransform } from \"framer-motion\";\n\nimport { useIsMounted } from \"../hooks\";\n\nimport { useScrollSection } from \"./ScrollControl\";\n\nimport type { ReactNode } from \"react\";\n\nexport const _Section = ({ children }: { children: ReactNode }) => {\n  const { ref } = useScrollSection();\n  const { scrollYProgress } = useScroll({ target: ref, axis: \"y\", offset: ['-0.5', '0.5'] });\n\n  const opacity = useTransform(scrollYProgress, [0, 0.3, 0.65, 1], [0.3, 1, 1, 0.5]);\n  const y = useTransform(scrollYProgress, [0, 0.3, 0.65, 1], [100, 0, 0, -120]);\n\n  return <motion.div style={{ opacity, y, }}>{children}</motion.div>;\n};\n\nexport const Section = ({ children }: { children: ReactNode }) => {\n  const isMounted = useIsMounted();\n\n  if (isMounted) return <_Section>{children}</_Section>;\n\n  return children;\n};\n","import { Table, TableContainer } from \"@chakra-ui/react\";\n\nimport type { TableProps } from \"@chakra-ui/react\";\n\nexport const BaseTable = ({ ...restProps }: TableProps) => (\n  <TableContainer>\n    <Table variant=\"simple\" {...restProps} />\n  </TableContainer>\n);\n","import type { BodyCellProps, BodyCellPropsWithDataIndex, HeadCellProps, HeadCellPropsWithDataIndex } from \"./type\";\nimport type { TableCellProps } from \"@chakra-ui/react\";\nimport type { ReactElement } from \"react\";\n\nexport type ColumnHeadCellRender = ({ rowIndex, colIndex }: { rowIndex: number; colIndex: number }) => ReactElement;\n\nexport type ColumnBodyCellRender<T> = ({\n  rowIndex,\n  colIndex,\n  rowData,\n  stickyRows,\n}: {\n  rowIndex: number;\n  colIndex: number;\n  rowData: T;\n  stickyRows?: number;\n}) => ReactElement;\n\nexport function Column<T, K extends keyof T = keyof T>({\n  dataIndex,\n  cellProps,\n  headCellProps,\n  bodyCellProps,\n  isHidden,\n  headCellRender,\n  bodyCellRender,\n}: {\n  dataIndex: keyof T;\n  cellProps?: TableCellProps;\n  headCellProps?: TableCellProps;\n  bodyCellProps?: TableCellProps;\n  isHidden?: boolean;\n  headCellRender: HeadCellPropsWithDataIndex<T, K> | HeadCellPropsWithDataIndex<T, K>[];\n  bodyCellRender: BodyCellPropsWithDataIndex<T, K>;\n}): React.ReactElement;\n\nexport function Column<T>({\n  cellProps,\n  headCellProps,\n  bodyCellProps,\n  isHidden,\n  headCellRender,\n  bodyCellRender,\n}: {\n  cellProps?: TableCellProps;\n  headCellProps?: TableCellProps;\n  bodyCellProps?: TableCellProps;\n  isHidden?: boolean;\n  headCellRender: HeadCellProps<T> | HeadCellProps<T>[];\n  bodyCellRender: BodyCellProps<T>;\n}): React.ReactElement;\n\nexport function Column<T>({\n  dataIndex: _dataIndex,\n  cellProps: _cellProps,\n  headCellProps: _headCellProps,\n  bodyCellProps: _bodyCellProps,\n  isHidden: _isHidden,\n  headCellRender: _headCellRender,\n  bodyCellRender: _bodyCellRender,\n}: ColumnParams<T>) {\n  return <></>;\n}\n\nexport type ColumnParams<T> = {\n  dataIndex?: keyof T;\n  cellProps?: TableCellProps;\n  headCellProps?: TableCellProps;\n  bodyCellProps?: TableCellProps;\n  isHidden?: boolean;\n  headCellRender: HeadCellProps<T> | HeadCellProps<T>[] | HeadCellPropsWithDataIndex<T> | HeadCellPropsWithDataIndex<T>[];\n  bodyCellRender: BodyCellProps<T> | BodyCellPropsWithDataIndex<T>;\n};\n","import { Box, Button, Flex, Icon } from \"@chakra-ui/react\";\nimport { AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\n\nimport { usePagination, usePaginationBar } from \"./usePaginationController\";\n\nimport type { PaginationProps } from \"./type\";\nimport type { ButtonProps } from \"@chakra-ui/react\";\n\nconst Navigator = (props: ButtonProps) => (\n  <Button\n    border=\"1px\"\n    size=\"sm\"\n    borderColor=\"gray.200\"\n    textStyle=\"light\"\n    fontWeight=\"normal\"\n    _active={{\n      background: \"none\",\n    }}\n    _hover={{\n      background: \"none\",\n    }}\n    fontSize=\"sm\"\n    {...props}\n  >\n    {props.children}\n  </Button>\n);\n\nexport const Pagination = ({ page, total, pageSize = 50, onChange, preButtonProps, nextButtonProps, ...restProps }: PaginationProps) => {\n  const { hasNextPage, hasPrePage } = usePagination({\n    page,\n    total,\n    pageSize,\n  });\n\n  return (\n    <Flex justifyContent=\"flex-end\" {...restProps}>\n      {hasPrePage && (\n        <Navigator\n          aria-label=\"Prev page\"\n          leftIcon={<Icon as={AiOutlineLeft} />}\n          onClick={() => {\n            onChange(page - 1);\n          }}\n          marginEnd=\"4\"\n          {...preButtonProps}\n        >\n          {preButtonProps?.children || \"prevPage\"}\n        </Navigator>\n      )}\n      {hasNextPage && (\n        <Navigator\n          aria-label=\"Next page\"\n          rightIcon={<Icon as={AiOutlineRight} />}\n          onClick={() => {\n            onChange(page + 1);\n          }}\n          marginEnd={{ base: 4, lg: 0 }}\n          {...nextButtonProps}\n        >\n          {nextButtonProps?.children || \"nextPage\"}\n        </Navigator>\n      )}\n    </Flex>\n  );\n};\n\nconst BarNavigator = ({ isFocused, children, ...resProps }: ButtonProps & { isFocused?: boolean }) => {\n  const activeStyles = {\n    background: \"blue.500\",\n    color: \"white\",\n  };\n\n  const hoverStyles = {\n    background: \"gray.200\",\n  };\n  return (\n    <Button\n      background={isFocused ? activeStyles.background : \"unset\"}\n      color={isFocused ? activeStyles.color : \"unset\"}\n      minWidth=\"6\"\n      width=\"6\"\n      height=\"6\"\n      paddingX=\"2\"\n      fontWeight=\"semibold\"\n      fontSize=\"sm\"\n      marginX=\"1\"\n      borderRadius=\"2px\"\n      outlineOffset=\"0\"\n      boxSizing=\"border-box\"\n      _active={{ background: \"unset\" }}\n      _hover={isFocused ? activeStyles : hoverStyles}\n      {...resProps}\n    >\n      {children}\n    </Button>\n  );\n};\n\nexport const PaginationBar = ({\n  total,\n  page,\n  pageSize = 50,\n  onChange,\n  unfoldedPages,\n  preButtonProps,\n  nextButtonProps,\n  pageButtonProps,\n  ...restProps\n}: PaginationProps) => {\n  const { items } = usePaginationBar({\n    page,\n    pageSize,\n    total,\n    unfoldedPages,\n  });\n  return (\n    <Box display=\"inline-block\" borderRadius=\"4px\" {...restProps}>\n      {items.map((item) => {\n        if (item.isSplitter) {\n          return (\n            <BarNavigator\n              key={item.key}\n              _hover={{\n                background: \"unset\",\n              }}\n              cursor=\"default!important\"\n              {...pageButtonProps}\n            >\n              ...\n            </BarNavigator>\n          );\n        }\n        if (item.navigate) {\n          const { navigate = -1, disabled } = item;\n          const chevronStyles = {\n            width: \"24px\",\n            height: \"24px\",\n          };\n          const navigatorStyles =\n            navigate < 0\n              ? {\n                  ml: 0,\n                }\n              : {\n                  mr: 0,\n                };\n          return (\n            <BarNavigator\n              key={item.key}\n              disabled={disabled}\n              onClick={() => onChange(navigate + page)}\n              {...navigatorStyles}\n              {...(navigate < 0 ? preButtonProps : nextButtonProps)}\n              className={`table__pagination__${navigate < 0 ? \"previous\" : \"next\"}-page-button`}\n            >\n              {navigate < 0 ? <Icon {...chevronStyles} as={AiOutlineLeft} /> : <Icon {...chevronStyles} as={AiOutlineRight} />}\n            </BarNavigator>\n          );\n        }\n        const { pageNumber = page, disabled, isFocused } = item;\n        return (\n          <BarNavigator key={item.key} disabled={disabled} onClick={() => onChange(pageNumber)} isFocused={isFocused} {...pageButtonProps}>\n            {pageNumber}\n          </BarNavigator>\n        );\n      })}\n    </Box>\n  );\n};\n","import { useMemo } from \"react\";\n\nimport type { PaginationBarButton, PaginationProps } from \"./type\";\n\nconst defaultConfigs = {\n  pageSize: 50,\n  unfoldedPages: 4,\n  minUnfoldedPages: 3,\n};\n\nexport const usePagination = ({ page, total, pageSize = defaultConfigs.pageSize }: Omit<PaginationProps, \"onChange\">) => {\n  const totalPage = total ? Math.ceil(total / pageSize) : 1;\n  return {\n    totalPage,\n    hasNextPage: page < totalPage,\n    hasPrePage: page > 1,\n  };\n};\n\nconst getBarItems = (curPage: number, totalPage: number, unfoldedPages: number): PaginationBarButton[] => {\n  const range: [number, number][] = [];\n  curPage = Math.min(curPage, totalPage);\n  if (totalPage <= unfoldedPages + 2) {\n    range.push([1, totalPage]);\n  } else if (curPage <= unfoldedPages) {\n    range.push([1, unfoldedPages + 1]);\n    range.push([totalPage, totalPage]);\n  } else if (curPage >= totalPage - unfoldedPages + 1) {\n    range.push([1, 1]);\n    range.push([totalPage - unfoldedPages, totalPage]);\n  } else {\n    range.push([1, 1]);\n    range.push([curPage - unfoldedPages + 2, curPage + 1]);\n    range.push([totalPage, totalPage]);\n  }\n  const items = range.reduce<PaginationBarButton[]>((buttons, range) => {\n    if (buttons.length) {\n      buttons.push({ isSplitter: true, disabled: true, key: range[0] - 1 });\n    }\n    buttons.push(\n      ...new Array(range[1] - range[0] + 1).fill(0).map((v, i): PaginationBarButton => {\n        const pageNumber = range[0] + i;\n        return {\n          isFocused: pageNumber === curPage,\n          pageNumber,\n          key: pageNumber,\n        };\n      }),\n    );\n    return buttons;\n  }, []);\n  items.unshift({\n    navigate: -1,\n    disabled: curPage === 1,\n    key: 0,\n  });\n  items.push({\n    navigate: 1,\n    disabled: curPage === totalPage,\n    key: totalPage + 1,\n  });\n  return items;\n};\n\nexport const usePaginationBar = ({\n  page,\n  total,\n  pageSize = defaultConfigs.pageSize,\n  unfoldedPages = defaultConfigs.unfoldedPages,\n}: Omit<PaginationProps, \"onChange\">) => {\n  unfoldedPages = Math.max(unfoldedPages, defaultConfigs.minUnfoldedPages);\n  const { totalPage } = usePagination({\n    page,\n    total,\n    pageSize,\n  } as PaginationProps);\n  const items = useMemo(() => getBarItems(page, totalPage, unfoldedPages), [page, totalPage, unfoldedPages]);\n  return {\n    totalPage,\n    items,\n  };\n};\n","import { Component } from \"react\";\n\nimport type { ErrorInfo, ReactNode } from \"react\";\n\nexport class ErrorCatch extends Component<Record<string, unknown>, { error: string; stack: string; hasError: boolean }> {\n  state = {\n    error: \"\",\n    stack: \"\",\n    hasError: false,\n  };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.setState({\n      error: error.message,\n      stack: info.componentStack,\n    });\n  }\n\n  render(): ReactNode {\n    const { hasError, stack, error } = this.state;\n    if (hasError) {\n      console.error(error, stack);\n      return 'some error happen';\n    } else {\n      return this.props.children as ReactNode;\n    }\n  }\n}\n","import { Td as OriginalTd } from \"@chakra-ui/react\";\n\nimport { ErrorCatch } from \"./ErrorCatch\";\n\nimport type { TableCellProps } from \"@chakra-ui/react\";\n\nexport const Td = (props: TableCellProps) => {\n  const { children, ...resProps } = props;\n  return (\n    <OriginalTd {...resProps}>\n      <ErrorCatch>{children}</ErrorCatch>\n    </OriginalTd>\n  );\n};\n","import { Skeleton as DefaultSkeleton } from \"@chakra-ui/react\";\n\nimport { Td } from \"./Td\";\n\nimport type { BodyCellProps, BodyCellRender } from \"./type\";\n\nconst WrapperCom = ({ Render, ...props }) => {\n  return <>{Render(props)}</>;\n};\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst CellRender = <T extends {}>({ Render, CustomRender, dataIndex, rowIndex, colIndex, rowData, cellProps, ...restProps }: BodyCellRender<T>) => {\n  if (typeof CustomRender === \"function\") {\n    if (dataIndex) {\n      return CustomRender({\n        rowData,\n        rowIndex,\n        colIndex,\n        dataIndex,\n        cellData: rowData[dataIndex],\n      });\n    }\n\n    const CustomRenderWithoutDataIndex = CustomRender as Required<BodyCellProps<T>>[\"CustomRender\"];\n\n    return CustomRenderWithoutDataIndex({\n      rowData,\n      rowIndex,\n      colIndex,\n    });\n  }\n\n  return (\n    <Td fontWeight=\"medium\" {...restProps} {...cellProps}>\n      {typeof Render === \"function\" ? (\n        <WrapperCom\n          Render={Render}\n          dataIndex={dataIndex || (\"\" as keyof T)}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          cellData={dataIndex ? rowData[dataIndex] : ({} as T[keyof T])}\n          rowData={rowData}\n        />\n      ) : (\n        Render\n      )}\n    </Td>\n  );\n};\n\nexport function Cell<T>({\n  Render,\n  CustomRender,\n  dataIndex,\n  rowIndex,\n  colIndex,\n  rowData,\n  cellProps,\n  showSkeleton = ({ rowData }) => !rowData,\n  Skeleton,\n  ...restProps\n}: BodyCellRender<T>) {\n  const _showSkeleton = typeof showSkeleton === \"function\" ? showSkeleton({ rowIndex, rowData, colIndex }) : !!showSkeleton;\n\n  if (_showSkeleton) {\n    if (Skeleton)\n      return (\n        <Td fontWeight=\"medium\" {...restProps} {...cellProps}>\n          <Skeleton rowIndex={rowIndex} colIndex={colIndex} />\n        </Td>\n      );\n    return (\n      <Td fontWeight=\"medium\" {...restProps} {...cellProps}>\n        <DefaultSkeleton width=\"80%\" height=\"24px\" />\n      </Td>\n    );\n  }\n\n  return (\n    <CellRender\n      {...{\n        rowData,\n        rowIndex,\n        dataIndex,\n        colIndex,\n        cellProps,\n        Render,\n        CustomRender,\n        ...restProps,\n      }}\n    />\n  );\n}\n","import type { BoxProps, ButtonProps, FlexProps, TableCellProps, TableProps as OriginalTableProps, TableRowProps, TooltipProps } from \"@chakra-ui/react\";\nimport type { ReactElement } from \"react\";\nimport type React from \"react\";\n\nexport type CompareFn<T> = (a: T, b: T) => number;\n\nexport type GenCompareFn<T> = (sorter: Sorter<T>) => CompareFn<T>;\n\nexport enum SortOrder {\n  None,\n  Asc,\n  Desc,\n}\n\nexport type Sorter<T> = {\n  by?: keyof T;\n  order?: SortOrder;\n  onSort?: (sorter: Sorter<T>) => void;\n  genCompareFn?: GenCompareFn<T>;\n};\n\nexport type PaginationProps = {\n  total?: number;\n  page: number;\n  pageSize?: number;\n  onChange: (page: number) => void;\n  unfoldedPages?: number;\n  preButtonProps?: ButtonProps;\n  nextButtonProps?: ButtonProps;\n  pageButtonProps?: ButtonProps;\n} & Omit<FlexProps, \"onChange\" | \"children\">;\n\nexport type PaginationBarButton = {\n  disabled?: boolean;\n  isSplitter?: boolean;\n  navigate?: -1 | 1;\n  pageNumber?: number;\n  isFocused?: boolean;\n  key: number;\n};\n\n// with dataIndex field, we use sorter by dataIndex\nexport type HeadCellPropsWithDataIndex<T, K extends keyof T = keyof T> = {\n  Render?: (({ dataIndex, rowIndex, colIndex }: { dataIndex: K; rowIndex: number; colIndex: number }) => React.ReactElement) | string | number | React.ReactNode;\n  CustomRender?: ({\n    dataIndex,\n    rowIndex,\n    colIndex,\n    sort,\n    cancelSort,\n    toggledSortOrder,\n    defaultOrder,\n    sortAscColor,\n    sortDescColor,\n    sorterClick,\n    genCompareFn,\n\n    sorter,\n    onSort,\n  }: {\n    dataIndex: K;\n    rowIndex: number;\n    colIndex: number;\n\n    sort?: boolean;\n    cancelSort?: boolean;\n    toggledSortOrder: SortOrder;\n    defaultOrder?: SortOrder;\n    sortAscColor?: string;\n    sortDescColor?: string;\n    sorterClick: () => void;\n    genCompareFn?: GenCompareFn<T>;\n\n    sorter: Sorter<T>;\n    onSort: (sorter: Sorter<T>) => void;\n  }) => React.ReactElement;\n  cellProps?: Omit<TableCellProps, \"children\">;\n  genCompareFn?: GenCompareFn<T>;\n  sort?: boolean;\n  cancelSort?: boolean;\n  sortedColor?: string;\n  defaultOrder?: SortOrder;\n  tooltipProps?: Omit<TooltipProps, \"children\">;\n};\n\n// without dataIndex field, we need provider sort\nexport type HeadCellProps<T> = {\n  Render?: (({ rowIndex, colIndex }: { rowIndex: number; colIndex: number }) => React.ReactElement) | string | number | React.ReactNode;\n  CustomRender?: ({\n    rowIndex,\n    colIndex,\n\n    sort,\n    defaultOrder,\n    sortAscColor,\n    sortDescColor,\n    genCompareFn,\n    sorter,\n    onSort,\n  }: {\n    rowIndex: number;\n    colIndex: number;\n    sort?: boolean;\n    defaultOrder?: SortOrder;\n    sortAscColor?: string;\n    sortDescColor?: string;\n    genCompareFn?: GenCompareFn<T>;\n    sorter: Sorter<T>;\n    onSort: (sorter: Sorter<T>) => void;\n  }) => React.ReactElement;\n  cellProps?: Omit<TableCellProps, \"children\">;\n  genCompareFn?: GenCompareFn<T>;\n  sort?: boolean;\n  cancelSort?: boolean;\n  sortedColor?: string;\n  defaultOrder?: SortOrder;\n  tooltipProps?: Omit<TooltipProps, \"children\">;\n};\n\nexport type HeadCellRender<T, K extends keyof T = keyof T> = (HeadCellProps<T> | HeadCellPropsWithDataIndex<T, K>) & {\n  dataIndex?: keyof T;\n  rowIndex: number;\n  colIndex: number;\n};\n\ntype SkeletonBody<T> = {\n  showSkeleton?: boolean | (({ rowData, rowIndex, colIndex }: { rowData?: T; rowIndex: number; colIndex: number }) => boolean);\n  Skeleton?: ({ rowData, rowIndex, colIndex }: { rowData?: T; colIndex: number; rowIndex: number }) => React.ReactElement;\n};\n\nexport type BodyCellPropsWithDataIndex<T, K extends keyof T = keyof T> = {\n  Render?:\n    | (({\n        dataIndex,\n        rowData,\n        cellData,\n        rowIndex,\n        colIndex,\n      }: {\n        dataIndex: K;\n        rowData: T;\n        cellData: T[K];\n        rowIndex: number;\n        colIndex: number;\n      }) => React.ReactElement | React.ReactNode)\n    | string\n    | number\n    | React.ReactNode;\n  CustomRender?: ({\n    dataIndex,\n    rowData,\n    cellData,\n    rowIndex,\n    colIndex,\n  }: {\n    dataIndex: K;\n    rowData: T;\n    cellData: T[K];\n    rowIndex: number;\n    colIndex: number;\n  }) => React.ReactElement;\n  cellProps?: Omit<TableCellProps, \"children\">;\n} & SkeletonBody<T>;\n\nexport type BodyCellProps<T> = {\n  Render: (({ rowData, rowIndex, colIndex }: { rowData: T; rowIndex: number; colIndex: number }) => React.ReactElement) | string | number | React.ReactNode;\n  CustomRender?: ({ rowData, rowIndex, colIndex }: { rowData: T; rowIndex: number; colIndex: number }) => React.ReactElement;\n  cellProps?: Omit<TableCellProps, \"children\">;\n} & SkeletonBody<T>;\n\nexport type BodyCellRender<T> = (BodyCellProps<T> | BodyCellPropsWithDataIndex<T>) & {\n  rowData: T;\n  dataIndex?: keyof T;\n  rowIndex: number;\n  colIndex: number;\n};\n\nexport type ColOptsWithDataIndex<T, K extends keyof T = keyof T> = {\n  headCell: HeadCellPropsWithDataIndex<T, K> | HeadCellPropsWithDataIndex<T, K>[];\n  commonCell: {\n    cellProps: TableCellProps;\n    isHidden?: boolean;\n    dataIndex: keyof T;\n  };\n  bodyCell: BodyCellPropsWithDataIndex<T>;\n};\n\nexport type ColOpts<T> = {\n  headCell: HeadCellProps<T> | HeadCellProps<T>[];\n  commonCell: {\n    cellProps: TableCellProps;\n    isHidden?: boolean;\n  };\n  bodyCell: BodyCellProps<T>;\n};\n\nexport type RowProps<T> = {\n  commonRow?: TableRowProps;\n  theadRow?: TableRowProps | TableRowProps[];\n  tbodyRow?: TableRowProps;\n  genTbodyRow?: ({ rowIndex, rowData }: { rowIndex: number; rowData?: T }) => TableRowProps;\n};\n\nexport type TableProps<T> = {\n  rowProps?: RowProps<T>;\n  dataSource?: T[];\n  sorter?: Sorter<T>;\n  pagination?: PaginationProps;\n  noResultText?: string;\n  CustomNoResult?: () => JSX.Element;\n  tableProps?: OriginalTableProps;\n  containerProps?: BoxProps;\n  skeletonRowCount?: number;\n  afterSorting?: () => void;\n  children?: ReactElement<any, (p: any) => ReactElement | null> | ReactElement<any, (p: any) => ReactElement | null>[];\n};\n","import { createContext, useCallback, useMemo, useState } from \"react\";\n\nimport { SortOrder } from \"./type\";\n\nimport type { Sorter } from \"./type\";\n\nexport const SorterContext = createContext<{\n  sorter: Sorter<any>;\n  onSort: (sorter: Sorter<any>) => void;\n}>({ sorter: { order: SortOrder.None }, onSort: () => void 0 });\n\nexport function useSorter<T extends Record<string, string>>(sorter?: Sorter<T>, dataSource?: T[], afterSorting?: () => void) {\n  const [innerSorter, setInnerSorter] = useState<Sorter<T>>({\n    order: SortOrder.None,\n    genCompareFn: (sorter: Sorter<T>) => (a: T, b: T) => {\n      const by = sorter.by as string;\n      if (by === null) return 0;\n      if (!(by in a) || !(by in b)) return 0;\n      return sorter.order === SortOrder.Asc ? a[by].length - b[by].length : b[by].length - a[by].length;\n    },\n    ...sorter,\n  });\n  const onSort = useCallback(\n    (sorter: Sorter<T>) => {\n      const newSorter = { ...innerSorter, ...sorter };\n      sorter.onSort?.(newSorter);\n      setInnerSorter(newSorter);\n    },\n    [innerSorter],\n  );\n\n  const sortedRows = useMemo(() => {\n    const tempRows = [...(dataSource || [])];\n    if (innerSorter.order !== SortOrder.None) {\n      tempRows.sort(innerSorter.genCompareFn?.(innerSorter));\n      afterSorting && afterSorting();\n    }\n    return tempRows;\n  }, [dataSource, innerSorter, afterSorting]);\n\n  return {\n    innerSorter,\n    onSort,\n    sortedRows,\n  };\n}\n","import { Box, Flex, Th, Tooltip, Icon, IconButton } from \"@chakra-ui/react\";\nimport { useCallback, useContext, useMemo } from \"react\";\nimport { AiOutlineDown, AiOutlineUp } from \"react-icons/ai\";\n\nimport { SortOrder } from \"./type\";\nimport { SorterContext } from \"./useSorter\";\n\nimport type { HeadCellProps, HeadCellRender, Sorter } from \"./type\";\n\nexport function HeadCell<T>({\n  Render,\n  CustomRender,\n  genCompareFn,\n  dataIndex,\n  rowIndex,\n  colIndex,\n  cellProps,\n  cancelSort,\n  sort,\n  sortedColor = \"blue.500\",\n  defaultOrder = SortOrder.Desc,\n  tooltipProps,\n}: HeadCellRender<T>) {\n  const { sorter, onSort } = useContext<{\n    sorter: Sorter<T>;\n    onSort: (sorter: Sorter<T>) => void;\n  }>(SorterContext);\n\n  const getColor = useCallback(\n    (targetOrder: SortOrder) => (sorter?.by === dataIndex && sorter?.order === targetOrder ? sortedColor : undefined),\n    [dataIndex, sorter, sortedColor],\n  );\n\n  const toggledSortOrder = useMemo(() => {\n    if (sorter?.by !== dataIndex || sorter?.order === SortOrder.None) {\n      return defaultOrder;\n    }\n    if (cancelSort && sorter?.order != defaultOrder) {\n      return SortOrder.None;\n    }\n    return sorter?.order === SortOrder.Asc ? SortOrder.Desc : SortOrder.Asc;\n  }, [dataIndex, sorter, defaultOrder, cancelSort]);\n\n  if (typeof CustomRender === \"function\") {\n    let content: React.ReactElement | null = null;\n    if (dataIndex) {\n      content = CustomRender({\n        dataIndex,\n        rowIndex,\n        colIndex,\n        sorter,\n        onSort,\n        genCompareFn,\n        defaultOrder,\n        cancelSort,\n        sorterClick: () => {\n          if (genCompareFn && sorter?.genCompareFn !== genCompareFn) {\n            onSort({\n              by: dataIndex,\n              order: toggledSortOrder,\n              genCompareFn: genCompareFn,\n            });\n          } else {\n            onSort({\n              by: dataIndex,\n              order: toggledSortOrder,\n            });\n          }\n        },\n        sortAscColor: getColor(SortOrder.Asc),\n        sortDescColor: getColor(SortOrder.Desc),\n        toggledSortOrder,\n      });\n    } else {\n      const CustomRenderWithoutDataIndex = CustomRender as Required<HeadCellProps<T>>[\"CustomRender\"];\n      content = CustomRenderWithoutDataIndex({\n        rowIndex,\n        colIndex,\n        sorter,\n        onSort,\n        sort,\n        defaultOrder,\n        sortAscColor: getColor(SortOrder.Asc),\n        sortDescColor: getColor(SortOrder.Desc),\n      });\n    }\n    return tooltipProps ? <Tooltip {...tooltipProps}>{content}</Tooltip> : content;\n  }\n\n  const content = typeof Render === \"function\" ? Render({ dataIndex: dataIndex || (\"\" as keyof T), rowIndex, colIndex }) : Render;\n\n  const arialLabel = `Sort by ${typeof Render === \"string\" ? Render : dataIndex.toString()}`;\n\n  const thContent = sort ? (\n    <Flex\n      display=\"inline-flex\"\n      as=\"button\"\n      width=\"auto\"\n      cursor=\"pointer\"\n      aria-label={arialLabel}\n      textTransform=\"inherit\"\n      fontWeight=\"semibold\"\n      onClick={() => {\n        if (genCompareFn && sorter?.genCompareFn !== genCompareFn) {\n          onSort({\n            by: dataIndex,\n            order: toggledSortOrder,\n            genCompareFn: genCompareFn,\n          });\n        } else {\n          onSort({\n            by: dataIndex,\n            order: toggledSortOrder,\n          });\n        }\n      }}\n      alignItems=\"center\"\n    >\n      {content}\n      <Flex transform=\"scale(0.7)\" marginStart=\"2px\" flexDirection=\"column\">\n        <IconButton icon={<Icon as={AiOutlineUp} />} aria-label=\"Sort ascend\" fontSize=\"xx-small\" color={getColor(SortOrder.Asc)} />\n        <IconButton icon={<Icon as={AiOutlineDown} />} aria-label=\"Sort descend\" fontSize=\"xx-small\" color={getColor(SortOrder.Desc)} />\n      </Flex>\n    </Flex>\n  ) : (\n    <Box fontWeight=\"semibold\">{content}</Box>\n  );\n\n  return (\n    <Th textTransform=\"none\" color=\"inherit\" {...cellProps}>\n      {tooltipProps ? <Tooltip {...tooltipProps}>{thContent}</Tooltip> : thContent}\n    </Th>\n  );\n}\n","import { Tbody, Thead, Tr } from \"@chakra-ui/react\";\nimport once from \"lodash/once\";\nimport { Children, Fragment, isValidElement, useCallback, useRef } from \"react\";\n\nimport { Cell } from \"./Cell\";\nimport { Column } from \"./Column\";\nimport { HeadCell } from \"./HeadCell\";\n\nimport type { ColumnBodyCellRender, ColumnHeadCellRender, ColumnParams } from \"./Column\";\nimport type { HeadCellProps, HeadCellPropsWithDataIndex, RowProps } from \"./type\";\nimport type { ReactElement } from \"react\";\n\nfunction useHead<T>(headCellRender: ColumnHeadCellRender[][], rowProps: RowProps<T> = {}) {\n  const renderRef = useRef<{\n    headCellRender: ColumnHeadCellRender[][];\n    rowProps: RowProps<T>;\n  }>({\n    headCellRender,\n    rowProps,\n  });\n\n  renderRef.current = { headCellRender, rowProps };\n\n  return useCallback(() => {\n    const {\n      headCellRender,\n      rowProps: { commonRow, theadRow },\n    } = renderRef.current;\n    return (\n      <Thead>\n        {headCellRender.map((headCell, rowIndex) => {\n          const trProps = {\n            ...commonRow,\n            ...(Array.isArray(theadRow) ? theadRow[rowIndex] : theadRow),\n          };\n          return (\n            <Tr key={rowIndex} {...trProps}>\n              {/* we invoke this as function instead of component, so React will not unmount rendered node when rerender */}\n              {headCell.map((CellRender, colIndex) => CellRender({ rowIndex, colIndex }))}\n            </Tr>\n          );\n        })}\n      </Thead>\n    );\n  }, []);\n}\n\nfunction useBody<T>(bodyCellRender: ColumnBodyCellRender<T>[], rowProps: RowProps<T> = {}) {\n  const renderRef = useRef<{\n    bodyCellRender: ColumnBodyCellRender<T>[];\n    rowProps: RowProps<T>;\n  }>({ bodyCellRender, rowProps });\n  renderRef.current = { bodyCellRender, rowProps };\n  return useCallback(({ dataSource }: { dataSource: T[] }) => {\n    const {\n      bodyCellRender,\n      rowProps: { commonRow, tbodyRow, genTbodyRow },\n    } = renderRef.current;\n    return (\n      <Tbody>\n        {dataSource.map((rowData, rowIndex) => {\n          const trProps = {\n            ...commonRow,\n            ...tbodyRow,\n          };\n          const dynamicProps = genTbodyRow ? genTbodyRow({ rowIndex, rowData }) : {};\n\n          return (\n            <Tr key={rowIndex} {...trProps} {...dynamicProps}>\n              {bodyCellRender.map((CellRender, colIndex) => CellRender({ rowData, rowIndex, colIndex }))}\n            </Tr>\n          );\n        })}\n      </Tbody>\n    );\n  }, []);\n}\n\nconst logOnceDev = once(() => {\n  console.warn(\"pls make sure:\\n 1. do not add hook into hyper column usage.\\n 2. hyper column usage do not support hot reload\");\n});\n\nexport function useChildren<T>(\n  children?: ReactElement<any, (p: any) => ReactElement | null> | ReactElement<any, (p: any) => ReactElement | null>[],\n  rowProps?: RowProps<T>\n) {\n  const headCellRenderTemp: ColumnHeadCellRender[][] = [];\n  const bodyCellRenderTemp: ColumnBodyCellRender<T>[] = [];\n\n  let _children = children;\n\n  if (isValidElement(children) && children.type === Fragment) {\n    _children = children.props.children;\n  }\n\n  Children.forEach(_children, (child) => {\n    let _child: ReactElement | null = null;\n    if (child?.type === Column) {\n      _child = child;\n    } else if (typeof child?.type === \"function\") {\n      try {\n        if (process.env.NODE_ENV === \"development\" && process.env.IS_CLIENT) {\n          logOnceDev();\n        }\n        const rendered = child.type(child.props);\n        if (isValidElement(rendered) && rendered.type === Column) {\n          _child = rendered;\n        }\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n    }\n    // more usage write here\n    if (_child) {\n      const { dataIndex, cellProps, headCellProps, bodyCellProps, isHidden, headCellRender, bodyCellRender } = _child.props as ColumnParams<T>;\n\n      const headCellArrayRender: HeadCellProps<T>[] | HeadCellPropsWithDataIndex<T>[] = Array.isArray(headCellRender) ? headCellRender : [headCellRender];\n\n      const _childrenHeads = headCellArrayRender.map((_headCellRender: HeadCellProps<T> | HeadCellPropsWithDataIndex<T>) => {\n        const { cellProps: _cellProps, ...headCellRender } = _headCellRender;\n        const _childrenHead = ({ rowIndex, colIndex }: { rowIndex: number; colIndex: number }) => (\n          <HeadCell<T>\n            key={dataIndex ? String(dataIndex) : `${rowIndex}-${colIndex}`}\n            rowIndex={rowIndex}\n            colIndex={colIndex}\n            dataIndex={dataIndex}\n            cellProps={{\n              ...cellProps,\n              ..._cellProps,\n              ...headCellProps,\n            }}\n            {...headCellRender}\n          />\n        );\n        return _childrenHead;\n      });\n\n      const { cellProps: _cellProps, ..._bodyCellRender } = bodyCellRender;\n\n      const _childrenBody = ({ rowIndex, colIndex, rowData }: { rowIndex: number; colIndex: number; rowData: T }) => (\n        <Cell<T>\n          key={dataIndex ? String(dataIndex) : `${rowIndex}-${colIndex}`}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          rowData={rowData}\n          dataIndex={dataIndex}\n          cellProps={{\n            ...cellProps,\n            ..._cellProps,\n            ...bodyCellProps,\n          }}\n          {..._bodyCellRender}\n        />\n      );\n\n      if (!isHidden) {\n        bodyCellRenderTemp.push(_childrenBody);\n        _childrenHeads.forEach((_childrenHead, rowIndex) => {\n          headCellRenderTemp[rowIndex] = headCellRenderTemp[rowIndex] || [];\n          headCellRenderTemp[rowIndex].push(_childrenHead);\n        });\n      }\n    }\n  });\n\n  const Head = useHead(headCellRenderTemp, rowProps);\n  const Body = useBody(bodyCellRenderTemp, rowProps);\n\n  // NOTE it is necessary to memo this render function, because we invoke this function as render Element\n  const Content = useCallback(\n    ({ dataSource }: { dataSource: T[] }) => (\n      <>\n        <Head />\n        <Body dataSource={dataSource} />\n      </>\n    ),\n    [Body, Head]\n  );\n\n  return Content;\n}\n","import { useMemo } from \"react\";\n\nexport const useSkeleton = (hasData: any, skeletonRowCount = 0) => {\n  const skeletonRows = useMemo(() => new Array(skeletonRowCount).fill(null), [skeletonRowCount]);\n  return {\n    skeletonRows,\n    skeletonVisible: !hasData,\n  };\n};\n","import { Box } from \"@chakra-ui/react\";\n\nimport { BaseTable } from \"./BaseTable\";\nimport { Column } from \"./Column\";\nimport { Pagination } from \"./Pagination\";\nimport { useChildren } from \"./useChildren\";\nimport { useSkeleton } from \"./useSkeleton\";\nimport { SorterContext, useSorter } from \"./useSorter\";\n\nimport type { TableProps } from \"./type\";\n\nexport function Table<T extends Record<string, string>>({\n  dataSource,\n  sorter,\n  pagination,\n  noResultText: _noResultText,\n  CustomNoResult,\n  tableProps,\n  skeletonRowCount,\n  rowProps,\n  children,\n  containerProps,\n  afterSorting,\n}: TableProps<T>) {\n  const noResultText = \"empty\";\n  const { innerSorter, onSort, sortedRows } = useSorter(sorter, dataSource, afterSorting);\n  const { skeletonRows, skeletonVisible } = useSkeleton(dataSource, skeletonRowCount);\n\n  const ChildRender = useChildren(children, rowProps);\n\n  return (\n    <SorterContext.Provider\n      value={{\n        sorter: innerSorter,\n        onSort,\n      }}\n    >\n      <Box {...containerProps}>\n        <BaseTable {...tableProps}>{children && <ChildRender dataSource={skeletonVisible ? skeletonRows : sortedRows} />}</BaseTable>\n        {!skeletonVisible && sortedRows.length === 0 && (CustomNoResult ? <CustomNoResult /> : noResultText)}\n      </Box>\n      {!!pagination && <Pagination {...pagination} />}\n    </SorterContext.Provider>\n  );\n}\n\nTable.Column = Column;\n"],"names":["ScrollControlContext","createContext","totalSection","currentSection","setTotalSection","_length","setCurrentSection","_index","onNextSection","onPrevSection","useScrollControl","useContext","ScrollControl","_ref","onSectionIndexChange","children","initialSectionLength","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","prevSection","usePrevious","onSectionIndexChangeRef","useCallbackRef","i","useEffect","context","useMemo","_jsx","Provider","value","ScrollSectionContext","ref","current","ScrollViewContext","inViewArray","setCurrentView","_inView","ScrollSection","index","useRef","_useScrollView","inView","useInView","amount","margin","length","Box","position","overflow","ScrollContent","validElement","scrollY","useScroll","Children","forEach","element","isValidElement","type","push","count","Array","fill","setInViewArray","last","newInViewArray","_toConsumableArray","_useScrollControl","setCurrentSectionRef","prev","handler","throttle","l","leading","trailing","onChange","clearListeners","useSafeLayoutEffect","map","cloneElement","_Arrow","className","width","height","viewBox","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","Arrow","memo","ScrollToTop","fontSize","right","bottom","color","textAlign","verticalAlign","borderRadius","zIndex","display","base","md","alignItems","justifyContent","onClick","window","scrollTo","top","behavior","Icon","as","ScrollControlTool","render","clickHandler","targetElement","document","querySelector","concat","_document$scrollingEl","rect","getBoundingClientRect","scrollingElement","scrollTop","array","Flex","flexDirection","Wrap","spacing","_","WrapItem","isSelect","cursor","sx","backgroundColor","border","_Section","scrollYProgress","target","axis","offset","opacity","useTransform","y","motion","div","style","Section","_ref2","useIsMounted","BaseTable","restProps","Object","assign","_objectDestructuringEmpty","TableContainer","Table","_objectSpread","variant","Column","dataIndex","cellProps","headCellProps","bodyCellProps","isHidden","headCellRender","bodyCellRender","_Fragment","Navigator","props","Button","size","borderColor","textStyle","fontWeight","_active","background","_hover","Pagination","page","total","_ref$pageSize","pageSize","preButtonProps","nextButtonProps","_objectWithoutProperties","_excluded","_usePagination","totalPage","Math","ceil","hasNextPage","hasPrePage","usePagination","_jsxs","leftIcon","AiOutlineLeft","marginEnd","rightIcon","AiOutlineRight","lg","ErrorCatch","_Component","_inherits","_super","_this","_classCallCheck","_len","arguments","args","_key","call","apply","state","error","stack","hasError","_createClass","key","info","this","setState","message","componentStack","_this$state","console","Component","Td","resProps","OriginalTd","WrapperCom","Render","CellRender","CustomRender","rowIndex","colIndex","rowData","_excluded2","cellData","Cell","_ref3","_ref3$showSkeleton","showSkeleton","_ref4","Skeleton","_excluded3","DefaultSkeleton","SortOrder","SorterContext","sorter","order","None","onSort","HeadCell","genCompareFn","cancelSort","sort","_ref$sortedColor","sortedColor","_ref$defaultOrder","defaultOrder","Desc","tooltipProps","_useContext","getColor","useCallback","targetOrder","by","undefined","toggledSortOrder","Asc","content","sorterClick","sortAscColor","sortDescColor","Tooltip","arialLabel","toString","thContent","textTransform","transform","marginStart","IconButton","icon","AiOutlineUp","AiOutlineDown","Th","once","warn","useSkeleton","hasData","skeletonRowCount","skeletonRows","skeletonVisible","dataSource","pagination","CustomNoResult","noResultText","tableProps","rowProps","containerProps","_useSorter","afterSorting","a","b","innerSorter","setInnerSorter","_sorter$onSort","newSorter","sortedRows","_innerSorter$genCompa","tempRows","useSorter","_useSkeleton","ChildRender","headCellRenderTemp","bodyCellRenderTemp","_children","Fragment","child","_child","rendered","e","_childrenHeads","isArray","_headCellRender","_cellProps","String","_bodyCellRender","_childrenHead","Head","renderRef","_renderRef$current","_renderRef$current$ro","commonRow","theadRow","Thead","headCell","trProps","Tr","useHead","Body","_renderRef$current2","_renderRef$current2$r","tbodyRow","genTbodyRow","Tbody","dynamicProps","useBody","_ref5","useChildren"],"sourceRoot":""}