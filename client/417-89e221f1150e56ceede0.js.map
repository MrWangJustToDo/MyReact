{"version":3,"file":"417-89e221f1150e56ceede0.js","mappings":"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","sources":["webpack://@my-react/ssr-example/./src/client/component/ThreeFiber/Pointcloud.tsx"],"sourcesContent":["import { Canvas, extend } from \"@my-react/react-three-fiber\";\nimport { useCallback, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nimport type { ThreeEvent } from \"@my-react/react-three-fiber\";\n\nclass DotMaterialImpl extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      transparent: true,\n      uniforms: { size: { value: 15 }, scale: { value: 1 } },\n      vertexShader: THREE.ShaderLib.points.vertexShader,\n      fragmentShader: `\n      varying vec3 vColor;\n      void main() {\n        gl_FragColor = vec4(vColor, step(length(gl_PointCoord.xy - vec2(0.5)), 0.5));\n      }`,\n    });\n  }\n}\n\nconst DotMaterial = extend(DotMaterialImpl);\n\nconst white = new THREE.Color(\"white\");\nconst hotpink = new THREE.Color(\"hotpink\");\n\nfunction Particles({ pointCount }: { pointCount: number }) {\n  const [positions, colors] = useMemo(() => {\n    const positions = [...new Array(pointCount * 3)].map(() => 5 - Math.random() * 10);\n    const colors = [...new Array(pointCount)].flatMap(() => hotpink.toArray());\n    return [new Float32Array(positions), new Float32Array(colors)];\n  }, [pointCount]);\n\n  const points = useRef<THREE.Points>(null!);\n\n  const hover = useCallback((e: ThreeEvent<PointerEvent>) => {\n    e.stopPropagation();\n    white.toArray(points.current.geometry.attributes.color.array, e.index! * 3);\n    points.current.geometry.attributes.color.needsUpdate = true;\n  }, []);\n\n  const unhover = useCallback((e: ThreeEvent<PointerEvent>) => {\n    hotpink.toArray(points.current.geometry.attributes.color.array, e.index! * 3);\n    points.current.geometry.attributes.color.needsUpdate = true;\n  }, []);\n\n  return (\n    <points ref={points} onPointerOver={hover} onPointerOut={unhover}>\n      <bufferGeometry>\n        <bufferAttribute attach=\"attributes-position\" args={[positions, 3]} />\n        <bufferAttribute attach=\"attributes-color\" args={[colors, 3]} />\n      </bufferGeometry>\n      <DotMaterial vertexColors depthWrite={false} />\n    </points>\n  );\n}\n\nexport const Exp = function App() {\n  return (\n    <Canvas orthographic camera={{ zoom: 40, position: [0, 0, 100] }} raycaster={{ params: { Points: { threshold: 0.2 } } as any }}>\n      <Particles pointCount={1000} />\n    </Canvas>\n  );\n};\n"],"names":["DotMaterialImpl","_THREE$ShaderMaterial","_inherits","_super","_classCallCheck","call","transparent","uniforms","size","value","scale","vertexShader","THREE","points","fragmentShader","_createClass","DotMaterial","extend","white","hotpink","Particles","t0","t3","t4","t5","$","_c","pointCount","t2","positions","_toConsumableArray","Array","map","_temp","colors","flatMap","_temp2","Float32Array","t6","_t","_t2","_slicedToArray","positions_0","colors_0","useRef","Symbol","for","e","stopPropagation","toArray","current","geometry","attributes","color","array","index","needsUpdate","t7","hover","e_0","t8","t9","t10","t11","t12","unhover","_jsx","attach","args","_jsxs","children","vertexColors","depthWrite","Math","random","Exp","t1","zoom","position","Points","threshold","Canvas","orthographic","camera","raycaster","params"],"sourceRoot":""}