{"version":3,"file":"main-c8faa4b9cf6fc4c4d9a2.js","mappings":"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","sources":["webpack://@my-react/ssr-example/../../packages/myreact-dom/client.js","webpack://@my-react/ssr-example/../../../myreact-reconciler/index.js","webpack://@my-react/ssr-example/../../../myreact-reconciler/dist/cjs/index.production.js","webpack://@my-react/ssr-example/../../../myreact-shared/index.js","webpack://@my-react/ssr-example/../../../myreact-shared/dist/cjs/index.production.js","webpack://@my-react/ssr-example/../../packages/myreact-dom/index.js","webpack://@my-react/ssr-example/../../packages/myreact-jsx/dist/cjs/index.production.js","webpack://@my-react/ssr-example/../../packages/myreact-jsx/index.js","webpack://@my-react/ssr-example/../../packages/myreact-jsx/jsx-runtime.js","webpack://@my-react/ssr-example/../../packages/myreact/index.js","webpack://@my-react/ssr-example/../../packages/myreact/jsx-runtime.js","webpack://@my-react/ssr-example/../../src/apollo/cache.ts","webpack://@my-react/ssr-example/../../src/apollo/client.ts","webpack://@my-react/ssr-example/../../src/schema.ts","webpack://@my-react/ssr-example/../../src/apollo/links.ts","webpack://@my-react/ssr-example/../../src/generated.ts","webpack://@my-react/ssr-example/./src/client/config/container.ts","webpack://@my-react/ssr-example/./src/client/config/source.ts","webpack://@my-react/ssr-example/./src/client/router/routes.ts","webpack://@my-react/ssr-example/./src/client/common/LoadingBar/LoadingBar.tsx","webpack://@my-react/ssr-example/./src/client/common/LoadingBar/index.module.scss?5828","webpack://@my-react/ssr-example/./src/client/common/LoadingBar/index.tsx","webpack://@my-react/ssr-example/./src/client/common/WrapperRoute/index.tsx","webpack://@my-react/ssr-example/./src/client/common/RenderMatch.tsx","webpack://@my-react/ssr-example/./src/client/common/WrapperApollo/index.tsx","webpack://@my-react/ssr-example/./src/client/common/WrapperCatch/index.tsx","webpack://@my-react/ssr-example/./src/client/common/WrapperLang/index.tsx","webpack://@my-react/ssr-example/./src/client/common/App.tsx","webpack://@my-react/ssr-example/./src/client/app.tsx","webpack://@my-react/ssr-example/./src/client/entry.tsx","webpack://@my-react/ssr-example/./src/client/hooks/useLoadingStore.ts","webpack://@my-react/ssr-example/./src/client/hooks/useDebouncedState.ts","webpack://@my-react/ssr-example/./src/client/hooks/useSize.ts","webpack://@my-react/ssr-example/./src/client/hooks/useUpdate.ts","webpack://@my-react/ssr-example/./src/client/hooks/usePreLoad.ts","webpack://@my-react/ssr-example/./src/client/utils/dom.ts","webpack://@my-react/ssr-example/./src/client/hooks/useOverlay.ts","webpack://@my-react/ssr-example/./src/client/hooks/useIsMobile.ts","webpack://@my-react/ssr-example/./src/client/hooks/useIsMounted.ts","webpack://@my-react/ssr-example/./src/client/hooks/useLoadingBar.ts","webpack://@my-react/ssr-example/./src/client/hooks/useEffectOnce.ts","webpack://@my-react/ssr-example/./src/client/hooks/useWindowSize.ts","webpack://@my-react/ssr-example/./src/client/hooks/useLockBodyScroll.ts","webpack://@my-react/ssr-example/./src/client/hooks/useGetInitialProps.ts","webpack://@my-react/ssr-example/./src/client/hooks/useGetResponseListLayout.ts","webpack://@my-react/ssr-example/./src/client/common/AutoInjectProps.tsx","webpack://@my-react/ssr-example/./src/client/component/Footer/index.tsx","webpack://@my-react/ssr-example/./src/client/component/ColorMode/index.tsx","webpack://@my-react/ssr-example/./src/client/component/Header/GlobalStyle.tsx","webpack://@my-react/ssr-example/./src/client/component/Header/index.tsx","webpack://@my-react/ssr-example/./src/client/component/LockBody/index.tsx","webpack://@my-react/ssr-example/./src/client/component/Overlay/Mobile.tsx","webpack://@my-react/ssr-example/./src/client/component/Overlay/Desktop.tsx","webpack://@my-react/ssr-example/./src/client/component/ModuleManager/DesktopOverlay.tsx","webpack://@my-react/ssr-example/./src/client/component/ModuleManager/MobileOverlay.tsx","webpack://@my-react/ssr-example/./src/client/component/ModuleManager/index.tsx","webpack://@my-react/ssr-example/./src/client/common/Layout/index.tsx","webpack://@my-react/ssr-example/./src/client/router/routers.stream.ts","webpack://@my-react/ssr-example/./src/client/router/dynamicRoutes.ts","webpack://@my-react/ssr-example/./src/client/utils/delay.ts","webpack://@my-react/ssr-example/./src/client/utils/preLoad.ts","webpack://@my-react/ssr-example/./src/shared/env.ts","webpack://@my-react/ssr-example/./src/shared/i18n.ts","webpack://@my-react/ssr-example/./src/shared/store/saga/action/langSaga.ts","webpack://@my-react/ssr-example/./src/shared/store/saga/index.ts","webpack://@my-react/ssr-example/./src/shared/store/saga/utils.ts","webpack://@my-react/ssr-example/./src/shared/store/index.ts","webpack://@my-react/ssr-example/./src/shared/theme/index.ts","webpack://@my-react/ssr-example/./src/shared/theme/styles.ts","webpack://@my-react/ssr-example/./src/shared/theme/semanticTokens.ts","webpack://@my-react/ssr-example/./src/shared/template/Body.tsx","webpack://@my-react/ssr-example/./src/shared/template/Head.tsx","webpack://@my-react/ssr-example/./src/shared/template/index.tsx","webpack://@my-react/ssr-example/./src/shared/safeData.ts","webpack://@my-react/ssr-example/./src/shared/emotionCache.ts","webpack://@my-react/ssr-example/./src/shared/store/action.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/client/share/action.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/client/action/clientLang.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/client/action/clientProps.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/client/index.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/server/share/action.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/server/action/serverLang.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/server/index.ts","webpack://@my-react/ssr-example/./src/shared/store/reducer/index.ts","webpack://@my-react/ssr-example/./src/client/pages/ lazy ^\\.\\/.*$ chunkName: page-[request] prefetchOrder: 0 preloadOrder: 0 namespace object","webpack://@my-react/ssr-example/webpack/runtime/startup prefetch"],"sourcesContent":["\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","'use strict';\n\nvar react = require('@my-react/react');\n\nvar myreactShared = {exports: {}};\n\nvar index_production = {};\n\nvar hasRequiredIndex_production;\n\nfunction requireIndex_production () {\n\tif (hasRequiredIndex_production) return index_production;\n\thasRequiredIndex_production = 1;\n\t(function (exports) {\n\n\t\tvar merge = function (src, rest) {\r\n\t\t    return src | rest;\r\n\t\t};\r\n\t\tvar remove = function (src, rest) {\r\n\t\t    if (src & rest) {\r\n\t\t        return src ^ rest;\r\n\t\t    }\r\n\t\t    else {\r\n\t\t        return src;\r\n\t\t    }\r\n\t\t};\r\n\t\tvar include = function (src, rest) {\r\n\t\t    return src & rest;\r\n\t\t};\r\n\t\tvar exclude = function (src, rest) {\r\n\t\t    return !(src & rest);\r\n\t\t};\n\n\t\t/******************************************************************************\r\n\t\tCopyright (c) Microsoft Corporation.\r\n\r\n\t\tPermission to use, copy, modify, and/or distribute this software for any\r\n\t\tpurpose with or without fee is hereby granted.\r\n\r\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n\t\tREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n\t\tAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n\t\tINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n\t\tLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n\t\tOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n\t\tPERFORMANCE OF THIS SOFTWARE.\r\n\t\t***************************************************************************** */\r\n\t\t/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\n\t\tfunction __spreadArray(to, from, pack) {\r\n\t\t    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n\t\t        if (ar || !(i in from)) {\r\n\t\t            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n\t\t            ar[i] = from[i];\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return to.concat(ar || Array.prototype.slice.call(from));\r\n\t\t}\r\n\r\n\t\ttypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n\t\t    var e = new Error(message);\r\n\t\t    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n\t\t};\n\n\t\tvar once = function (action) {\r\n\t\t    var called = false;\r\n\t\t    return function () {\r\n\t\t        var args = [];\r\n\t\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t\t            args[_i] = arguments[_i];\r\n\t\t        }\r\n\t\t        if (called)\r\n\t\t            return;\r\n\t\t        called = true;\r\n\t\t        if (typeof action === \"function\")\r\n\t\t            action.call.apply(action, __spreadArray([null], args, false));\r\n\t\t    };\r\n\t\t};\n\n\t\tvar TYPEKEY = \"$$typeof\";\r\n\t\tvar Element = Symbol.for(\"react.element\");\r\n\t\tvar Memo = Symbol.for(\"react.memo\");\r\n\t\tvar ForwardRef = Symbol.for(\"react.forward_ref\");\r\n\t\tvar Portal = Symbol.for(\"react.portal\");\r\n\t\tvar Fragment = Symbol.for(\"react.fragment\");\r\n\t\tvar Context = Symbol.for(\"react.context\");\r\n\t\tvar Provider = Symbol.for(\"react.provider\");\r\n\t\tvar Consumer = Symbol.for(\"react.consumer\");\r\n\t\tvar Lazy = Symbol.for(\"react.lazy\");\r\n\t\tvar Suspense = Symbol.for(\"react.suspense\");\r\n\t\tvar Strict = Symbol.for(\"react.strict_mode\");\r\n\t\t// TODO\r\n\t\tvar KeepLive = Symbol.for(\"react.keep_live\");\r\n\t\tvar Scope = Symbol.for(\"react.scope\");\r\n\t\tvar Comment = Symbol.for(\"react.comment\");\r\n\t\tvar Offscreen = Symbol.for(\"react.offscreen\");\r\n\t\tvar Profiler = Symbol.for(\"react.profiler\");\n\n\t\tfunction isObject(target) {\r\n\t\t    return typeof target === \"object\" && target !== null;\r\n\t\t}\r\n\t\tfunction isFunction(target) {\r\n\t\t    return typeof target === \"function\";\r\n\t\t}\r\n\t\tfunction isArray(target) {\r\n\t\t    return Array.isArray(target);\r\n\t\t}\r\n\t\tfunction isSymbol(target) {\r\n\t\t    return typeof target === \"symbol\";\r\n\t\t}\r\n\t\tfunction isString(target) {\r\n\t\t    return typeof target === \"string\";\r\n\t\t}\r\n\t\tfunction isInteger(target) {\r\n\t\t    return Number.isInteger(Number(target));\r\n\t\t}\r\n\t\tfunction isNumber(target) {\r\n\t\t    return typeof target === \"number\";\r\n\t\t}\r\n\t\tfunction isCollection(target) {\r\n\t\t    return target instanceof Map || target instanceof Set || target instanceof WeakMap || target instanceof WeakSet;\r\n\t\t}\n\n\t\tvar UniqueArray = /** @class */ (function () {\r\n\t\t    function UniqueArray() {\r\n\t\t        this.set = new Set();\r\n\t\t        this.arr = new Array();\r\n\t\t        this.length = 0;\r\n\t\t    }\r\n\t\t    UniqueArray.prototype.uniPop = function () {\r\n\t\t        var v = this.arr.pop();\r\n\t\t        this.set.delete(v);\r\n\t\t        this.length--;\r\n\t\t        return v;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniPush = function (v) {\r\n\t\t        if (this.set.has(v))\r\n\t\t            return 0;\r\n\t\t        this.set.add(v);\r\n\t\t        this.arr.push(v);\r\n\t\t        this.length++;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniShift = function () {\r\n\t\t        var v = this.arr.shift();\r\n\t\t        this.set.delete(v);\r\n\t\t        this.length--;\r\n\t\t        return v;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniUnshift = function (v) {\r\n\t\t        if (this.set.has(v))\r\n\t\t            return 0;\r\n\t\t        this.set.add(v);\r\n\t\t        this.arr.unshift(v);\r\n\t\t        this.length++;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniDelete = function (v) {\r\n\t\t        if (this.set.has(v)) {\r\n\t\t            this.set.delete(v);\r\n\t\t            this.arr = this.arr.filter(function (i) { return i !== v; });\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.clear = function () {\r\n\t\t        this.length = 0;\r\n\t\t        this.set.clear();\r\n\t\t        this.arr.length = 0;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.getAll = function () {\r\n\t\t        return this.arr;\r\n\t\t    };\r\n\t\t    return UniqueArray;\r\n\t\t}());\n\n\t\texports.HOOK_TYPE = void 0;\r\n\t\t(function (HOOK_TYPE) {\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useId\"] = 0] = \"useId\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useRef\"] = 1] = \"useRef\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useMemo\"] = 2] = \"useMemo\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useState\"] = 3] = \"useState\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useSignal\"] = 4] = \"useSignal\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useEffect\"] = 5] = \"useEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useContext\"] = 6] = \"useContext\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useReducer\"] = 7] = \"useReducer\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useCallback\"] = 8] = \"useCallback\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useTransition\"] = 9] = \"useTransition\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useDebugValue\"] = 10] = \"useDebugValue\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useLayoutEffect\"] = 11] = \"useLayoutEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useDeferredValue\"] = 12] = \"useDeferredValue\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useInsertionEffect\"] = 13] = \"useInsertionEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useImperativeHandle\"] = 14] = \"useImperativeHandle\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useSyncExternalStore\"] = 15] = \"useSyncExternalStore\";\r\n\t\t})(exports.HOOK_TYPE || (exports.HOOK_TYPE = {}));\n\n\t\texports.UpdateQueueType = void 0;\r\n\t\t(function (UpdateQueueType) {\r\n\t\t    UpdateQueueType[UpdateQueueType[\"hook\"] = 2] = \"hook\";\r\n\t\t    UpdateQueueType[UpdateQueueType[\"component\"] = 1] = \"component\";\r\n\t\t})(exports.UpdateQueueType || (exports.UpdateQueueType = {}));\n\n\t\texports.STATE_TYPE = void 0;\r\n\t\t(function (STATE_TYPE) {\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__stable__\"] = 2] = \"__stable__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__skippedConcurrent__\"] = 4] = \"__skippedConcurrent__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__skippedSync__\"] = 8] = \"__skippedSync__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__inherit__\"] = 16] = \"__inherit__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__triggerConcurrent__\"] = 32] = \"__triggerConcurrent__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__triggerSync__\"] = 64] = \"__triggerSync__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__unmount__\"] = 128] = \"__unmount__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__hmr__\"] = 256] = \"__hmr__\";\r\n\t\t})(exports.STATE_TYPE || (exports.STATE_TYPE = {}));\n\n\t\texports.PATCH_TYPE = void 0;\r\n\t\t(function (PATCH_TYPE) {\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__update__\"] = 2] = \"__update__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__append__\"] = 4] = \"__append__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__position__\"] = 8] = \"__position__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__context__\"] = 16] = \"__context__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__effect__\"] = 32] = \"__effect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__layoutEffect__\"] = 64] = \"__layoutEffect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__insertionEffect__\"] = 128] = \"__insertionEffect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__unmount__\"] = 256] = \"__unmount__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__ref__\"] = 512] = \"__ref__\";\r\n\t\t})(exports.PATCH_TYPE || (exports.PATCH_TYPE = {}));\n\n\t\texports.Effect_TYPE = void 0;\r\n\t\t(function (Effect_TYPE) {\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__effect__\"] = 1] = \"__effect__\";\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__unmount__\"] = 2] = \"__unmount__\";\r\n\t\t})(exports.Effect_TYPE || (exports.Effect_TYPE = {}));\n\n\t\tvar compareVersion = function (version1, version2) {\r\n\t\t    var compare = function (arr1, arr2) {\r\n\t\t        if (arr1.length && arr2.length) {\r\n\t\t            var v1 = arr1[0];\r\n\t\t            var v2 = arr2[0];\r\n\t\t            if (v1 > v2)\r\n\t\t                return true;\r\n\t\t            if (v2 > v1)\r\n\t\t                return false;\r\n\t\t            return compare(arr1.slice(1), arr2.slice(1));\r\n\t\t        }\r\n\t\t        if (arr1.length)\r\n\t\t            return true;\r\n\t\t        if (arr2.length)\r\n\t\t            return false;\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return compare(version1.split(\".\").map(Number), version2.split(\".\").map(Number));\r\n\t\t};\n\n\t\tvar isNormalEquals = function (src, target, isSkipKey) {\r\n\t\t    var isEquals = Object.is(src, target);\r\n\t\t    if (isEquals)\r\n\t\t        return true;\r\n\t\t    var hasSkipKeyFunction = typeof isSkipKey === \"function\";\r\n\t\t    if (typeof src === \"object\" && typeof target === \"object\" && src !== null && target !== null) {\r\n\t\t        var srcKeys = Object.keys(src);\r\n\t\t        var targetKeys = Object.keys(target);\r\n\t\t        if (srcKeys.length !== targetKeys.length)\r\n\t\t            return false;\r\n\t\t        var res = true;\r\n\t\t        if (hasSkipKeyFunction) {\r\n\t\t            for (var key in src) {\r\n\t\t                if (isSkipKey(key)) {\r\n\t\t                    continue;\r\n\t\t                }\r\n\t\t                else {\r\n\t\t                    res = res && Object.is(src[key], target[key]);\r\n\t\t                }\r\n\t\t                if (!res)\r\n\t\t                    return res;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            for (var key in src) {\r\n\t\t                res = res && Object.is(src[key], target[key]);\r\n\t\t                if (!res)\r\n\t\t                    return res;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return res;\r\n\t\t    }\r\n\t\t    return false;\r\n\t\t};\r\n\t\tvar isArrayEquals = function (src, target) {\r\n\t\t    var isEquals = Object.is(src, target);\r\n\t\t    if (isEquals)\r\n\t\t        return true;\r\n\t\t    if (Array.isArray(src) && Array.isArray(target) && src.length === target.length) {\r\n\t\t        var re = true;\r\n\t\t        for (var key in src) {\r\n\t\t            re = re && Object.is(src[key], target[key]);\r\n\t\t            if (!re)\r\n\t\t                return re;\r\n\t\t        }\r\n\t\t        return re;\r\n\t\t    }\r\n\t\t    return false;\r\n\t\t};\n\n\t\tvar ListTreeNode = /** @class */ (function () {\r\n\t\t    function ListTreeNode(value) {\r\n\t\t        this.prev = null;\r\n\t\t        this.next = null;\r\n\t\t        this.value = value;\r\n\t\t    }\r\n\t\t    return ListTreeNode;\r\n\t\t}());\r\n\t\tvar ListTree = /** @class */ (function () {\r\n\t\t    function ListTree() {\r\n\t\t        this.length = 0;\r\n\t\t        this.head = null;\r\n\t\t        this.foot = null;\r\n\t\t    }\r\n\t\t    ListTree.prototype.push = function (node) {\r\n\t\t        var listNode = new ListTreeNode(node);\r\n\t\t        this.length++;\r\n\t\t        if (!this.foot) {\r\n\t\t            this.head = listNode;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            this.foot.next = listNode;\r\n\t\t            listNode.prev = this.foot;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.pop = function () {\r\n\t\t        var foot = this.foot;\r\n\t\t        if (foot) {\r\n\t\t            this.delete(foot);\r\n\t\t            return foot.value;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.unshift = function (node) {\r\n\t\t        var listNode = new ListTreeNode(node);\r\n\t\t        this.length++;\r\n\t\t        if (!this.head) {\r\n\t\t            this.head = listNode;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            this.head.prev = listNode;\r\n\t\t            listNode.next = this.head;\r\n\t\t            this.head = listNode;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.shift = function () {\r\n\t\t        var head = this.head;\r\n\t\t        if (head) {\r\n\t\t            this.delete(head);\r\n\t\t            return head.value;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.pickHead = function () {\r\n\t\t        return this.head.value;\r\n\t\t    };\r\n\t\t    ListTree.prototype.pickFoot = function () {\r\n\t\t        return this.foot.value;\r\n\t\t    };\r\n\t\t    ListTree.prototype.listToFoot = function (action) {\r\n\t\t        var node = this.head;\r\n\t\t        while (node) {\r\n\t\t            action(node.value);\r\n\t\t            node = node.next;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.listToHead = function (action) {\r\n\t\t        var node = this.foot;\r\n\t\t        while (node) {\r\n\t\t            action(node.value);\r\n\t\t            node = node.prev;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.toArray = function () {\r\n\t\t        var re = [];\r\n\t\t        this.listToFoot(function (v) { return re.push(v); });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.delete = function (node) {\r\n\t\t        if (this.head === node) {\r\n\t\t            var next = node.next;\r\n\t\t            node.next = null;\r\n\t\t            if (next) {\r\n\t\t                this.head = next;\r\n\t\t                next.prev = null;\r\n\t\t            }\r\n\t\t            else {\r\n\t\t                this.head = null;\r\n\t\t                this.foot = null;\r\n\t\t            }\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t        else if (this.foot === node) {\r\n\t\t            var prev = node.prev;\r\n\t\t            node.prev = null;\r\n\t\t            if (prev) {\r\n\t\t                this.foot = prev;\r\n\t\t                prev.next = null;\r\n\t\t            }\r\n\t\t            else {\r\n\t\t                this.head = null;\r\n\t\t                this.foot = null;\r\n\t\t            }\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t        else if (this.hasNode(node)) {\r\n\t\t            var prev = node.prev;\r\n\t\t            var next = node.next;\r\n\t\t            node.prev = null;\r\n\t\t            node.next = null;\r\n\t\t            prev.next = next;\r\n\t\t            next.prev = prev;\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.size = function () {\r\n\t\t        return this.length;\r\n\t\t    };\r\n\t\t    ListTree.prototype.hasNode = function (node) {\r\n\t\t        var listNode = this.head;\r\n\t\t        while (listNode) {\r\n\t\t            if (Object.is(listNode, node))\r\n\t\t                return true;\r\n\t\t            listNode = listNode.next;\r\n\t\t        }\r\n\t\t        return false;\r\n\t\t    };\r\n\t\t    ListTree.prototype.hasValue = function (node) {\r\n\t\t        var listNode = this.head;\r\n\t\t        while (listNode) {\r\n\t\t            if (Object.is(listNode.value, node))\r\n\t\t                return true;\r\n\t\t            listNode = listNode.next;\r\n\t\t        }\r\n\t\t        return false;\r\n\t\t    };\r\n\t\t    ListTree.prototype.some = function (iterator) {\r\n\t\t        var re = false;\r\n\t\t        this.listToFoot(function (node) {\r\n\t\t            re = re || iterator(node);\r\n\t\t        });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.every = function (iterator) {\r\n\t\t        var re = true;\r\n\t\t        this.listToFoot(function (node) {\r\n\t\t            re = re && iterator(node);\r\n\t\t        });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.concat = function (list) {\r\n\t\t        var _this = this;\r\n\t\t        list.listToFoot(function (node) { return _this.push(node); });\r\n\t\t    };\r\n\t\t    ListTree.prototype.clone = function () {\r\n\t\t        var newList = new ListTree();\r\n\t\t        this.listToFoot(function (v) { return newList.push(v); });\r\n\t\t        return newList;\r\n\t\t    };\r\n\t\t    return ListTree;\r\n\t\t}());\n\n\t\texports.Comment = Comment;\n\t\texports.Consumer = Consumer;\n\t\texports.Context = Context;\n\t\texports.Element = Element;\n\t\texports.ForwardRef = ForwardRef;\n\t\texports.Fragment = Fragment;\n\t\texports.KeepLive = KeepLive;\n\t\texports.Lazy = Lazy;\n\t\texports.ListTree = ListTree;\n\t\texports.ListTreeNode = ListTreeNode;\n\t\texports.Memo = Memo;\n\t\texports.Offscreen = Offscreen;\n\t\texports.Portal = Portal;\n\t\texports.Profiler = Profiler;\n\t\texports.Provider = Provider;\n\t\texports.Scope = Scope;\n\t\texports.Strict = Strict;\n\t\texports.Suspense = Suspense;\n\t\texports.TYPEKEY = TYPEKEY;\n\t\texports.UniqueArray = UniqueArray;\n\t\texports.compareVersion = compareVersion;\n\t\texports.exclude = exclude;\n\t\texports.include = include;\n\t\texports.isArray = isArray;\n\t\texports.isArrayEquals = isArrayEquals;\n\t\texports.isCollection = isCollection;\n\t\texports.isFunction = isFunction;\n\t\texports.isInteger = isInteger;\n\t\texports.isNormalEquals = isNormalEquals;\n\t\texports.isNumber = isNumber;\n\t\texports.isObject = isObject;\n\t\texports.isString = isString;\n\t\texports.isSymbol = isSymbol;\n\t\texports.merge = merge;\n\t\texports.once = once;\n\t\texports.remove = remove;\n\t\t\n\t} (index_production));\n\treturn index_production;\n}\n\n{\n  myreactShared.exports = requireIndex_production();\n}\n\nvar myreactSharedExports = myreactShared.exports;\n\nvar MyWeakMap = typeof WeakMap !== \"undefined\" ? WeakMap : Map;\n\nvar currentRenderDispatch = react.createRef(null);\r\nvar currentRefreshHandler = react.createRef(null);\r\n// TODO\r\n// need improve\r\nvar currentTriggerFiber = react.createRef(null);\r\nvar fiberToDispatchMap = new MyWeakMap();\n\nvar defaultGenerateEffectMap = function (fiber, effect, map) {\r\n    var list = map.get(fiber) || new myreactSharedExports.ListTree();\r\n    list.push(effect);\r\n    map.set(fiber, list);\r\n};\r\nvar effect = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__effect__)) {\r\n        var effectMap = renderDispatch.runtimeMap.effectMap;\r\n        var allEffect = effectMap.get(fiber);\r\n        effectMap.delete(fiber);\r\n        if (allEffect && allEffect.length) {\r\n            allEffect.listToFoot(function (effect) { return safeCallWithFiber({ fiber: fiber, action: function () { return effect.call(null); } }); });\r\n        }\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__effect__);\r\n    }\r\n};\r\nvar layoutEffect = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__layoutEffect__)) {\r\n        var layoutEffectMap = renderDispatch.runtimeMap.layoutEffectMap;\r\n        var allLayoutEffect = layoutEffectMap.get(fiber);\r\n        layoutEffectMap.delete(fiber);\r\n        if (allLayoutEffect && allLayoutEffect.length) {\r\n            allLayoutEffect.listToFoot(function (effect) { return safeCallWithFiber({ fiber: fiber, action: function () { return effect.call(null); } }); });\r\n        }\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__layoutEffect__);\r\n    }\r\n};\r\nvar insertionEffect = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__insertionEffect__)) {\r\n        var insertionEffectMap = renderDispatch.runtimeMap.insertionEffectMap;\r\n        var allInsertionEffect = insertionEffectMap.get(fiber);\r\n        insertionEffectMap.delete(fiber);\r\n        if (allInsertionEffect && allInsertionEffect.length) {\r\n            allInsertionEffect.listToFoot(function (effect) { return safeCallWithFiber({ fiber: fiber, action: function () { return effect.call(null); } }); });\r\n        }\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__insertionEffect__);\r\n    }\r\n};\r\nvar deleteEffect = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__insertionEffect__)) {\r\n        var insertionEffectMap = renderDispatch.runtimeMap.insertionEffectMap;\r\n        insertionEffectMap.delete(fiber);\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__insertionEffect__);\r\n    }\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__layoutEffect__)) {\r\n        var layoutEffectMap = renderDispatch.runtimeMap.layoutEffectMap;\r\n        layoutEffectMap.delete(fiber);\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__layoutEffect__);\r\n    }\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__effect__)) {\r\n        var effectMap = renderDispatch.runtimeMap.effectMap;\r\n        effectMap.delete(fiber);\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__effect__);\r\n    }\r\n};\n\nvar hmr = function (fiber, nextType, forceRefresh) {\r\n    {\r\n        throw new Error(\"[@my-react/react] can not try to dev refresh this app in prod env!\");\r\n    }\r\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar isErrorBoundariesInstance = function (instance, Component) {\r\n    return typeof instance.componentDidCatch === \"function\" || typeof Component.getDerivedStateFromError === \"function\";\r\n};\r\nvar isErrorBoundariesComponent = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__class__)) {\r\n        var Component = fiber.elementType;\r\n        var typedComponent = Component;\r\n        var typedInstance = fiber.instance;\r\n        return isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    }\r\n    return false;\r\n};\r\nvar defaultGenerateErrorBoundariesMap = function (fiber, map) {\r\n    var parent = fiber.parent;\r\n    if (parent) {\r\n        if (isErrorBoundariesComponent(parent)) {\r\n            map.set(fiber, parent);\r\n        }\r\n        else {\r\n            var parentErrorBoundaries = map.get(parent);\r\n            parentErrorBoundaries && map.set(fiber, parentErrorBoundaries);\r\n        }\r\n    }\r\n};\r\nvar defaultResolveErrorBoundaries = function (fiber) {\r\n    var parent = fiber.parent;\r\n    while (parent) {\r\n        if (isErrorBoundariesComponent(parent)) {\r\n            return parent;\r\n        }\r\n        parent = parent.parent;\r\n    }\r\n    return null;\r\n};\n\n/* eslint-disable max-lines */\r\nvar enableLegacyLifeCycle = react.__my_react_shared__.enableLegacyLifeCycle;\r\nvar processComponentStateFromProps = function (fiber) {\r\n    var Component = fiber.elementType;\r\n    var typedComponent = Component;\r\n    var typedInstance = fiber.instance;\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    var pendingProps = fiber.pendingProps;\r\n    var currentStateObj = isErrorCatch ? fiber.pendingState.state : fiber.pendingState;\r\n    var pendingState = currentStateObj.pendingState;\r\n    if (typedComponent.getDerivedStateFromProps) {\r\n        var payloadState = safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedComponent.getDerivedStateFromProps) === null || _a === void 0 ? void 0 : _a.call(typedComponent, pendingProps, pendingState); } });\r\n        if (payloadState) {\r\n            var newState = Object.assign({}, pendingState, payloadState);\r\n            typedInstance.state = newState;\r\n            currentStateObj.pendingState = newState;\r\n        }\r\n    }\r\n};\r\n// TODO\r\nvar processComponentStateFromError = function (fiber, error) {\r\n    var Component = fiber.elementType;\r\n    var typedComponent = Component;\r\n    var typedInstance = fiber.instance;\r\n    if (typedComponent.getDerivedStateFromError) {\r\n        var currentStateObj = fiber.pendingState.state;\r\n        var payloadState = safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedComponent.getDerivedStateFromError) === null || _a === void 0 ? void 0 : _a.call(typedComponent, error); } });\r\n        if (payloadState) {\r\n            // if there are a error happen, ignore all the updateQueue\r\n            var newState = Object.assign({}, typedInstance.state, payloadState);\r\n            typedInstance.state = newState;\r\n            currentStateObj.pendingState = newState;\r\n        }\r\n    }\r\n};\r\nvar processComponentInstanceOnMount = function (fiber) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var Component = fiber.elementType;\r\n    var typedComponent = Component;\r\n    var ProviderFiber = renderDispatch.resolveContextFiber(fiber, typedComponent.contextType);\r\n    var context = renderDispatch.resolveContextValue(ProviderFiber, typedComponent.contextType);\r\n    var props = Object.assign({}, fiber.pendingProps);\r\n    var instance = safeCallWithFiber({ fiber: fiber, action: function () { return new typedComponent(props, context); } });\r\n    instance.props = props;\r\n    instance.context = context;\r\n    fiber.instance = instance;\r\n    instance._setOwner(fiber);\r\n    instance._setContext(ProviderFiber);\r\n    var pendingState = instance.state;\r\n    var isErrorCatch = isErrorBoundariesInstance(instance, typedComponent);\r\n    // prepare state flow\r\n    if (!isErrorCatch) {\r\n        fiber.pendingState = { pendingState: pendingState, callback: [], isForce: false };\r\n    }\r\n    else {\r\n        fiber.pendingState = { state: { pendingState: pendingState, callback: [], isForce: false }, error: { revertState: null, error: null, stack: null } };\r\n        fiber.memoizedState = { stableState: null, revertState: null };\r\n    }\r\n};\r\nvar processComponentFiberOnUpdate = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    typedInstance._setOwner(fiber);\r\n};\r\nvar processComponentRenderOnMountAndUpdate = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    var children = safeCallWithFiber({ fiber: fiber, action: function () { return typedInstance.render(); } });\r\n    return children;\r\n};\r\nvar processComponentDidMountOnMount = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (typedInstance.componentDidMount && myreactSharedExports.exclude(typedInstance.mode, myreactSharedExports.Effect_TYPE.__effect__)) {\r\n        typedInstance.mode = myreactSharedExports.Effect_TYPE.__effect__;\r\n        renderDispatch.pendingLayoutEffect(fiber, function () {\r\n            var _a;\r\n            typedInstance.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            (_a = typedInstance.componentDidMount) === null || _a === void 0 ? void 0 : _a.call(typedInstance);\r\n        });\r\n    }\r\n};\r\nvar processComponentDidCatchOnMountAndUpdate = function (fiber, error, stack) {\r\n    var typedInstance = fiber.instance;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (typedInstance.componentDidCatch && myreactSharedExports.exclude(typedInstance.mode, myreactSharedExports.Effect_TYPE.__effect__)) {\r\n        typedInstance.mode = myreactSharedExports.Effect_TYPE.__effect__;\r\n        renderDispatch.pendingLayoutEffect(fiber, function () {\r\n            var _a;\r\n            typedInstance.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            (_a = typedInstance.componentDidCatch) === null || _a === void 0 ? void 0 : _a.call(typedInstance, error, { componentStack: stack });\r\n        });\r\n    }\r\n};\r\nvar processComponentContextOnUpdate = function (fiber) {\r\n    var Component = fiber.elementType;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var typedComponent = Component;\r\n    var typedInstance = fiber.instance;\r\n    if (typedComponent.contextType) {\r\n        if (!(typedInstance === null || typedInstance === void 0 ? void 0 : typedInstance._contextFiber) || myreactSharedExports.include(typedInstance._contextFiber.state, myreactSharedExports.STATE_TYPE.__unmount__)) {\r\n            var ProviderFiber = renderDispatch.resolveContextFiber(fiber, typedComponent.contextType);\r\n            var context = renderDispatch.resolveContextValue(ProviderFiber, typedComponent.contextType);\r\n            typedInstance === null || typedInstance === void 0 ? void 0 : typedInstance._setContext(ProviderFiber);\r\n            return context;\r\n        }\r\n        else {\r\n            var context = renderDispatch.resolveContextValue(typedInstance._contextFiber, typedComponent.contextType);\r\n            typedInstance === null || typedInstance === void 0 ? void 0 : typedInstance._setContext(typedInstance._contextFiber);\r\n            return context;\r\n        }\r\n    }\r\n};\r\nvar processComponentPropsAndContextOnActive = function (fiber) {\r\n    var props = Object.assign({}, fiber.pendingProps);\r\n    var context = processComponentContextOnUpdate(fiber);\r\n    var typedInstance = fiber.instance;\r\n    typedInstance.props = props;\r\n    typedInstance.context = context;\r\n};\r\nvar processComponentShouldUpdateOnUpdate = function (fiber, _a) {\r\n    var nextState = _a.nextState, nextProps = _a.nextProps, nextContext = _a.nextContext;\r\n    var typedInstance = fiber.instance;\r\n    // if (include(fiber.state, STATE_TYPE.__triggerSync__ | STATE_TYPE.__triggerConcurrent__)) return true;\r\n    if (typedInstance.shouldComponentUpdate) {\r\n        return safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.shouldComponentUpdate) === null || _a === void 0 ? void 0 : _a.call(typedInstance, nextProps, nextState, nextContext); } });\r\n    }\r\n    return true;\r\n};\r\nvar processComponentGetSnapshotOnUpdate = function (fiber, _a) {\r\n    var baseState = _a.baseState, baseProps = _a.baseProps;\r\n    var typedInstance = fiber.instance;\r\n    if (typedInstance.getSnapshotBeforeUpdate) {\r\n        return safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.getSnapshotBeforeUpdate) === null || _a === void 0 ? void 0 : _a.call(typedInstance, baseProps, baseState); } });\r\n    }\r\n    return null;\r\n};\r\nvar processComponentDidUpdateOnUpdate = function (fiber, _a) {\r\n    var baseState = _a.baseState, baseProps = _a.baseProps, snapshot = _a.snapshot, callback = _a.callback;\r\n    var typedInstance = fiber.instance;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var hasEffect = typedInstance.componentDidUpdate || callback.length;\r\n    if (hasEffect && myreactSharedExports.exclude(typedInstance.mode, myreactSharedExports.Effect_TYPE.__effect__)) {\r\n        typedInstance.mode = myreactSharedExports.Effect_TYPE.__effect__;\r\n        renderDispatch.pendingLayoutEffect(fiber, function () {\r\n            var _a;\r\n            typedInstance.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            safeCallWithFiber({ fiber: fiber, action: function () { return callback.forEach(function (c) { return c.call(null); }); } });\r\n            (_a = typedInstance.componentDidUpdate) === null || _a === void 0 ? void 0 : _a.call(typedInstance, baseProps, baseState, snapshot);\r\n        });\r\n    }\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar processComponentWillMountOnMount = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    var hasLegacyLifeFunction = false;\r\n    // TODO setState\r\n    if (typedInstance.UNSAFE_componentWillMount) {\r\n        hasLegacyLifeFunction = true;\r\n        safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.UNSAFE_componentWillMount) === null || _a === void 0 ? void 0 : _a.call(typedInstance); } });\r\n    }\r\n    if (typedInstance.componentWillMount) {\r\n        hasLegacyLifeFunction = true;\r\n        safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.componentWillMount) === null || _a === void 0 ? void 0 : _a.call(typedInstance); } });\r\n    }\r\n    return hasLegacyLifeFunction;\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar processComponentWillReceiveProps = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    var hasLegacyLifeFunction = false;\r\n    // only trigger on parent component update\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__inherit__)) {\r\n        if (typedInstance.UNSAFE_componentWillReceiveProps) {\r\n            hasLegacyLifeFunction = true;\r\n            var nextProps_1 = Object.assign({}, fiber.pendingProps);\r\n            safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.UNSAFE_componentWillReceiveProps) === null || _a === void 0 ? void 0 : _a.call(typedInstance, nextProps_1); } });\r\n        }\r\n        if (typedInstance.componentWillReceiveProps) {\r\n            hasLegacyLifeFunction = true;\r\n            var nextProps_2 = Object.assign({}, fiber.pendingProps);\r\n            safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.componentWillReceiveProps) === null || _a === void 0 ? void 0 : _a.call(typedInstance, nextProps_2); } });\r\n        }\r\n    }\r\n    return hasLegacyLifeFunction;\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar processComponentWillUpdate = function (fiber, _a) {\r\n    var nextProps = _a.nextProps, nextState = _a.nextState;\r\n    var typedInstance = fiber.instance;\r\n    if (typedInstance.UNSAFE_componentWillUpdate) {\r\n        safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.UNSAFE_componentWillUpdate) === null || _a === void 0 ? void 0 : _a.call(typedInstance, nextProps, nextState); } });\r\n    }\r\n    if (typedInstance.componentWillUpdate) {\r\n        safeCallWithFiber({ fiber: fiber, action: function () { var _a; return (_a = typedInstance.componentWillUpdate) === null || _a === void 0 ? void 0 : _a.call(typedInstance, nextProps, nextState); } });\r\n    }\r\n};\r\nvar classComponentMount = function (fiber) {\r\n    processComponentInstanceOnMount(fiber);\r\n    processComponentStateFromProps(fiber);\r\n    // legacy lifeCycle\r\n    if (enableLegacyLifeCycle.current) {\r\n        beforeSyncFlush();\r\n        processComponentWillMountOnMount(fiber) && syncFlushComponentQueue(fiber);\r\n        afterSyncFlush();\r\n    }\r\n    var children = processComponentRenderOnMountAndUpdate(fiber);\r\n    processComponentDidMountOnMount(fiber);\r\n    return children;\r\n};\r\n// TODO\r\nvar classComponentActive = function (fiber) {\r\n    processComponentFiberOnUpdate(fiber);\r\n    processComponentPropsAndContextOnActive(fiber);\r\n    var children = processComponentRenderOnMountAndUpdate(fiber);\r\n    processComponentDidMountOnMount(fiber);\r\n    return children;\r\n};\r\n// TODO\r\nvar classComponentUpdateFromNormal = function (fiber) {\r\n    processComponentFiberOnUpdate(fiber);\r\n    processComponentStateFromProps(fiber);\r\n    if (enableLegacyLifeCycle.current) {\r\n        beforeSyncFlush();\r\n        processComponentWillReceiveProps(fiber) && syncFlushComponentQueue(fiber);\r\n        afterSyncFlush();\r\n    }\r\n    var typedInstance = fiber.instance;\r\n    var typedComponent = fiber.elementType;\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    var pendingState = isErrorCatch ? fiber.pendingState.state : fiber.pendingState;\r\n    var baseState = typedInstance.state;\r\n    var baseProps = typedInstance.props;\r\n    // const baseContext = typedInstance.context;\r\n    var nextState = Object.assign({}, pendingState.pendingState);\r\n    var nextProps = Object.assign({}, fiber.pendingProps);\r\n    var nextContext = processComponentContextOnUpdate(fiber);\r\n    var shouldUpdate = pendingState.isForce;\r\n    if (!shouldUpdate) {\r\n        shouldUpdate = processComponentShouldUpdateOnUpdate(fiber, {\r\n            nextState: nextState,\r\n            nextProps: nextProps,\r\n            nextContext: nextContext,\r\n        });\r\n    }\r\n    if (shouldUpdate && enableLegacyLifeCycle.current) {\r\n        processComponentWillUpdate(fiber, { nextProps: nextProps, nextState: nextState });\r\n    }\r\n    typedInstance.state = nextState;\r\n    typedInstance.props = nextProps;\r\n    typedInstance.context = nextContext;\r\n    if (shouldUpdate) {\r\n        var children = processComponentRenderOnMountAndUpdate(fiber);\r\n        var snapshot = processComponentGetSnapshotOnUpdate(fiber, { baseState: baseState, baseProps: baseProps });\r\n        processComponentDidUpdateOnUpdate(fiber, {\r\n            snapshot: snapshot,\r\n            baseProps: baseProps,\r\n            baseState: baseState,\r\n            callback: pendingState.callback,\r\n        });\r\n        return { updated: true, children: children };\r\n    }\r\n    else {\r\n        return { updated: false };\r\n    }\r\n};\r\nvar classComponentUpdateFromError = function (fiber) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var _a = fiber.pendingState.error, error = _a.error, stack = _a.stack;\r\n    processComponentStateFromError(fiber, error);\r\n    var children = processComponentRenderOnMountAndUpdate(fiber);\r\n    processComponentDidCatchOnMountAndUpdate(fiber, error, stack);\r\n    renderDispatch.runtimeFiber.errorCatchFiber = fiber;\r\n    return { updated: true, children: children };\r\n};\r\nvar syncComponentStateToFiber = function (fiber) {\r\n    var _a;\r\n    var typedInstance = fiber.instance;\r\n    var typedComponent = fiber.elementType;\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    if (isErrorCatch) {\r\n        var typedPendingState = fiber.pendingState;\r\n        var typedMemoizedState = fiber.memoizedState;\r\n        if ((_a = typedPendingState.error) === null || _a === void 0 ? void 0 : _a.error) {\r\n            var typedInstance_1 = fiber.instance;\r\n            // sync pendingState\r\n            typedPendingState.state.pendingState = Object.assign({}, typedInstance_1.state);\r\n            // sync memoizedState\r\n            typedMemoizedState.stableState = Object.assign({}, typedInstance_1.state);\r\n            typedMemoizedState.revertState = typedPendingState.error.revertState;\r\n            // clear pendingState\r\n            typedPendingState.state.isForce = false;\r\n            typedPendingState.state.callback = [];\r\n            typedPendingState.error.stack = null;\r\n            typedPendingState.error.error = null;\r\n            typedPendingState.error.revertState = null;\r\n        }\r\n        else {\r\n            var typedInstance_2 = fiber.instance;\r\n            // sync pendingState\r\n            typedPendingState.state.pendingState = Object.assign({}, typedInstance_2.state);\r\n            // sync memoizedState\r\n            typedMemoizedState.stableState = Object.assign({}, typedInstance_2.state);\r\n            // clear pendingState\r\n            typedPendingState.state.isForce = false;\r\n            typedPendingState.state.callback = [];\r\n        }\r\n    }\r\n    else {\r\n        var typedPendingState = fiber.pendingState;\r\n        var typedInstance_3 = fiber.instance;\r\n        // sync pendingState\r\n        typedPendingState.pendingState = Object.assign({}, typedInstance_3.state);\r\n        // clear pendingState\r\n        typedPendingState.isForce = false;\r\n        typedPendingState.callback = [];\r\n    }\r\n};\r\nvar classComponentUpdate = function (fiber) {\r\n    var _a;\r\n    var typedInstance = fiber.instance;\r\n    var typedComponent = fiber.elementType;\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    if (isErrorCatch) {\r\n        var typedPendingState = fiber.pendingState;\r\n        if ((_a = typedPendingState.error) === null || _a === void 0 ? void 0 : _a.error) {\r\n            var res = classComponentUpdateFromError(fiber);\r\n            syncComponentStateToFiber(fiber);\r\n            return res;\r\n        }\r\n        else {\r\n            var res = classComponentUpdateFromNormal(fiber);\r\n            syncComponentStateToFiber(fiber);\r\n            return res;\r\n        }\r\n    }\r\n    else {\r\n        var res = classComponentUpdateFromNormal(fiber);\r\n        syncComponentStateToFiber(fiber);\r\n        return res;\r\n    }\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar processClassComponentUpdateQueue = function (fiber, enableTaskPriority) {\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n        return;\r\n    var allQueue = fiber.updateQueue;\r\n    var node = allQueue === null || allQueue === void 0 ? void 0 : allQueue.head;\r\n    if (!node)\r\n        return { needUpdate: false, isSync: false };\r\n    var sync = false;\r\n    var typedInstance = fiber.instance;\r\n    var typedComponent = fiber.elementType;\r\n    var baseState = Object.assign({}, typedInstance.state);\r\n    var baseProps = Object.assign({}, typedInstance.props);\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    var nextStateObj = isErrorCatch ? fiber.pendingState.state : fiber.pendingState;\r\n    if (enableTaskPriority && allQueue.some(function (l) { return l.isSync; })) {\r\n        var _loop_1 = function () {\r\n            var updater = node.value;\r\n            var nextNode = node.next;\r\n            if (updater.type === myreactSharedExports.UpdateQueueType.component && updater.isSync) {\r\n                allQueue.delete(node);\r\n                // TODO\r\n                var lastResult_1 = nextStateObj.pendingState;\r\n                nextStateObj.pendingState = safeCallWithFiber({\r\n                    fiber: fiber,\r\n                    fallback: function () { return nextStateObj.pendingState; },\r\n                    action: function () { return Object.assign({}, lastResult_1, typeof updater.payLoad === \"function\" ? updater.payLoad(baseState, baseProps) : updater.payLoad); },\r\n                });\r\n                nextStateObj.isForce = nextStateObj.isForce || updater.isForce;\r\n                updater.callback && nextStateObj.callback.push(updater.callback);\r\n            }\r\n            node = nextNode;\r\n        };\r\n        while (node) {\r\n            _loop_1();\r\n        }\r\n        if (allQueue.length)\r\n            fiber._update(myreactSharedExports.STATE_TYPE.__triggerConcurrent__);\r\n        return { needUpdate: true, isSync: true };\r\n    }\r\n    else {\r\n        var _loop_2 = function () {\r\n            var updater = node.value;\r\n            var nextNode = node.next;\r\n            if (updater.type === myreactSharedExports.UpdateQueueType.component) {\r\n                allQueue.delete(node);\r\n                // TODO\r\n                var lastResult_2 = nextStateObj.pendingState;\r\n                nextStateObj.pendingState = safeCallWithFiber({\r\n                    fiber: fiber,\r\n                    fallback: function () { return nextStateObj.pendingState; },\r\n                    action: function () { return Object.assign({}, lastResult_2, typeof updater.payLoad === \"function\" ? updater.payLoad(baseState, baseProps) : updater.payLoad); },\r\n                });\r\n                nextStateObj.isForce = nextStateObj.isForce || updater.isForce;\r\n                sync = sync || updater.isSync;\r\n                updater.callback && nextStateObj.callback.push(updater.callback);\r\n            }\r\n            node = nextNode;\r\n        };\r\n        while (node) {\r\n            _loop_2();\r\n        }\r\n        return { needUpdate: true, isSync: sync };\r\n    }\r\n};\r\nvar processFunctionComponentUpdateQueue = function (fiber, enableTaskPriority) {\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n        return;\r\n    var allQueue = fiber.updateQueue;\r\n    var node = allQueue === null || allQueue === void 0 ? void 0 : allQueue.head;\r\n    var needUpdate = false;\r\n    var sync = false;\r\n    if (enableTaskPriority && allQueue.some(function (l) { return l.isSync; })) {\r\n        var _loop_3 = function () {\r\n            var updater = node.value;\r\n            var nextNode = node.next;\r\n            if (updater.type === myreactSharedExports.UpdateQueueType.hook && updater.isSync) {\r\n                allQueue.delete(node);\r\n                var trigger = updater.trigger, payLoad_1 = updater.payLoad;\r\n                var typedTrigger_1 = trigger;\r\n                var lastResult_3 = typedTrigger_1.result;\r\n                typedTrigger_1.result = safeCallWithFiber({\r\n                    fiber: fiber,\r\n                    fallback: function () { return lastResult_3; },\r\n                    action: function () { return typedTrigger_1.reducer(lastResult_3, payLoad_1); },\r\n                });\r\n                sync = sync || updater.isSync;\r\n                if (!Object.is(lastResult_3, typedTrigger_1.result))\r\n                    needUpdate = true;\r\n            }\r\n            node = nextNode;\r\n        };\r\n        while (node) {\r\n            _loop_3();\r\n        }\r\n        if (allQueue.length)\r\n            fiber._update(myreactSharedExports.STATE_TYPE.__triggerConcurrent__);\r\n        return { needUpdate: needUpdate, isSync: sync };\r\n    }\r\n    else {\r\n        var _loop_4 = function () {\r\n            var updater = node.value;\r\n            var nextNode = node.next;\r\n            if (updater.type === myreactSharedExports.UpdateQueueType.hook) {\r\n                allQueue.delete(node);\r\n                var trigger = updater.trigger, payLoad_2 = updater.payLoad;\r\n                var typedTrigger_2 = trigger;\r\n                var lastResult_4 = typedTrigger_2.result;\r\n                typedTrigger_2.result = safeCallWithFiber({\r\n                    fiber: fiber,\r\n                    fallback: function () { return lastResult_4; },\r\n                    action: function () { return typedTrigger_2.reducer(lastResult_4, payLoad_2); },\r\n                });\r\n                sync = sync || updater.isSync;\r\n                if (!Object.is(lastResult_4, typedTrigger_2.result))\r\n                    needUpdate = true;\r\n            }\r\n            node = nextNode;\r\n        };\r\n        while (node) {\r\n            _loop_4();\r\n        }\r\n        return { needUpdate: needUpdate, isSync: sync };\r\n    }\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar syncFiberStateToComponent = function (fiber) {\r\n    var typedInstance = fiber.instance;\r\n    var typedComponent = fiber.elementType;\r\n    var isErrorCatch = isErrorBoundariesInstance(typedInstance, typedComponent);\r\n    var typedPendingState = isErrorCatch ? fiber.pendingState.state : fiber.pendingState;\r\n    typedInstance.state = Object.assign({}, typedInstance.state, typedPendingState.pendingState);\r\n    if (typedPendingState.callback.length) {\r\n        var callback_1 = typedPendingState.callback;\r\n        var renderDispatch = currentRenderDispatch.current;\r\n        renderDispatch.pendingLayoutEffect(fiber, function () { return callback_1.forEach(function (cb) { return cb === null || cb === void 0 ? void 0 : cb(); }); });\r\n    }\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar syncFlushComponentQueue = function (fiber) {\r\n    processClassComponentUpdateQueue(fiber);\r\n    syncFiberStateToComponent(fiber);\r\n    syncComponentStateToFiber(fiber);\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar getIsSameTypeNode = function (newChild, draftFiber) {\r\n    if (!draftFiber)\r\n        return false;\r\n    var result = checkIsSameType(draftFiber, newChild);\r\n    return result;\r\n};\r\nvar getExistingChildren = function (parentFiber) {\r\n    var existingChildrenMap = new Map();\r\n    var existingChildrenArray = [];\r\n    var child = parentFiber.child;\r\n    var index = 0;\r\n    while (child) {\r\n        var key = typeof child.key === \"string\" ? child.key : index;\r\n        var existingChild = existingChildrenMap.get(key) || new myreactSharedExports.ListTree();\r\n        existingChild.push(child);\r\n        existingChildrenMap.set(key, existingChild);\r\n        existingChildrenArray.push(child);\r\n        child = child.sibling;\r\n        index++;\r\n    }\r\n    return { existingChildrenMap: existingChildrenMap, existingChildrenArray: existingChildrenArray };\r\n};\r\nvar dynamicFragmentProps = { wrap: true };\r\nvar createFragmentWithInitial = function (newChild, parentFiber) {\r\n    // TODO make there are not a element\r\n    var newElement = react.createElement(myreactSharedExports.Fragment, dynamicFragmentProps, newChild);\r\n    var newFiber = createFiberNode({ parent: parentFiber }, newElement);\r\n    return newFiber;\r\n};\r\nvar createFragmentWithUpdate = function (newChild, parentFiber) {\r\n    var newElement = react.createElement(myreactSharedExports.Fragment, dynamicFragmentProps, newChild);\r\n    var newFiber = createFiberNode({ parent: parentFiber, type: \"position\" }, newElement);\r\n    return newFiber;\r\n};\r\nvar deleteIfNeed = function (parentFiber, existingChildren) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (existingChildren.size)\r\n        existingChildren.forEach(function (list) { return list.listToFoot(function (f) { return renderDispatch.pendingUnmount(parentFiber, f); }); });\r\n};\r\nvar getNewFiberWithUpdate = function (newChild, parentFiber, existingChildren, prevFiberChild, index) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (Array.isArray(newChild)) {\r\n        var draftList_1 = existingChildren.get(index);\r\n        // TODO try to get the same type node?\r\n        var draftFiber_1 = draftList_1 === null || draftList_1 === void 0 ? void 0 : draftList_1.shift();\r\n        if (draftList_1 && !draftList_1.length) {\r\n            existingChildren.delete(index);\r\n        }\r\n        // same type\r\n        if (myreactSharedExports.include(draftFiber_1 === null || draftFiber_1 === void 0 ? void 0 : draftFiber_1.type, exports.NODE_TYPE.__fragment__)) {\r\n            var newElement = react.createElement(myreactSharedExports.Fragment, dynamicFragmentProps, newChild);\r\n            return updateFiberNode({ fiber: draftFiber_1, parent: parentFiber, prevFiber: prevFiberChild }, newElement);\r\n        }\r\n        else {\r\n            renderDispatch.pendingUnmount(parentFiber, draftFiber_1);\r\n            return createFragmentWithUpdate(newChild, parentFiber);\r\n        }\r\n    }\r\n    var keyToGet = react.isValidElement(newChild) && typeof newChild.key === \"string\" ? newChild.key : index;\r\n    var draftList = existingChildren.get(keyToGet);\r\n    var draftFiber = draftList === null || draftList === void 0 ? void 0 : draftList.shift();\r\n    if (draftList && !draftList.length) {\r\n        existingChildren.delete(keyToGet);\r\n    }\r\n    var isSameType = getIsSameTypeNode(newChild, draftFiber);\r\n    if (isSameType) {\r\n        return updateFiberNode({ fiber: draftFiber, parent: parentFiber, prevFiber: prevFiberChild }, newChild);\r\n    }\r\n    else {\r\n        draftFiber && renderDispatch.pendingUnmount(parentFiber, draftFiber);\r\n        return createFiberNode({ parent: parentFiber, type: \"position\" }, newChild);\r\n    }\r\n};\r\nvar getNewFiberWithInitial = function (newChild, parentFiber) {\r\n    // wrapper array child item as a Fragment fiber node, so all of the children will be a fiber node\r\n    // and could be add to the child list\r\n    if (Array.isArray(newChild))\r\n        return createFragmentWithInitial(newChild, parentFiber);\r\n    return createFiberNode({ parent: parentFiber }, newChild);\r\n};\r\nvar transformChildrenFiber = function (parentFiber, children) {\r\n    var isUpdate = myreactSharedExports.exclude(parentFiber.state, myreactSharedExports.STATE_TYPE.__create__);\r\n    if (isUpdate) {\r\n        var _a = getExistingChildren(parentFiber), existingChildrenMap = _a.existingChildrenMap, existingChildrenArray = _a.existingChildrenArray;\r\n        parentFiber.child = null;\r\n        if (Array.isArray(children)) {\r\n            var newChildren = children;\r\n            var index = 0;\r\n            var lastFiber = null;\r\n            while (index < newChildren.length) {\r\n                var newChild = newChildren[index];\r\n                var newFiber = getNewFiberWithUpdate(newChild, parentFiber, existingChildrenMap, existingChildrenArray[index] || null, index);\r\n                lastFiber && (lastFiber.sibling = newFiber);\r\n                lastFiber = newFiber;\r\n                index++;\r\n            }\r\n        }\r\n        else {\r\n            getNewFiberWithUpdate(children, parentFiber, existingChildrenMap, existingChildrenArray[0], 0);\r\n        }\r\n        deleteIfNeed(parentFiber, existingChildrenMap);\r\n    }\r\n    else {\r\n        var existingChildrenMap = getExistingChildren(parentFiber).existingChildrenMap;\r\n        deleteIfNeed(parentFiber, existingChildrenMap);\r\n        parentFiber.child = null;\r\n        if (Array.isArray(children)) {\r\n            var newChildren = children;\r\n            var lastFiber = null;\r\n            var index = 0;\r\n            while (index < newChildren.length) {\r\n                var newChild = newChildren[index];\r\n                var newFiber = getNewFiberWithInitial(newChild, parentFiber);\r\n                lastFiber && (lastFiber.sibling = newFiber);\r\n                lastFiber = newFiber;\r\n                index++;\r\n            }\r\n        }\r\n        else {\r\n            getNewFiberWithInitial(children, parentFiber);\r\n        }\r\n    }\r\n};\n\nvar currentHookTreeNode$2 = react.__my_react_internal__.currentHookTreeNode, currentHookNodeIndex$2 = react.__my_react_internal__.currentHookNodeIndex, currentComponentFiber$2 = react.__my_react_internal__.currentComponentFiber;\r\nvar enablePerformanceLog = react.__my_react_shared__.enablePerformanceLog, enableDebugFiled = react.__my_react_shared__.enableDebugFiled;\r\nvar nextWorkCommon = function (fiber, children) {\r\n    transformChildrenFiber(fiber, children);\r\n};\r\nvar nextWorkNormal = function (fiber) {\r\n    // for a comment element, will not have any children;\r\n    // empty node normally a invalid node\r\n    if (myreactSharedExports.exclude(fiber.type, exports.NODE_TYPE.__comment__ | exports.NODE_TYPE.__text__) && \"children\" in fiber.pendingProps) {\r\n        var children = fiber.pendingProps.children;\r\n        transformChildrenFiber(fiber, children);\r\n    }\r\n};\r\nvar nextWorkClassComponent = function (fiber) {\r\n    if (!fiber.instance) {\r\n        var children = classComponentMount(fiber);\r\n        nextWorkCommon(fiber, children);\r\n    }\r\n    else {\r\n        var _a = classComponentUpdate(fiber), updated = _a.updated, children = _a.children;\r\n        if (updated)\r\n            nextWorkCommon(fiber, children);\r\n    }\r\n};\r\nvar nextWorkFunctionComponent = function (fiber) {\r\n    var _a;\r\n    currentHookTreeNode$2.current = (_a = fiber.hookList) === null || _a === void 0 ? void 0 : _a.head;\r\n    currentHookNodeIndex$2.current = 0;\r\n    currentComponentFiber$2.current = fiber;\r\n    var typedElementType = fiber.elementType;\r\n    var children = null;\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__forwardRef__)) {\r\n        var typedElementTypeWithRef_1 = typedElementType;\r\n        children = safeCallWithFiber({ fiber: fiber, action: function () { return typedElementTypeWithRef_1(fiber.pendingProps, fiber.ref); } });\r\n    }\r\n    else {\r\n        children = safeCallWithFiber({ fiber: fiber, action: function () { return typedElementType(fiber.pendingProps); } });\r\n    }\r\n    currentComponentFiber$2.current = null;\r\n    currentHookNodeIndex$2.current = 0;\r\n    currentHookTreeNode$2.current = null;\r\n    nextWorkCommon(fiber, children);\r\n};\r\nvar nextWorkComponent = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__function__)) {\r\n        currentComponentFiber$2.current = fiber;\r\n        nextWorkFunctionComponent(fiber);\r\n        currentComponentFiber$2.current = null;\r\n    }\r\n    else {\r\n        currentComponentFiber$2.current = fiber;\r\n        nextWorkClassComponent(fiber);\r\n        currentComponentFiber$2.current = null;\r\n    }\r\n};\r\nvar nextWorkLazy = function (fiber) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var children = renderDispatch.resolveLazyElement(fiber);\r\n    nextWorkCommon(fiber, children);\r\n};\r\nvar nextWorkConsumer = function (fiber) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var typedElementType = fiber.elementType;\r\n    fiber.instance = fiber.instance || new typedElementType.Internal();\r\n    fiber.instance._setOwner(fiber);\r\n    var Context = typedElementType.Context;\r\n    currentComponentFiber$2.current = fiber;\r\n    if (!fiber.instance._contextFiber || myreactSharedExports.include(fiber.instance._contextFiber.state, myreactSharedExports.STATE_TYPE.__unmount__)) {\r\n        var ProviderFiber = renderDispatch.resolveContextFiber(fiber, Context);\r\n        var context = renderDispatch.resolveContextValue(ProviderFiber, Context);\r\n        fiber.instance.context = context;\r\n        fiber.instance._setContext(ProviderFiber);\r\n    }\r\n    else {\r\n        var context = renderDispatch.resolveContextValue(fiber.instance._contextFiber, Context);\r\n        fiber.instance.context = context;\r\n    }\r\n    var typedChildren = fiber.pendingProps.children;\r\n    var children = typedChildren(fiber.instance.context);\r\n    currentComponentFiber$2.current = null;\r\n    nextWorkCommon(fiber, children);\r\n};\r\nvar runtimeNextWork = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__class__ | exports.NODE_TYPE.__function__))\r\n        return nextWorkComponent(fiber);\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__lazy__))\r\n        return nextWorkLazy(fiber);\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__consumer__))\r\n        return nextWorkConsumer(fiber);\r\n    nextWorkNormal(fiber);\r\n};\r\nvar runtimeNextWorkDev = function (fiber) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    setRefreshTypeMap(fiber);\r\n    var start = Date.now();\r\n    var res = runtimeNextWork(fiber);\r\n    var end = Date.now();\r\n    if (enablePerformanceLog.current && end - start > renderDispatch.performanceLogTimeLimit) {\r\n        onceWarnWithKeyAndFiber(fiber, \"performance\", \"[@my-react/react] render current component take a lot of time, there have a performance warning\");\r\n    }\r\n    var typedFiber = fiber;\r\n    var timeNow = end;\r\n    if (enableDebugFiled.current) {\r\n        if (typedFiber.state === myreactSharedExports.STATE_TYPE.__create__) {\r\n            typedFiber._debugRenderState = {\r\n                mountTime: timeNow,\r\n            };\r\n            typedFiber._debugIsMount = true;\r\n        }\r\n        else {\r\n            var prevRenderState = Object.assign({}, typedFiber._debugRenderState);\r\n            var prevRenderTime = prevRenderState.updateTime || prevRenderState.mountTime;\r\n            typedFiber._debugRenderState = {\r\n                renderCount: (prevRenderState.renderCount || 0) + 1,\r\n                mountTime: prevRenderState.mountTime,\r\n                updateTime: timeNow,\r\n                trigger: currentTriggerFiber.current,\r\n                updateTimeInterval: timeNow - prevRenderTime,\r\n            };\r\n        }\r\n    }\r\n    if (myreactSharedExports.include(typedFiber.type, renderDispatch.runtimeRef.typeForNativeNode)) {\r\n        renderDispatch.pendingLayoutEffect(typedFiber, function () { return debugWithNode(typedFiber); });\r\n    }\r\n    return res;\r\n};\n\nreact.__my_react_internal__.currentRunningFiber;\r\nvar performToNextFiberWithAll = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) || renderDispatch.isAppCrashed)\r\n        return null;\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__create__ | myreactSharedExports.STATE_TYPE.__inherit__ | myreactSharedExports.STATE_TYPE.__triggerSync__ | myreactSharedExports.STATE_TYPE.__triggerConcurrent__)) {\r\n        currentRenderDispatch.current = renderDispatch;\r\n        {\r\n            runtimeNextWork(fiber);\r\n        }\r\n        currentRenderDispatch.current = null;\r\n    }\r\n    fiber.state = myreactSharedExports.STATE_TYPE.__stable__;\r\n    if (fiber.child)\r\n        return fiber.child;\r\n    var nextFiber = fiber;\r\n    while (nextFiber && nextFiber !== renderDispatch.runtimeFiber.scheduledFiber) {\r\n        renderDispatch.generateCommitList(nextFiber);\r\n        if (nextFiber.sibling)\r\n            return nextFiber.sibling;\r\n        nextFiber = nextFiber.parent;\r\n    }\r\n    if (nextFiber === renderDispatch.runtimeFiber.scheduledFiber)\r\n        renderDispatch.generateCommitList(nextFiber);\r\n    return null;\r\n};\r\nvar performToNextFiberWithTrigger = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) || renderDispatch.isAppCrashed)\r\n        return null;\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__create__ | myreactSharedExports.STATE_TYPE.__inherit__ | myreactSharedExports.STATE_TYPE.__triggerSync__ | myreactSharedExports.STATE_TYPE.__triggerConcurrent__)) {\r\n        currentRenderDispatch.current = renderDispatch;\r\n        {\r\n            runtimeNextWork(fiber);\r\n        }\r\n        currentRenderDispatch.current = null;\r\n        fiber.state = myreactSharedExports.STATE_TYPE.__stable__;\r\n        if (fiber.child)\r\n            return fiber.child;\r\n    }\r\n    var nextFiber = fiber;\r\n    while (nextFiber && nextFiber !== renderDispatch.runtimeFiber.scheduledFiber) {\r\n        renderDispatch.generateCommitList(nextFiber);\r\n        if (nextFiber.sibling)\r\n            return nextFiber.sibling;\r\n        nextFiber = nextFiber.parent;\r\n    }\r\n    if (nextFiber === renderDispatch.runtimeFiber.scheduledFiber)\r\n        renderDispatch.generateCommitList(nextFiber);\r\n    return null;\r\n};\n\nvar updateLoopSyncWithAll = function (renderDispatch) {\r\n    while (renderDispatch.runtimeFiber.nextWorkingFiber) {\r\n        var nextFiber = performToNextFiberWithAll(renderDispatch.runtimeFiber.nextWorkingFiber, renderDispatch);\r\n        renderDispatch.runtimeFiber.nextWorkingFiber = nextFiber;\r\n    }\r\n};\r\nvar updateLoopSyncWithTrigger = function (renderDispatch) {\r\n    while (renderDispatch.runtimeFiber.nextWorkingFiber) {\r\n        var nextFiber = performToNextFiberWithTrigger(renderDispatch.runtimeFiber.nextWorkingFiber, renderDispatch);\r\n        renderDispatch.runtimeFiber.nextWorkingFiber = nextFiber;\r\n    }\r\n};\r\nvar updateLoopConcurrentWithAll = function (renderDispatch) {\r\n    while (renderDispatch.runtimeFiber.nextWorkingFiber && !renderDispatch.shouldYield()) {\r\n        var nextFiber = performToNextFiberWithAll(renderDispatch.runtimeFiber.nextWorkingFiber, renderDispatch);\r\n        renderDispatch.runtimeFiber.nextWorkingFiber = nextFiber;\r\n    }\r\n};\r\nvar updateLoopConcurrentWithTrigger = function (renderDispatch) {\r\n    while (renderDispatch.runtimeFiber.nextWorkingFiber && !renderDispatch.shouldYield()) {\r\n        var nextFiber = performToNextFiberWithTrigger(renderDispatch.runtimeFiber.nextWorkingFiber, renderDispatch);\r\n        renderDispatch.runtimeFiber.nextWorkingFiber = nextFiber;\r\n    }\r\n};\n\nvar globalLoop$2 = react.__my_react_internal__.globalLoop, currentRenderPlatform$9 = react.__my_react_internal__.currentRenderPlatform;\r\nreact.__my_react_shared__.enableScopeTreeLog;\r\nvar updateSyncWithAll = function (renderDispatch, cb) {\r\n    globalLoop$2.current = true;\r\n    var renderPlatform = currentRenderPlatform$9.current;\r\n    updateLoopSyncWithAll(renderDispatch);\r\n    var commitList = renderDispatch.pendingCommitFiberList;\r\n    renderDispatch.pendingCommitFiberList = null;\r\n    commitList && renderDispatch.reconcileUpdate(commitList);\r\n    renderPlatform.microTask(function () {\r\n        globalLoop$2.current = false;\r\n        cb === null || cb === void 0 ? void 0 : cb();\r\n    });\r\n};\r\nvar updateSyncWithTrigger = function (renderDispatch, cb) {\r\n    globalLoop$2.current = true;\r\n    var renderPlatform = currentRenderPlatform$9.current;\r\n    updateLoopSyncWithTrigger(renderDispatch);\r\n    var commitList = renderDispatch.pendingCommitFiberList;\r\n    renderDispatch.pendingCommitFiberList = null;\r\n    commitList && renderDispatch.reconcileUpdate(commitList);\r\n    renderPlatform.microTask(function () {\r\n        globalLoop$2.current = false;\r\n        cb === null || cb === void 0 ? void 0 : cb();\r\n    });\r\n};\r\nvar updateConcurrentWithAll = function (renderDispatch, cb) {\r\n    globalLoop$2.current = true;\r\n    var renderPlatform = currentRenderPlatform$9.current;\r\n    updateLoopConcurrentWithAll(renderDispatch);\r\n    if (renderDispatch.runtimeFiber.nextWorkingFiber) {\r\n        renderPlatform.yieldTask(function () { return updateConcurrentWithAll(renderDispatch, cb); });\r\n    }\r\n    else {\r\n        var commitList = renderDispatch.pendingCommitFiberList;\r\n        renderDispatch.pendingCommitFiberList = null;\r\n        commitList && renderDispatch.reconcileUpdate(commitList);\r\n        renderPlatform.microTask(function () {\r\n            globalLoop$2.current = false;\r\n            cb === null || cb === void 0 ? void 0 : cb();\r\n        });\r\n    }\r\n};\r\nvar updateConcurrentWithTrigger = function (renderDispatch, cb) {\r\n    globalLoop$2.current = true;\r\n    var renderPlatform = currentRenderPlatform$9.current;\r\n    updateLoopConcurrentWithTrigger(renderDispatch);\r\n    if (renderDispatch.runtimeFiber.nextWorkingFiber) {\r\n        renderPlatform.yieldTask(function () { return updateConcurrentWithTrigger(renderDispatch, cb); });\r\n    }\r\n    else {\r\n        var commitList = renderDispatch.pendingCommitFiberList;\r\n        renderDispatch.pendingCommitFiberList = null;\r\n        commitList && renderDispatch.reconcileUpdate(commitList);\r\n        renderPlatform.microTask(function () {\r\n            globalLoop$2.current = false;\r\n            cb === null || cb === void 0 ? void 0 : cb();\r\n        });\r\n    }\r\n};\n\nvar defaultGenerateUnmountMap = function (fiber, unmount, map) {\r\n    var list = map.get(fiber) || new myreactSharedExports.ListTree();\r\n    var newList = generateFiberToList(unmount);\r\n    list.concat(newList);\r\n    map.set(fiber, list);\r\n};\r\nvar unmountList = function (list, renderDispatch) {\r\n    list.listToFoot(function (f) { return safeCallWithFiber({ fiber: f, action: function () { return f._unmount(); } }); });\r\n    // will happen when app crash\r\n    list.listToFoot(function (f) { return unmount(f, renderDispatch); });\r\n    list.listToFoot(function (f) { return unmountFiberNode(f, renderDispatch); });\r\n};\r\n// unmount current fiber\r\nvar unmountFiber = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n        return;\r\n    var renderDispatch = fiberToDispatchMap.get(fiber);\r\n    var list = generateFiberToList(fiber);\r\n    unmountList(list, renderDispatch);\r\n};\r\nvar unmount = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__unmount__)) {\r\n        var unmountMap = renderDispatch.runtimeMap.unmountMap;\r\n        var allUnmount_1 = unmountMap.get(fiber);\r\n        unmountMap.delete(fiber);\r\n        if (allUnmount_1 && allUnmount_1.length)\r\n            safeCallWithFiber({ fiber: fiber, action: function () { return unmountList(allUnmount_1, renderDispatch); } });\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__unmount__);\r\n    }\r\n};\n\nvar globalLoop$1 = react.__my_react_internal__.globalLoop, currentRenderPlatform$8 = react.__my_react_internal__.currentRenderPlatform; react.__my_react_internal__.currentRunningFiber;\r\nvar enableConcurrentMode$1 = react.__my_react_shared__.enableConcurrentMode, enableLoopFromRoot$2 = react.__my_react_shared__.enableLoopFromRoot;\r\nvar scheduleNext = function (renderDispatch) {\r\n    var _a;\r\n    if (!renderDispatch.isAppUnmounted && !renderDispatch.isAppCrashed && renderDispatch.pendingUpdateFiberArray.length) {\r\n        scheduleUpdate(renderDispatch);\r\n        return;\r\n    }\r\n    var renderPlatform = currentRenderPlatform$8.current;\r\n    if (!renderPlatform.dispatchSet || ((_a = renderPlatform.dispatchSet) === null || _a === void 0 ? void 0 : _a.length) === 1)\r\n        return;\r\n    var allDispatch = renderPlatform.dispatchSet;\r\n    var hasPending = allDispatch\r\n        .getAll()\r\n        .find(function (d) { return d !== renderDispatch && d.isAppMounted && !d.isAppCrashed && !d.isAppUnmounted && d.pendingUpdateFiberArray.length; });\r\n    if (hasPending) {\r\n        scheduleUpdate(hasPending);\r\n    }\r\n};\r\nvar scheduleUpdate = function (renderDispatch) {\r\n    var nextWorkFiber = null;\r\n    var nextWorkSyncFiber = null;\r\n    if (renderDispatch.isAppUnmounted) {\r\n        scheduleNext(renderDispatch);\r\n        return;\r\n    }\r\n    if (enableLoopFromRoot$2.current) {\r\n        var allLive = renderDispatch.pendingUpdateFiberArray.getAll().filter(function (f) { return myreactSharedExports.exclude(f.state, myreactSharedExports.STATE_TYPE.__unmount__); });\r\n        var hasSync = allLive.some(function (f) { return myreactSharedExports.include(f.state, myreactSharedExports.STATE_TYPE.__skippedSync__ | myreactSharedExports.STATE_TYPE.__triggerSync__); });\r\n        renderDispatch.pendingUpdateFiberArray.clear();\r\n        if (allLive.length) {\r\n            renderDispatch.runtimeFiber.scheduledFiber = renderDispatch.rootFiber;\r\n            renderDispatch.runtimeFiber.nextWorkingFiber = renderDispatch.rootFiber;\r\n            if (hasSync) {\r\n                updateSyncWithAll(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n            }\r\n            else {\r\n                updateConcurrentWithAll(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n            }\r\n        }\r\n        else {\r\n            scheduleNext(renderDispatch);\r\n        }\r\n    }\r\n    else {\r\n        var allPending = renderDispatch.pendingUpdateFiberArray.getAll();\r\n        for (var i = 0; i < allPending.length; i++) {\r\n            if (nextWorkFiber && nextWorkSyncFiber)\r\n                break;\r\n            var item = allPending[i];\r\n            if (myreactSharedExports.include(item.state, myreactSharedExports.STATE_TYPE.__stable__ | myreactSharedExports.STATE_TYPE.__unmount__)) {\r\n                renderDispatch.pendingUpdateFiberArray.uniDelete(item);\r\n                continue;\r\n            }\r\n            if (!nextWorkFiber)\r\n                nextWorkFiber = item;\r\n            if (!nextWorkSyncFiber && myreactSharedExports.include(item.state, myreactSharedExports.STATE_TYPE.__skippedSync__ | myreactSharedExports.STATE_TYPE.__triggerSync__))\r\n                nextWorkSyncFiber = item;\r\n        }\r\n        nextWorkFiber = nextWorkSyncFiber || nextWorkFiber;\r\n        if (nextWorkFiber) {\r\n            if (myreactSharedExports.include(nextWorkFiber.state, myreactSharedExports.STATE_TYPE.__skippedSync__ | myreactSharedExports.STATE_TYPE.__triggerSync__)) {\r\n                renderDispatch.runtimeFiber.scheduledFiber = nextWorkFiber;\r\n                renderDispatch.runtimeFiber.nextWorkingFiber = nextWorkFiber;\r\n                if (myreactSharedExports.include(nextWorkFiber.state, myreactSharedExports.STATE_TYPE.__skippedSync__)) {\r\n                    updateSyncWithAll(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                }\r\n                else {\r\n                    updateSyncWithTrigger(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                }\r\n            }\r\n            else if (myreactSharedExports.include(nextWorkFiber.state, myreactSharedExports.STATE_TYPE.__skippedConcurrent__ | myreactSharedExports.STATE_TYPE.__triggerConcurrent__)) {\r\n                renderDispatch.runtimeFiber.scheduledFiber = nextWorkFiber;\r\n                renderDispatch.runtimeFiber.nextWorkingFiber = nextWorkFiber;\r\n                if (myreactSharedExports.include(nextWorkFiber.state, myreactSharedExports.STATE_TYPE.__skippedConcurrent__)) {\r\n                    if (enableConcurrentMode$1.current) {\r\n                        updateConcurrentWithAll(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                    }\r\n                    else {\r\n                        updateSyncWithAll(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                    }\r\n                }\r\n                else {\r\n                    if (enableConcurrentMode$1.current) {\r\n                        updateConcurrentWithTrigger(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                    }\r\n                    else {\r\n                        updateSyncWithTrigger(renderDispatch, function () { return scheduleNext(renderDispatch); });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // TODO\r\n                throw new Error(\"[@my-react/react] unknown state, \".concat(nextWorkFiber.state, \", \").concat(nextWorkFiber));\r\n            }\r\n        }\r\n        else {\r\n            globalLoop$1.current = false;\r\n            renderDispatch.runtimeFiber.scheduledFiber = null;\r\n            renderDispatch.runtimeFiber.nextWorkingFiber = null;\r\n            renderDispatch.pendingCommitFiberList = null;\r\n            scheduleNext(renderDispatch);\r\n        }\r\n    }\r\n};\r\n/**\r\n * only used for dev HMR\r\n */\r\nvar triggerRevert = function (fiber) {\r\n    {\r\n        console.error(\"[@my-react/react] can not call revert on prod mode\");\r\n    }\r\n};\r\nvar triggerUpdate = function (fiber, state, cb) {\r\n    var renderPlatform = currentRenderPlatform$8.current;\r\n    var renderDispatch = fiberToDispatchMap.get(fiber);\r\n    if (renderDispatch.isAppCrashed)\r\n        return;\r\n    if (renderDispatch.isAppUnmounted)\r\n        return;\r\n    if (!renderDispatch.isAppMounted) {\r\n        renderPlatform.macroTask(function () { return triggerUpdate(fiber, state, cb); });\r\n        return;\r\n    }\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n        return;\r\n    if (state !== undefined && state !== myreactSharedExports.STATE_TYPE.__stable__) {\r\n        if (fiber.state === myreactSharedExports.STATE_TYPE.__stable__) {\r\n            fiber.state = state;\r\n        }\r\n        else {\r\n            fiber.state = myreactSharedExports.merge(fiber.state, state);\r\n        }\r\n    }\r\n    renderDispatch.pendingUpdateFiberArray.uniPush(fiber);\r\n    cb && renderDispatch.pendingEffect(fiber, cb);\r\n    if (globalLoop$1.current)\r\n        return;\r\n    globalLoop$1.current = true;\r\n    scheduleUpdate(renderDispatch);\r\n};\r\nvar triggerError = function (fiber, error, cb) {\r\n    var renderDispatch = fiberToDispatchMap.get(fiber);\r\n    var renderPlatform = currentRenderPlatform$8.current;\r\n    var errorBoundariesFiber = renderDispatch.resolveErrorBoundaries(fiber);\r\n    if (errorBoundariesFiber) {\r\n        var typedInstance = errorBoundariesFiber.instance;\r\n        var typedPendingState = errorBoundariesFiber.pendingState;\r\n        // prepare error catch flow\r\n        typedPendingState.error = {\r\n            error: error,\r\n            stack: renderPlatform.getFiberTree(fiber),\r\n            revertState: Object.assign({}, typedInstance.state),\r\n        };\r\n        triggerUpdate(errorBoundariesFiber, myreactSharedExports.STATE_TYPE.__triggerSync__, cb);\r\n    }\r\n    else {\r\n        renderDispatch.pendingUpdateFiberArray.clear();\r\n        renderDispatch.runtimeFiber.scheduledFiber = null;\r\n        renderDispatch.runtimeFiber.nextWorkingFiber = null;\r\n        renderDispatch.isAppCrashed = true;\r\n    }\r\n};\r\nvar triggerUnmount = function (fiber, cb) {\r\n    var renderDispatch = fiberToDispatchMap.get(fiber);\r\n    if (renderDispatch.isAppUnmounted) {\r\n        throw new Error(\"[@my-react/react] can not unmount a node when current app has been unmounted\");\r\n    }\r\n    triggerUpdate(fiber, myreactSharedExports.STATE_TYPE.__skippedSync__, function () {\r\n        unmountFiber(fiber);\r\n        cb === null || cb === void 0 ? void 0 : cb();\r\n    });\r\n};\n\nvar currentRenderPlatform$7 = react.__my_react_internal__.currentRenderPlatform;\r\nvar enableConcurrentMode = react.__my_react_shared__.enableConcurrentMode;\r\nvar emptyProps$1 = {};\r\nvar MyReactFiberNode = /** @class */ (function () {\r\n    function MyReactFiberNode(element) {\r\n        this.state = myreactSharedExports.STATE_TYPE.__initial__;\r\n        this.patch = myreactSharedExports.PATCH_TYPE.__initial__;\r\n        this.type = exports.NODE_TYPE.__initial__;\r\n        this.child = null;\r\n        this.parent = null;\r\n        this.sibling = null;\r\n        this.pendingProps = emptyProps$1;\r\n        this.memoizedProps = emptyProps$1;\r\n        this.state = myreactSharedExports.STATE_TYPE.__create__;\r\n        this._installElement(element);\r\n    }\r\n    MyReactFiberNode.prototype._installElement = function (element) {\r\n        var _a = getTypeFromElementNode(element), key = _a.key, ref = _a.ref, nodeType = _a.nodeType, elementType = _a.elementType, pendingProps = _a.pendingProps;\r\n        this.ref = ref;\r\n        this.key = key;\r\n        this.type = nodeType;\r\n        this.elementType = elementType;\r\n        this.pendingProps = pendingProps;\r\n    };\r\n    MyReactFiberNode.prototype._addDependence = function (instance) {\r\n        this.dependence = this.dependence || new Set();\r\n        this.dependence.add(instance);\r\n    };\r\n    MyReactFiberNode.prototype._removeDependence = function (instance) {\r\n        this.dependence.delete(instance);\r\n    };\r\n    MyReactFiberNode.prototype._unmount = function () {\r\n        var _a;\r\n        if (myreactSharedExports.include(this.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n            return;\r\n        (_a = this.hookList) === null || _a === void 0 ? void 0 : _a.listToFoot(function (h) { return h._unmount(); });\r\n        this.instance && this.instance._unmount();\r\n        this.patch = myreactSharedExports.PATCH_TYPE.__initial__;\r\n        this.state = myreactSharedExports.STATE_TYPE.__initial__;\r\n    };\r\n    MyReactFiberNode.prototype._prepare = function () {\r\n        var _this = this;\r\n        var renderPlatform = currentRenderPlatform$7.current;\r\n        var processQueue = function () {\r\n            var flag = enableConcurrentMode.current;\r\n            var needUpdate = myreactSharedExports.include(_this.type, exports.NODE_TYPE.__class__)\r\n                ? processClassComponentUpdateQueue(_this, flag)\r\n                : processFunctionComponentUpdateQueue(_this, flag);\r\n            if (needUpdate === null || needUpdate === void 0 ? void 0 : needUpdate.needUpdate)\r\n                _this._update(needUpdate.isSync ? myreactSharedExports.STATE_TYPE.__triggerSync__ : myreactSharedExports.STATE_TYPE.__triggerConcurrent__);\r\n        };\r\n        renderPlatform.microTask(processQueue);\r\n    };\r\n    MyReactFiberNode.prototype._update = function (state) {\r\n        if (myreactSharedExports.include(this.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n            return;\r\n        state = state || myreactSharedExports.STATE_TYPE.__triggerSync__;\r\n        if (this.state === myreactSharedExports.STATE_TYPE.__stable__) {\r\n            this.state = state;\r\n        }\r\n        else {\r\n            this.state = myreactSharedExports.merge(this.state, state);\r\n        }\r\n        triggerUpdate(this);\r\n    };\r\n    return MyReactFiberNode;\r\n}());\n\nvar createFiberNode = function (_a, element) {\r\n    var _b;\r\n    var parent = _a.parent, _c = _a.type, type = _c === void 0 ? \"append\" : _c;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var newFiberNode = new MyReactFiberNode(element);\r\n    fiberToDispatchMap.set(newFiberNode, renderDispatch);\r\n    newFiberNode.parent = parent;\r\n    parent.child = parent.child || newFiberNode;\r\n    renderDispatch.pendingCreate(newFiberNode);\r\n    renderDispatch.pendingUpdate(newFiberNode);\r\n    if (type === \"position\") {\r\n        renderDispatch.pendingPosition(newFiberNode);\r\n    }\r\n    else {\r\n        renderDispatch.pendingAppend(newFiberNode);\r\n    }\r\n    renderDispatch.pendingRef(newFiberNode);\r\n    // renderDispatch.resolveScopeMap(newFiberNode);\r\n    // renderDispatch.resolveStrictMap(newFiberNode);\r\n    // renderDispatch.resolveContextMap(newFiberNode);\r\n    // renderDispatch.resolveSuspenseMap(newFiberNode);\r\n    // renderDispatch.resolveErrorBoundariesMap(newFiberNode);\r\n    (_b = renderDispatch.patchToFiberInitial) === null || _b === void 0 ? void 0 : _b.call(renderDispatch, newFiberNode);\r\n    if (myreactSharedExports.exclude(newFiberNode.patch, myreactSharedExports.PATCH_TYPE.__update__)) {\r\n        newFiberNode.memoizedProps = newFiberNode.pendingProps;\r\n    }\r\n    return newFiberNode;\r\n};\n\nvar enableLoopFromRoot$1 = react.__my_react_shared__.enableLoopFromRoot;\r\nvar updateFiberNode = function (_a, nextElement) {\r\n    var _b;\r\n    var fiber = _a.fiber, parent = _a.parent, prevFiber = _a.prevFiber;\r\n    var prevElementType = fiber.elementType;\r\n    var prevProps = fiber.memoizedProps;\r\n    var prevRef = fiber.ref;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    fiber.parent = parent;\r\n    fiber.sibling = null;\r\n    parent.child = parent.child || fiber;\r\n    fiber._installElement(nextElement);\r\n    var nextElementType = fiber.elementType;\r\n    var nextProps = fiber.pendingProps;\r\n    var nextRef = fiber.ref;\r\n    if (prevElementType !== nextElementType || prevProps !== nextProps) {\r\n        if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__memo__)) {\r\n            var typedElement = nextElement;\r\n            var typedElementType = typedElement.type;\r\n            if (myreactSharedExports.exclude(fiber.state, myreactSharedExports.STATE_TYPE.__triggerSync__ | myreactSharedExports.STATE_TYPE.__triggerConcurrent__) &&\r\n                typedElementType.compare(fiber.pendingProps, fiber.memoizedProps)) {\r\n                fiber.state = myreactSharedExports.STATE_TYPE.__stable__;\r\n            }\r\n            else {\r\n                fiber.state = myreactSharedExports.remove(fiber.state, myreactSharedExports.STATE_TYPE.__stable__);\r\n                fiber.state = myreactSharedExports.merge(fiber.state, myreactSharedExports.STATE_TYPE.__inherit__);\r\n            }\r\n        }\r\n        else {\r\n            fiber.state = myreactSharedExports.remove(fiber.state, myreactSharedExports.STATE_TYPE.__stable__);\r\n            fiber.state = myreactSharedExports.merge(fiber.state, myreactSharedExports.STATE_TYPE.__inherit__);\r\n        }\r\n    }\r\n    if (fiber.state !== myreactSharedExports.STATE_TYPE.__stable__) {\r\n        if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__provider__)) {\r\n            if (!myreactSharedExports.isNormalEquals(fiber.pendingProps.value, fiber.memoizedProps.value)) {\r\n                // if current is root loop mode, should not delay context update\r\n                if (enableLoopFromRoot$1.current) {\r\n                    prepareUpdateAllDependence(fiber);\r\n                }\r\n                else {\r\n                    renderDispatch.pendingContext(fiber);\r\n                }\r\n            }\r\n        }\r\n        if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__plain__)) {\r\n            if (!myreactSharedExports.isNormalEquals(fiber.pendingProps, fiber.memoizedProps, function (key) { return key === \"children\"; })) {\r\n                renderDispatch.pendingUpdate(fiber);\r\n            }\r\n        }\r\n        if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__text__)) {\r\n            renderDispatch.pendingUpdate(fiber);\r\n        }\r\n        (_b = renderDispatch.patchToFiberUpdate) === null || _b === void 0 ? void 0 : _b.call(renderDispatch, fiber);\r\n    }\r\n    if (nextRef && prevRef !== nextRef) {\r\n        renderDispatch.pendingRef(fiber);\r\n    }\r\n    if (fiber !== prevFiber) {\r\n        renderDispatch.pendingPosition(fiber);\r\n    }\r\n    if (myreactSharedExports.exclude(fiber.patch, myreactSharedExports.PATCH_TYPE.__update__)) {\r\n        fiber.memoizedProps = fiber.pendingProps;\r\n    }\r\n    return fiber;\r\n};\n\n// no need to resolve map for this fiber, this code only used for fiberRoot init\r\nvar initialFiberNode = function (fiber, renderDispatch) {\r\n    var _a;\r\n    fiberToDispatchMap.set(fiber, renderDispatch);\r\n    renderDispatch.pendingCreate(fiber);\r\n    renderDispatch.pendingUpdate(fiber);\r\n    renderDispatch.pendingAppend(fiber);\r\n    renderDispatch.pendingRef(fiber);\r\n    (_a = renderDispatch.patchToFiberInitial) === null || _a === void 0 ? void 0 : _a.call(renderDispatch, fiber);\r\n    if (myreactSharedExports.exclude(fiber.patch, myreactSharedExports.PATCH_TYPE.__update__)) {\r\n        fiber.memoizedProps = fiber.pendingProps;\r\n    }\r\n    return fiber;\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar unmountFiberNode = function (fiber, renderDispatch) {\r\n    var _a;\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n        return;\r\n    renderDispatch.commitUnsetRef(fiber);\r\n    renderDispatch.commitClearNode(fiber);\r\n    (_a = renderDispatch.patchToFiberUnmount) === null || _a === void 0 ? void 0 : _a.call(renderDispatch, fiber);\r\n    fiberToDispatchMap.delete(fiber);\r\n    renderDispatch.runtimeMap.suspenseMap.delete(fiber);\r\n    renderDispatch.runtimeMap.strictMap.delete(fiber);\r\n    renderDispatch.runtimeMap.insertionEffectMap.delete(fiber);\r\n    renderDispatch.runtimeMap.scopeMap.delete(fiber);\r\n    renderDispatch.runtimeMap.errorBoundariesMap.delete(fiber);\r\n    renderDispatch.runtimeMap.effectMap.delete(fiber);\r\n    renderDispatch.runtimeMap.layoutEffectMap.delete(fiber);\r\n    renderDispatch.runtimeMap.contextMap.delete(fiber);\r\n    renderDispatch.runtimeMap.unmountMap.delete(fiber);\r\n    renderDispatch.runtimeMap.eventMap.delete(fiber);\r\n    if (Boolean(false) === false) {\r\n        fiber.child = null;\r\n        fiber.parent = null;\r\n        fiber.sibling = null;\r\n        fiber.instance = null;\r\n        fiber.hookList = null;\r\n        fiber.dependence = null;\r\n        fiber.nativeNode = null;\r\n        fiber.updateQueue = null;\r\n    }\r\n    fiber.state = myreactSharedExports.STATE_TYPE.__unmount__;\r\n};\n\nexports.NODE_TYPE = void 0;\r\n(function (NODE_TYPE) {\r\n    NODE_TYPE[NODE_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n    NODE_TYPE[NODE_TYPE[\"__class__\"] = 1] = \"__class__\";\r\n    NODE_TYPE[NODE_TYPE[\"__function__\"] = 2] = \"__function__\";\r\n    NODE_TYPE[NODE_TYPE[\"__lazy__\"] = 4] = \"__lazy__\";\r\n    NODE_TYPE[NODE_TYPE[\"__memo__\"] = 8] = \"__memo__\";\r\n    NODE_TYPE[NODE_TYPE[\"__forwardRef__\"] = 16] = \"__forwardRef__\";\r\n    NODE_TYPE[NODE_TYPE[\"__provider__\"] = 32] = \"__provider__\";\r\n    NODE_TYPE[NODE_TYPE[\"__consumer__\"] = 64] = \"__consumer__\";\r\n    NODE_TYPE[NODE_TYPE[\"__portal__\"] = 128] = \"__portal__\";\r\n    NODE_TYPE[NODE_TYPE[\"__null__\"] = 256] = \"__null__\";\r\n    NODE_TYPE[NODE_TYPE[\"__text__\"] = 512] = \"__text__\";\r\n    NODE_TYPE[NODE_TYPE[\"__empty__\"] = 1024] = \"__empty__\";\r\n    NODE_TYPE[NODE_TYPE[\"__plain__\"] = 2048] = \"__plain__\";\r\n    NODE_TYPE[NODE_TYPE[\"__strict__\"] = 4096] = \"__strict__\";\r\n    NODE_TYPE[NODE_TYPE[\"__suspense__\"] = 8192] = \"__suspense__\";\r\n    NODE_TYPE[NODE_TYPE[\"__fragment__\"] = 16384] = \"__fragment__\";\r\n    NODE_TYPE[NODE_TYPE[\"__keepLive__\"] = 32768] = \"__keepLive__\";\r\n    NODE_TYPE[NODE_TYPE[\"__scope__\"] = 65536] = \"__scope__\";\r\n    NODE_TYPE[NODE_TYPE[\"__comment__\"] = 131072] = \"__comment__\";\r\n    NODE_TYPE[NODE_TYPE[\"__profiler__\"] = 262144] = \"__profiler__\";\r\n})(exports.NODE_TYPE || (exports.NODE_TYPE = {}));\n\n// used for hmr\r\nvar typeToFibersMap = new MyWeakMap();\r\nvar setRefreshHandler = function (handler) {\r\n};\r\nvar setRefreshTypeMap = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__class__ | exports.NODE_TYPE.__function__)) {\r\n        var elementType = fiber.elementType;\r\n        var exist = typeToFibersMap.get(elementType) || new Set();\r\n        exist.add(fiber);\r\n        typeToFibersMap.set(elementType, exist);\r\n    }\r\n};\r\nvar getCurrentTypeFromRefresh = function (type) {\r\n    var family = void 0 ;\r\n    return (family === null || family === void 0 ? void 0 : family.current) || type;\r\n};\r\nvar getCurrentFibersFromType = function (type) {\r\n    return typeToFibersMap.get(type);\r\n};\r\nvar getCurrentDispatchFromType = function (type) {\r\n    var fibers = getCurrentFibersFromType(type);\r\n    return new Set(Array.from(fibers || []).map(function (fiber) { return fiberToDispatchMap.get(fiber); }));\r\n};\r\nvar getCurrentDispatchFromFiber = function (fiber) {\r\n    return fiberToDispatchMap.get(fiber);\r\n};\n\nreact.__my_react_internal__.currentComponentFiber;\r\nvar initHMR = function (env) {\r\n};\n\nvar enableSyncFlush$1 = react.__my_react_shared__.enableSyncFlush;\r\n/**\r\n * @deprecated\r\n */\r\nexports.syncFlush = false;\r\n/**\r\n * @deprecated\r\n */\r\nvar beforeSyncFlush = function () {\r\n    exports.syncFlush = true;\r\n};\r\n/**\r\n * @deprecated\r\n */\r\nvar afterSyncFlush = function () {\r\n    exports.syncFlush = false;\r\n};\r\nvar prev = [enableSyncFlush$1.current];\r\nvar beforeSyncUpdate = function () {\r\n    prev.push(enableSyncFlush$1.current);\r\n    enableSyncFlush$1.current = true;\r\n};\r\nvar afterSyncUpdate = function () {\r\n    enableSyncFlush$1.current = prev.pop();\r\n};\n\nvar currentRenderPlatform$6 = react.__my_react_internal__.currentRenderPlatform, currentRunningFiber$1 = react.__my_react_internal__.currentRunningFiber;\r\nvar enableOptimizeTreeLog = react.__my_react_shared__.enableOptimizeTreeLog;\r\nvar warnMap = {};\r\nvar errorMap = {};\r\nvar originalWarn = console.warn;\r\nvar originalError = console.error;\r\nvar devWarn = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = currentRunningFiber$1.current;\r\n    var logObj = [];\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    if (renderFiber) {\r\n        originalWarn.call.apply(originalWarn, __spreadArray([console, logString], logObj.concat([renderPlatform.getFiberTree(currentRunningFiber$1.current), \"\\n\", renderFiber]), false));\r\n    }\r\n    else {\r\n        originalWarn.call.apply(originalWarn, __spreadArray([console, logString], logObj, false));\r\n    }\r\n};\r\nvar devWarnWithFiber = function (fiber) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = fiber;\r\n    var logObj = [];\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalWarn.call.apply(originalWarn, __spreadArray([console, logString], logObj.concat([renderPlatform.getFiberTree(fiber), \"\\n\", renderFiber]), false));\r\n};\r\nvar devError = function () {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = currentRunningFiber$1.current;\r\n    if (!renderFiber) {\r\n        originalError.call.apply(originalError, __spreadArray([console], args, false));\r\n        return;\r\n    }\r\n    var logObj = [];\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    if (renderFiber) {\r\n        originalError.call.apply(originalError, __spreadArray([console, logString], logObj.concat([renderPlatform.getFiberTree(currentRunningFiber$1.current), \"\\n\", renderFiber]), false));\r\n    }\r\n    else {\r\n        originalError.call.apply(originalError, __spreadArray([console, logString], logObj, false));\r\n    }\r\n};\r\nvar devErrorWithFiber = function (fiber) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = fiber;\r\n    var logObj = [];\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalError.call.apply(originalError, __spreadArray([console, logString], logObj.concat([renderPlatform.getFiberTree(fiber), \"\\n\", renderFiber]), false));\r\n};\r\nvar setLogScope = function () {\r\n};\r\nvar resetLogScope = function () {\r\n};\r\nvar debugWithNode = function (fiber) {\r\n    var mayFiberContainer = fiber;\r\n    if (fiber.nativeNode || mayFiberContainer.containerNode) {\r\n        var node = (fiber.nativeNode || mayFiberContainer.containerNode);\r\n        node.__fiber__ = fiber;\r\n        node.__props__ = fiber.pendingProps;\r\n    }\r\n};\r\nvar getTrackDevLog = function (fiber) {\r\n    {\r\n        return \"\";\r\n    }\r\n};\r\nvar shouldIncludeLog = function (fiber) {\r\n    if (myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__class__ | exports.NODE_TYPE.__function__)) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nvar getElementName = function (fiber) {\r\n    var _a, _b;\r\n    if (fiber.type & exports.NODE_TYPE.__memo__) {\r\n        var targetRender = fiber.elementType;\r\n        var name_2 = \"\";\r\n        var res = \"memo\";\r\n        if (fiber.type & exports.NODE_TYPE.__provider__) {\r\n            name_2 = \"Provider\";\r\n        }\r\n        else if (fiber.type & exports.NODE_TYPE.__consumer__) {\r\n            name_2 = \"Consumer\";\r\n        }\r\n        else if (typeof targetRender === \"function\") {\r\n            name_2 = (targetRender === null || targetRender === void 0 ? void 0 : targetRender.displayName) || (targetRender === null || targetRender === void 0 ? void 0 : targetRender.name) || name_2;\r\n        }\r\n        if (fiber.type & exports.NODE_TYPE.__forwardRef__) {\r\n            res += \"-forwardRef\";\r\n        }\r\n        return \"<\".concat(name_2 ? name_2 : \"anonymous\", \" - (\").concat(res, \") />\");\r\n    }\r\n    if (fiber.type & exports.NODE_TYPE.__lazy__) {\r\n        var typedElementType = fiber.elementType;\r\n        var typedRender = typedElementType === null || typedElementType === void 0 ? void 0 : typedElementType.render;\r\n        var name_3 = (typedRender === null || typedRender === void 0 ? void 0 : typedRender.displayName) || (typedRender === null || typedRender === void 0 ? void 0 : typedRender.name) || \"\";\r\n        return \"<\".concat(name_3 ? name_3 : \"anonymous\", \" - (lazy) />\");\r\n    }\r\n    if (fiber.type & exports.NODE_TYPE.__portal__)\r\n        return \"<Portal />\";\r\n    if (fiber.type & exports.NODE_TYPE.__null__)\r\n        return \"<Null />\";\r\n    if (fiber.type & exports.NODE_TYPE.__empty__)\r\n        return \"<Empty />\";\r\n    if (fiber.type & exports.NODE_TYPE.__scope__)\r\n        return \"<Scope />\";\r\n    if (fiber.type & exports.NODE_TYPE.__strict__)\r\n        return \"<Strict />\";\r\n    if (fiber.type & exports.NODE_TYPE.__profiler__)\r\n        return \"<Profiler />\";\r\n    if (fiber.type & exports.NODE_TYPE.__suspense__)\r\n        return \"<Suspense />\";\r\n    if (fiber.type & exports.NODE_TYPE.__fragment__) {\r\n        if (fiber.pendingProps[\"wrap\"])\r\n            return \"<Fragment - (auto-wrap) />\";\r\n        return \"<Fragment />\";\r\n    }\r\n    if (fiber.type & exports.NODE_TYPE.__keepLive__)\r\n        return \"<KeepAlive />\";\r\n    if (fiber.type & exports.NODE_TYPE.__provider__)\r\n        return \"<Provider />\";\r\n    if (fiber.type & exports.NODE_TYPE.__consumer__)\r\n        return \"<Consumer />\";\r\n    if (fiber.type & exports.NODE_TYPE.__comment__)\r\n        return \"<Comment />\";\r\n    if (fiber.type & exports.NODE_TYPE.__forwardRef__) {\r\n        var targetRender = fiber.elementType;\r\n        var name_4 = (targetRender === null || targetRender === void 0 ? void 0 : targetRender.displayName) || (targetRender === null || targetRender === void 0 ? void 0 : targetRender.name) || \"\";\r\n        return \"<\".concat(name_4 ? name_4 : \"anonymous\", \" - (forwardRef) />\");\r\n    }\r\n    if (typeof fiber.elementType === \"function\") {\r\n        var typedElementType = fiber.elementType;\r\n        var name_5 = typedElementType.displayName || typedElementType.name || \"anonymous\";\r\n        return \"<\".concat(name_5, \" />\");\r\n    }\r\n    if (fiber.type & exports.NODE_TYPE.__text__)\r\n        return \"<text (\".concat((_a = fiber.elementType) === null || _a === void 0 ? void 0 : _a.toString(), \") />\");\r\n    if (typeof fiber.elementType === \"string\")\r\n        return \"<\".concat(fiber.elementType, \" />\");\r\n    return \"<unknown (\".concat((_b = fiber.elementType) === null || _b === void 0 ? void 0 : _b.toString(), \") />\");\r\n};\r\nvar getFiberNodeName = function (fiber) { return \"\".concat(getElementName(fiber), \" \").concat(getTrackDevLog()); };\r\nvar getFiberNodeNameWithFiber = function (fiber) { return \"%c\".concat(getElementName(fiber), \"%c (%o)\"); };\r\nvar getFiberTree = function (fiber) {\r\n    if (fiber) {\r\n        var preString = \"\".padEnd(4) + \"at\".padEnd(3);\r\n        var res = \"\";\r\n        var temp = fiber;\r\n        if (enableOptimizeTreeLog.current) {\r\n            while (temp) {\r\n                if (shouldIncludeLog(temp)) {\r\n                    res ? (res += \"\\n\".concat(preString).concat(getFiberNodeName(temp))) : (res = \"\".concat(preString).concat(getFiberNodeName(temp)));\r\n                }\r\n                temp = temp.parent;\r\n            }\r\n        }\r\n        else {\r\n            while (temp) {\r\n                res ? (res += \"\\n\".concat(preString).concat(getFiberNodeName(temp))) : (res = \"\".concat(preString).concat(getFiberNodeName(temp)));\r\n                temp = temp.parent;\r\n            }\r\n        }\r\n        return \"\\n\".concat(res);\r\n    }\r\n    return \"\";\r\n};\r\nvar getFiberTreeWithFiber = function (fiber) {\r\n    var preString = \"at\".padEnd(3);\r\n    var res = \"\";\r\n    var arr = [];\r\n    var temp = fiber;\r\n    while (temp) {\r\n        res ? (res += \"\\n\".concat(preString).concat(getFiberNodeNameWithFiber(temp))) : (res = \"\".concat(preString).concat(getFiberNodeNameWithFiber(temp)));\r\n        arr.push(\"color: white;background-color: rgba(10, 190, 235, 0.8); border-radius: 2px; padding: 1px 5px; margin: 1px 0px\");\r\n        arr.push(\"\");\r\n        arr.push(temp);\r\n        temp = temp.parent;\r\n    }\r\n    return { str: \"\".concat(res), arr: arr };\r\n};\r\nvar getHookTree = function (treeHookNode, errorType) {\r\n    var pre = \"\".toString().padEnd(4);\r\n    var message = \"[@my-react/react] hook for current component has a different state on current render and previous render, this is not a valid usage.\";\r\n    var re = \"\\n\" + pre + \"Last render:\".padEnd(28) + \"Next render:\".padEnd(10) + \"\\n\" + pre + \"-\".repeat(44) + \"\\n\";\r\n    var stack = pre + myreactSharedExports.HOOK_TYPE[errorType.lastRender].padEnd(28) + myreactSharedExports.HOOK_TYPE[errorType.nextRender].padEnd(10) + \"\\n\";\r\n    while (treeHookNode && treeHookNode.value) {\r\n        var t = treeHookNode.value.type;\r\n        stack = pre + myreactSharedExports.HOOK_TYPE[t].padEnd(28) + myreactSharedExports.HOOK_TYPE[t].padEnd(10) + \"\\n\" + stack;\r\n        treeHookNode = treeHookNode.prev;\r\n    }\r\n    stack += pre + \"^\".repeat(44);\r\n    return message + re + stack;\r\n};\r\nvar onceWarnWithKey = function (key) {\r\n    var _a;\r\n    var _b;\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = currentRunningFiber$1.current;\r\n    if (!renderFiber) {\r\n        if (warnMap === null || warnMap === void 0 ? void 0 : warnMap[key])\r\n            return;\r\n        warnMap[key] = true;\r\n        devWarn.apply(void 0, args);\r\n        return;\r\n    }\r\n    var logObj = [];\r\n    var tree = renderPlatform.getFiberTree(renderFiber);\r\n    if ((_b = warnMap === null || warnMap === void 0 ? void 0 : warnMap[tree]) === null || _b === void 0 ? void 0 : _b[key])\r\n        return;\r\n    warnMap[tree] = __assign(__assign({}, warnMap === null || warnMap === void 0 ? void 0 : warnMap[tree]), (_a = {}, _a[key] = true, _a));\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalWarn.call.apply(originalWarn, __spreadArray([console, logString], logObj.concat([tree, \"\\n\", renderFiber]), false));\r\n};\r\nvar onceErrorWithKey = function (key) {\r\n    var _a;\r\n    var _b;\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var renderFiber = currentRunningFiber$1.current;\r\n    if (!renderFiber) {\r\n        if (errorMap === null || errorMap === void 0 ? void 0 : errorMap[key])\r\n            return;\r\n        errorMap[key] = true;\r\n        devError.apply(void 0, args);\r\n        return;\r\n    }\r\n    var logObj = [];\r\n    var tree = renderPlatform.getFiberTree(renderFiber);\r\n    if ((_b = errorMap === null || errorMap === void 0 ? void 0 : errorMap[tree]) === null || _b === void 0 ? void 0 : _b[key])\r\n        return;\r\n    errorMap[tree] = __assign(__assign({}, errorMap === null || errorMap === void 0 ? void 0 : errorMap[tree]), (_a = {}, _a[key] = true, _a));\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalError.call.apply(originalError, __spreadArray([console, logString], logObj.concat([tree, \"\\n\", renderFiber]), false));\r\n};\r\nvar onceWarnWithKeyAndFiber = function (fiber, key) {\r\n    var _a;\r\n    var _b;\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var logObj = [];\r\n    var tree = renderPlatform.getFiberTree(fiber);\r\n    if ((_b = warnMap === null || warnMap === void 0 ? void 0 : warnMap[tree]) === null || _b === void 0 ? void 0 : _b[key])\r\n        return;\r\n    warnMap[tree] = __assign(__assign({}, warnMap === null || warnMap === void 0 ? void 0 : warnMap[tree]), (_a = {}, _a[key] = true, _a));\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalWarn.call.apply(originalWarn, __spreadArray([console, logString], logObj.concat([tree, \"\\n\", fiber]), false));\r\n};\r\nvar onceErrorWithKeyAndFiber = function (fiber, key) {\r\n    var _a;\r\n    var _b;\r\n    var args = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        args[_i - 2] = arguments[_i];\r\n    }\r\n    var renderPlatform = currentRenderPlatform$6.current;\r\n    var logObj = [];\r\n    var tree = renderPlatform.getFiberTree(fiber);\r\n    if ((_b = errorMap === null || errorMap === void 0 ? void 0 : errorMap[tree]) === null || _b === void 0 ? void 0 : _b[key])\r\n        return;\r\n    errorMap[tree] = __assign(__assign({}, errorMap === null || errorMap === void 0 ? void 0 : errorMap[tree]), (_a = {}, _a[key] = true, _a));\r\n    var logString = args\r\n        .map(function (i) {\r\n        if (myreactSharedExports.isObject(i)) {\r\n            logObj.push(i);\r\n            return \"%o\";\r\n        }\r\n        else {\r\n            return i;\r\n        }\r\n    })\r\n        .join(\" \");\r\n    originalError.call.apply(originalError, __spreadArray([console, logString], logObj.concat([tree, \"\\n\", fiber]), false));\r\n};\n\nvar currentRunningFiber = react.__my_react_internal__.currentRunningFiber, currentRenderPlatform$5 = react.__my_react_internal__.currentRenderPlatform;\r\nvar safeCall = function (action) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    try {\r\n        return action.call.apply(action, __spreadArray([null], args, false));\r\n    }\r\n    catch (e) {\r\n        var fiber = currentRunningFiber.current;\r\n        var renderPlatform = currentRenderPlatform$5.current;\r\n        renderPlatform.dispatchError({ fiber: fiber, error: e });\r\n    }\r\n};\r\nvar safeCallWithFiber = function (_a) {\r\n    var action = _a.action, fiber = _a.fiber, fallback = _a.fallback;\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    var last = currentRunningFiber.current;\r\n    currentRunningFiber.current = fiber;\r\n    try {\r\n        return action.call.apply(action, __spreadArray([null], args, false));\r\n    }\r\n    catch (e) {\r\n        var renderPlatform = currentRenderPlatform$5.current;\r\n        renderPlatform.dispatchError({ fiber: fiber, error: e });\r\n        return fallback === null || fallback === void 0 ? void 0 : fallback();\r\n    }\r\n    finally {\r\n        currentRunningFiber.current = last;\r\n    }\r\n};\r\nvar safeCallWithSync = function (action) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    try {\r\n        beforeSyncUpdate();\r\n        return action.call.apply(action, __spreadArray([null], args, false));\r\n    }\r\n    catch (e) {\r\n        var fiber = currentRunningFiber.current;\r\n        var renderPlatform = currentRenderPlatform$5.current;\r\n        renderPlatform.dispatchError({ fiber: fiber, error: e });\r\n    }\r\n    finally {\r\n        afterSyncUpdate();\r\n    }\r\n};\n\nreact.__my_react_shared__.enableHMRForDev;\r\nvar emptyProps = {};\r\n// TODO\r\nvar getTypeFromElementNode = function (element) {\r\n    var nodeType = exports.NODE_TYPE.__initial__;\r\n    if (react.isValidElement(element)) {\r\n        return getTypeFromElement(element);\r\n    }\r\n    else {\r\n        if (typeof element === \"object\" && element !== null) {\r\n            nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__empty__);\r\n        }\r\n        else if (element === null || element === undefined || typeof element === \"boolean\" || typeof element === \"function\") {\r\n            nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__null__);\r\n        }\r\n        else {\r\n            // text element\r\n            return { key: null, ref: null, nodeType: exports.NODE_TYPE.__text__, elementType: String(element), pendingProps: emptyProps };\r\n        }\r\n    }\r\n    return { key: null, ref: null, nodeType: nodeType, elementType: null, pendingProps: emptyProps };\r\n};\r\nvar getTypeFromElement = function (element) {\r\n    var _a, _b, _c;\r\n    var nodeType = exports.NODE_TYPE.__initial__;\r\n    var elementType = element.type;\r\n    var pendingProps = element.props;\r\n    var ref = element.ref;\r\n    var key = element.key;\r\n    if (typeof elementType === \"object\") {\r\n        var typedElementType = elementType;\r\n        switch (typedElementType[myreactSharedExports.TYPEKEY]) {\r\n            case myreactSharedExports.Provider:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__provider__);\r\n                break;\r\n            case myreactSharedExports.Consumer:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__consumer__);\r\n                break;\r\n            case myreactSharedExports.Memo:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__memo__);\r\n                elementType = typedElementType.render;\r\n                break;\r\n            case myreactSharedExports.ForwardRef:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__forwardRef__);\r\n                elementType = typedElementType.render;\r\n                break;\r\n            case myreactSharedExports.Lazy:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__lazy__);\r\n                break;\r\n            default:\r\n                throw new Error(\"[@my-react/react] invalid object element type \\\"\".concat((_a = typedElementType[myreactSharedExports.TYPEKEY]) === null || _a === void 0 ? void 0 : _a.toString(), \"\\\"\"));\r\n        }\r\n        if (typeof elementType === \"object\") {\r\n            if (elementType[myreactSharedExports.TYPEKEY] === myreactSharedExports.ForwardRef) {\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__forwardRef__);\r\n                elementType = elementType.render;\r\n            }\r\n            if (elementType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Provider) {\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__provider__);\r\n            }\r\n            if (elementType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Consumer) {\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__consumer__);\r\n            }\r\n        }\r\n        if (typeof elementType === \"function\") {\r\n            if ((_b = elementType.prototype) === null || _b === void 0 ? void 0 : _b.isMyReactComponent) {\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__class__);\r\n            }\r\n            else {\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__function__);\r\n            }\r\n        }\r\n    }\r\n    else if (typeof elementType === \"function\") {\r\n        if ((_c = elementType.prototype) === null || _c === void 0 ? void 0 : _c.isMyReactComponent) {\r\n            nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__class__);\r\n        }\r\n        else {\r\n            nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__function__);\r\n        }\r\n    }\r\n    else if (typeof elementType === \"symbol\") {\r\n        switch (elementType) {\r\n            case myreactSharedExports.KeepLive:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__keepLive__);\r\n                break;\r\n            case myreactSharedExports.Fragment:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__fragment__);\r\n                break;\r\n            case myreactSharedExports.Strict:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__strict__);\r\n                break;\r\n            case myreactSharedExports.Suspense:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__suspense__);\r\n                break;\r\n            case myreactSharedExports.Scope:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__scope__);\r\n                break;\r\n            case myreactSharedExports.Comment:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__comment__);\r\n                break;\r\n            case myreactSharedExports.Portal:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__portal__);\r\n                break;\r\n            case myreactSharedExports.Profiler:\r\n                nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__profiler__);\r\n                break;\r\n            default:\r\n                throw new Error(\"[@my-react/react] invalid symbol element type \\\"\".concat(elementType === null || elementType === void 0 ? void 0 : elementType.toString(), \"\\\"\"));\r\n        }\r\n    }\r\n    else if (typeof elementType === \"string\") {\r\n        nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__plain__);\r\n    }\r\n    else {\r\n        nodeType = myreactSharedExports.merge(nodeType, exports.NODE_TYPE.__empty__);\r\n    }\r\n    return { key: key, ref: ref, nodeType: nodeType, elementType: elementType, pendingProps: pendingProps };\r\n};\n\nreact.__my_react_shared__.enableHMRForDev;\r\nfunction checkIsSameType(p, element) {\r\n    if (p instanceof MyReactFiberNode) {\r\n        var _a = getTypeFromElementNode(element), nodeType = _a.nodeType, elementType = _a.elementType;\r\n        if (p.type === nodeType) {\r\n            if (react.isValidElement(element)) {\r\n                {\r\n                    return Object.is(p.elementType, elementType);\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        var existElementType = getTypeFromElementNode(p);\r\n        var incomingElementType = getTypeFromElementNode(element);\r\n        if (existElementType.nodeType === incomingElementType.nodeType) {\r\n            if (react.isValidElement(element)) {\r\n                var typedExistElement = p;\r\n                var typedIncomingElement = element;\r\n                {\r\n                    return Object.is(typedIncomingElement.type, typedExistElement.type);\r\n                }\r\n            }\r\n            else {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\n\nvar getNext = function (fiber, root) {\r\n    if (fiber.child)\r\n        return fiber.child;\r\n    var nextFiber = fiber;\r\n    while (nextFiber && nextFiber !== root) {\r\n        if (nextFiber.sibling)\r\n            return nextFiber.sibling;\r\n        nextFiber = nextFiber.parent;\r\n    }\r\n    return null;\r\n};\r\nvar generateFiberToList = function (fiber) {\r\n    var listTree = new myreactSharedExports.ListTree();\r\n    var temp = fiber;\r\n    if (temp) {\r\n        listTree.push(temp);\r\n    }\r\n    while (temp) {\r\n        temp = getNext(temp, fiber);\r\n        if (temp)\r\n            listTree.push(temp);\r\n    }\r\n    return listTree;\r\n};\n\nvar currentRenderPlatform$4 = react.__my_react_internal__.currentRenderPlatform;\r\nreact.__my_react_shared__.enableDebugFiled;\r\nvar emptyObj = {};\r\nvar defaultGenerateContextMap = function (fiber, map) {\r\n    var _a;\r\n    var parent = fiber.parent;\r\n    if (parent) {\r\n        var parentMap = map.get(parent) || emptyObj;\r\n        if (myreactSharedExports.include(parent.type, exports.NODE_TYPE.__provider__)) {\r\n            var typedElementType = parent.elementType;\r\n            var contextObj = typedElementType[\"Context\"];\r\n            var contextId = contextObj[\"contextId\"];\r\n            parentMap = Object.assign({}, parentMap, (_a = {}, _a[contextId] = parent, _a));\r\n        }\r\n        if (parentMap !== emptyObj) {\r\n            map.set(fiber, parentMap);\r\n        }\r\n    }\r\n};\r\nvar defaultGetContextValue = function (fiber, ContextObject) {\r\n    var _a, _b;\r\n    if (fiber) {\r\n        return (_a = fiber.pendingProps[\"value\"]) !== null && _a !== void 0 ? _a : null;\r\n    }\r\n    else {\r\n        return (_b = ContextObject === null || ContextObject === void 0 ? void 0 : ContextObject.Provider[\"value\"]) !== null && _b !== void 0 ? _b : null;\r\n    }\r\n};\r\nvar defaultGetContextFiber = function (fiber, renderDispatch, ContextObject) {\r\n    if (ContextObject) {\r\n        var contextMap = renderDispatch.runtimeMap.contextMap.get(fiber);\r\n        return (contextMap === null || contextMap === void 0 ? void 0 : contextMap[ContextObject.contextId]) || null;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nvar defaultGetContextFiber_New = function (fiber, renderDispatch, ContextObject) {\r\n    if (fiber.parent && ContextObject) {\r\n        var parent_1 = fiber.parent;\r\n        while (parent_1) {\r\n            if (myreactSharedExports.include(parent_1.type, exports.NODE_TYPE.__provider__)) {\r\n                var typedElementType = parent_1.elementType;\r\n                var contextObj = typedElementType[\"Context\"];\r\n                if (contextObj === ContextObject) {\r\n                    return parent_1;\r\n                }\r\n            }\r\n            parent_1 = parent_1.parent;\r\n        }\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nvar context = function (fiber, renderDispatch) {\r\n    if (myreactSharedExports.include(fiber.patch, myreactSharedExports.PATCH_TYPE.__context__)) {\r\n        var set_1 = new Set(fiber.dependence);\r\n        var renderPlatform = currentRenderPlatform$4.current;\r\n        renderPlatform.microTask(function () {\r\n            set_1.forEach(function (i) {\r\n                if (i._ownerFiber && myreactSharedExports.exclude(i._ownerFiber.state, myreactSharedExports.STATE_TYPE.__unmount__)) {\r\n                    i._ownerFiber.state = myreactSharedExports.STATE_TYPE.__triggerSync__;\r\n                }\r\n            });\r\n            // TODO\r\n            renderDispatch.pendingUpdateFiberArray.clear();\r\n            // sync skip from root\r\n            renderDispatch.rootFiber._update(myreactSharedExports.STATE_TYPE.__skippedSync__);\r\n        });\r\n        fiber.patch = myreactSharedExports.remove(fiber.patch, myreactSharedExports.PATCH_TYPE.__context__);\r\n    }\r\n};\r\n// used for root loop\r\nvar prepareUpdateAllDependence = function (fiber) {\r\n    var _a;\r\n    (_a = fiber === null || fiber === void 0 ? void 0 : fiber.dependence) === null || _a === void 0 ? void 0 : _a.forEach(function (i) {\r\n        if (i._ownerFiber && myreactSharedExports.exclude(i._ownerFiber.state, myreactSharedExports.STATE_TYPE.__unmount__)) {\r\n            i._ownerFiber.state = myreactSharedExports.STATE_TYPE.__triggerSync__;\r\n        }\r\n    });\r\n};\n\nvar currentRenderPlatform$3 = react.__my_react_internal__.currentRenderPlatform;\r\nvar defaultDispatchMount = function (_fiber, _dispatch, _hydrate) {\r\n    var mountInsertionEffect = function (_fiber) {\r\n        if (_fiber.child)\r\n            mountInsertionEffect(_fiber.child);\r\n        insertionEffect(_fiber, _dispatch);\r\n        if (_fiber.sibling)\r\n            mountInsertionEffect(_fiber.sibling);\r\n    };\r\n    var mountCommit = function (_fiber, _hydrate) {\r\n        var _result = safeCallWithFiber({\r\n            fiber: _fiber,\r\n            action: function () { return _dispatch.commitCreate(_fiber, _hydrate); },\r\n        });\r\n        safeCallWithFiber({\r\n            fiber: _fiber,\r\n            action: function () { return _dispatch.commitUpdate(_fiber, _result); },\r\n        });\r\n        safeCallWithFiber({\r\n            fiber: _fiber,\r\n            action: function () { return _dispatch.commitAppend(_fiber); },\r\n        });\r\n        var _final = _hydrate;\r\n        if (_fiber.child)\r\n            _final = mountCommit(_fiber.child, _result);\r\n        safeCallWithFiber({ fiber: _fiber, action: function () { return _dispatch.commitSetRef(_fiber); } });\r\n        if (_fiber.sibling) {\r\n            mountCommit(_fiber.sibling, _fiber.nativeNode ? _result : _final);\r\n        }\r\n        if (_fiber.nativeNode) {\r\n            return _result;\r\n        }\r\n        else {\r\n            return _final;\r\n        }\r\n    };\r\n    var mountLayoutEffect = function (_fiber) {\r\n        if (_fiber.child)\r\n            mountLayoutEffect(_fiber.child);\r\n        layoutEffect(_fiber, _dispatch);\r\n        if (_fiber.sibling)\r\n            mountLayoutEffect(_fiber.sibling);\r\n    };\r\n    var mountEffect = function (_fiber) {\r\n        if (_fiber.child)\r\n            mountEffect(_fiber.child);\r\n        effect(_fiber, _dispatch);\r\n        if (_fiber.sibling)\r\n            mountEffect(_fiber.sibling);\r\n    };\r\n    var mountLoop = function (_fiber, _hydrate) {\r\n        mountInsertionEffect(_fiber);\r\n        var re = mountCommit(_fiber, _hydrate);\r\n        mountLayoutEffect(_fiber);\r\n        currentRenderPlatform$3.current.microTask(function () { return mountEffect(_fiber); });\r\n        return re;\r\n    };\r\n    return mountLoop(_fiber, _hydrate);\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\n// TODO used for hydrate fallback\r\nvar defaultGenerateScopeMap = function (fiber, map) {\r\n    var parent = fiber.parent;\r\n    if (parent) {\r\n        if (myreactSharedExports.include(parent.type, exports.NODE_TYPE.__scope__)) {\r\n            map.set(fiber, parent);\r\n        }\r\n        else {\r\n            var parentScopeFiber = map.get(parent);\r\n            parentScopeFiber && map.set(fiber, parentScopeFiber);\r\n        }\r\n    }\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar defaultGenerateStrictMap = function (fiber, map) {\r\n    var parent = fiber.parent;\r\n    if (parent) {\r\n        if (myreactSharedExports.include(parent.type, exports.NODE_TYPE.__strict__)) {\r\n            map.set(fiber, true);\r\n        }\r\n        else {\r\n            var parentIsStrict = map.get(parent);\r\n            parentIsStrict && map.set(fiber, parentIsStrict);\r\n        }\r\n    }\r\n};\r\nvar defaultGenerateStrict = function (fiber) {\r\n    return false;\r\n};\n\nreact.__my_react_shared__.enableDebugFiled;\r\nvar defaultGenerateSuspenseMap = function (fiber, map) {\r\n    var parent = fiber.parent;\r\n    if (parent) {\r\n        if (myreactSharedExports.include(parent.type, exports.NODE_TYPE.__suspense__)) {\r\n            map.set(fiber, parent);\r\n        }\r\n        else {\r\n            var parentFiber = map.get(parent);\r\n            parentFiber && map.set(fiber, parentFiber);\r\n        }\r\n    }\r\n    var parentFiber; \r\n};\r\nvar defaultResolveSuspense = function (fiber) {\r\n    var _a;\r\n    var parent = fiber.parent;\r\n    while (parent) {\r\n        if (myreactSharedExports.include(parent.type, exports.NODE_TYPE.__suspense__)) {\r\n            return (_a = parent.pendingProps) === null || _a === void 0 ? void 0 : _a[\"fallback\"];\r\n        }\r\n        parent = parent.parent;\r\n    }\r\n    return null;\r\n};\n\nvar currentRenderPlatform$2 = react.__my_react_internal__.currentRenderPlatform;\r\nvar defaultDispatchUpdate = function (_list, _dispatch) {\r\n    // TODO maybe need call `insertionEffect` in another function\r\n    beforeSyncUpdate();\r\n    _list.listToFoot(function (_fiber) {\r\n        if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n            unmount(_fiber, _dispatch);\r\n            insertionEffect(_fiber, _dispatch);\r\n        }\r\n    });\r\n    afterSyncUpdate();\r\n    _list.listToFoot(function (_fiber) {\r\n        if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n            safeCallWithFiber({\r\n                fiber: _fiber,\r\n                action: function () { return _dispatch.commitCreate(_fiber); },\r\n            });\r\n        }\r\n    });\r\n    _list.listToHead(function (_fiber) {\r\n        if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n            safeCallWithFiber({\r\n                fiber: _fiber,\r\n                action: function () { return _dispatch.commitPosition(_fiber); },\r\n            });\r\n        }\r\n    });\r\n    _list.listToFoot(function (_fiber) {\r\n        if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n            safeCallWithFiber({\r\n                fiber: _fiber,\r\n                action: function () {\r\n                    _dispatch.commitAppend(_fiber);\r\n                    _dispatch.commitUpdate(_fiber);\r\n                    _dispatch.commitSetRef(_fiber);\r\n                },\r\n            });\r\n        }\r\n    });\r\n    beforeSyncUpdate();\r\n    _list.listToFoot(function (_fiber) {\r\n        if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n            context(_fiber, _dispatch);\r\n            layoutEffect(_fiber, _dispatch);\r\n        }\r\n    });\r\n    afterSyncUpdate();\r\n    currentRenderPlatform$2.current.microTask(function () {\r\n        return _list.listToFoot(function (_fiber) {\r\n            if (myreactSharedExports.exclude(_fiber.state, myreactSharedExports.STATE_TYPE.__unmount__) && !_dispatch.isAppUnmounted) {\r\n                effect(_fiber, _dispatch);\r\n            }\r\n        });\r\n    });\r\n};\n\nvar MyReactInternalInstance = react.__my_react_internal__.MyReactInternalInstance, currentRenderPlatform$1 = react.__my_react_internal__.currentRenderPlatform;\r\nvar MyReactHookNode = /** @class */ (function (_super) {\r\n    __extends(MyReactHookNode, _super);\r\n    function MyReactHookNode(type, value, reducer, deps) {\r\n        var _this = _super.call(this) || this;\r\n        _this.effect = false;\r\n        _this._dispatch = function (action) {\r\n            var updater = {\r\n                type: myreactSharedExports.UpdateQueueType.hook,\r\n                trigger: _this,\r\n                payLoad: action,\r\n            };\r\n            var renderPlatform = currentRenderPlatform$1.current;\r\n            renderPlatform === null || renderPlatform === void 0 ? void 0 : renderPlatform.dispatchState(updater);\r\n        };\r\n        _this.type = type;\r\n        _this.deps = deps;\r\n        _this.value = value;\r\n        _this.reducer = reducer;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MyReactHookNode.prototype, \"isMyReactHook\", {\r\n        get: function () {\r\n            return true;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    MyReactHookNode.prototype._unmount = function () {\r\n        _super.prototype._unmount.call(this);\r\n        this.effect = false;\r\n        this.cancel && this.cancel();\r\n    };\r\n    return MyReactHookNode;\r\n}(MyReactInternalInstance));\n\nvar enableLoopFromRoot = react.__my_react_shared__.enableLoopFromRoot;\r\nvar currentComponentFiber$1 = react.__my_react_internal__.currentComponentFiber;\r\nvar MyReactSignal = /** @class */ (function () {\r\n    function MyReactSignal(_rawValue, _renderDispatch) {\r\n        var _this = this;\r\n        this._renderDispatch = _renderDispatch;\r\n        this._depsSet = new Set();\r\n        this.getValue = function () {\r\n            if (currentComponentFiber$1.current) {\r\n                _this._depsSet.add(currentComponentFiber$1.current);\r\n            }\r\n            return _this._value;\r\n        };\r\n        this.setValue = function (newValue) {\r\n            if (!Object.is(_this._value, newValue)) {\r\n                var allDeps = new Set(_this._depsSet);\r\n                _this._depsSet.clear();\r\n                _this._value = newValue;\r\n                if (enableLoopFromRoot.current) {\r\n                    allDeps.forEach(function (f) { return myreactSharedExports.exclude(f.state, myreactSharedExports.STATE_TYPE.__unmount__) && (f.state = myreactSharedExports.STATE_TYPE.__triggerConcurrent__); });\r\n                }\r\n                else {\r\n                    allDeps.forEach(function (f) { return myreactSharedExports.exclude(f.state, myreactSharedExports.STATE_TYPE.__unmount__) && (f.state = myreactSharedExports.STATE_TYPE.__triggerConcurrent__); });\r\n                    _this._renderDispatch.rootFiber._update(myreactSharedExports.STATE_TYPE.__skippedSync__);\r\n                }\r\n            }\r\n        };\r\n        this._value = _rawValue;\r\n    }\r\n    return MyReactSignal;\r\n}());\n\nvar enableDebugLog$1 = react.__my_react_shared__.enableDebugLog; react.__my_react_shared__.enableDebugFiled;\r\nvar currentHookTreeNode$1 = react.__my_react_internal__.currentHookTreeNode, currentHookNodeIndex$1 = react.__my_react_internal__.currentHookNodeIndex;\r\nvar defaultReducer = function (state, action) {\r\n    return typeof action === \"function\" ? action(state) : action;\r\n};\r\nvar createHookNode = function (_a, fiber) {\r\n    var _b;\r\n    var type = _a.type, value = _a.value, reducer = _a.reducer, deps = _a.deps;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var currentHook = (_b = currentHookTreeNode$1.current) === null || _b === void 0 ? void 0 : _b.value;\r\n    var currentHookIndex = currentHookNodeIndex$1.current;\r\n    if (currentHook) {\r\n        throw new Error(\"[@my-react/react] should not have a hookList for current node, this is a bug for @my-react\");\r\n    }\r\n    var hookNode = new MyReactHookNode(type, value, reducer || defaultReducer, deps);\r\n    hookNode._setOwner(fiber);\r\n    fiber.hookList.push(hookNode);\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useMemo || hookNode.type === myreactSharedExports.HOOK_TYPE.useState || hookNode.type === myreactSharedExports.HOOK_TYPE.useReducer) {\r\n        hookNode.result = hookNode.value.call(null);\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useEffect ||\r\n        hookNode.type === myreactSharedExports.HOOK_TYPE.useLayoutEffect ||\r\n        hookNode.type === myreactSharedExports.HOOK_TYPE.useInsertionEffect ||\r\n        hookNode.type === myreactSharedExports.HOOK_TYPE.useImperativeHandle) {\r\n        hookNode.effect = true;\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useRef || hookNode.type === myreactSharedExports.HOOK_TYPE.useCallback || hookNode.type === myreactSharedExports.HOOK_TYPE.useDeferredValue) {\r\n        hookNode.result = hookNode.value;\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useId) {\r\n        hookNode.result = \":-\".concat(currentHookIndex, \"-\").concat(renderDispatch.uniqueIdCount++, \"-:\");\r\n        hookNode.cancel = function () { return renderDispatch.uniqueIdCount--; };\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useDebugValue) {\r\n        if (enableDebugLog$1.current) {\r\n            console.warn.apply(console, __spreadArray([\"[debug]\"], hookNode.value, false));\r\n        }\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useContext) {\r\n        var ProviderFiber = renderDispatch.resolveContextFiber(hookNode._ownerFiber, hookNode.value);\r\n        var context = renderDispatch.resolveContextValue(ProviderFiber, hookNode.value);\r\n        hookNode._setContext(ProviderFiber);\r\n        hookNode.result = context;\r\n        hookNode.context = context;\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useSyncExternalStore) {\r\n        var storeApi_1 = hookNode.value;\r\n        hookNode.result = safeCallWithFiber({\r\n            fiber: fiber,\r\n            action: function () { var _a; return (storeApi_1.getServerSnapshot ? (_a = storeApi_1.getServerSnapshot) === null || _a === void 0 ? void 0 : _a.call(null) : storeApi_1.getSnapshot.call(null)); },\r\n        });\r\n        hookNode.effect = true;\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useSignal) {\r\n        hookNode.result = new MyReactSignal(hookNode.value.call(null), renderDispatch);\r\n    }\r\n    if (hookNode.type === myreactSharedExports.HOOK_TYPE.useTransition) {\r\n        hookNode.result = [\r\n            false,\r\n            function (cb) {\r\n                var loadingCallback = function (cb) {\r\n                    react.startTransition(function () {\r\n                        hookNode.result[0] = true;\r\n                        triggerUpdate(fiber, myreactSharedExports.STATE_TYPE.__triggerConcurrent__, cb);\r\n                    });\r\n                };\r\n                var loadedCallback = function () {\r\n                    react.startTransition(function () {\r\n                        hookNode.result[0] = false;\r\n                        triggerUpdate(fiber, myreactSharedExports.STATE_TYPE.__triggerConcurrent__);\r\n                    });\r\n                };\r\n                var taskCallback = function () {\r\n                    react.startTransition(function () {\r\n                        safeCallWithFiber({ fiber: fiber, action: cb });\r\n                        loadedCallback();\r\n                    });\r\n                };\r\n                loadingCallback(taskCallback);\r\n            },\r\n        ];\r\n    }\r\n    return hookNode;\r\n};\n\nvar effectHookNode = function (fiber, hookNode) {\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (hookNode.effect && hookNode.mode === myreactSharedExports.Effect_TYPE.__initial__) {\r\n        hookNode.mode = myreactSharedExports.Effect_TYPE.__effect__;\r\n        if (hookNode.type === myreactSharedExports.HOOK_TYPE.useEffect) {\r\n            renderDispatch.pendingEffect(fiber, function () {\r\n                hookNode.cancel && hookNode.cancel();\r\n                if (myreactSharedExports.exclude(hookNode._ownerFiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n                    hookNode.cancel = hookNode.value();\r\n                hookNode.effect = false;\r\n                hookNode.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            });\r\n        }\r\n        if (hookNode.type === myreactSharedExports.HOOK_TYPE.useLayoutEffect) {\r\n            renderDispatch.pendingLayoutEffect(fiber, function () {\r\n                hookNode.cancel && hookNode.cancel();\r\n                hookNode.cancel = hookNode.value();\r\n                hookNode.effect = false;\r\n                hookNode.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            });\r\n        }\r\n        if (hookNode.type === myreactSharedExports.HOOK_TYPE.useInsertionEffect) {\r\n            renderDispatch.pendingInsertionEffect(fiber, function () {\r\n                hookNode.cancel && hookNode.cancel();\r\n                hookNode.cancel = hookNode.value();\r\n                hookNode.effect = false;\r\n                hookNode.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            });\r\n        }\r\n        if (hookNode.type === myreactSharedExports.HOOK_TYPE.useImperativeHandle) {\r\n            renderDispatch.pendingLayoutEffect(fiber, function () {\r\n                // ref obj\r\n                if (hookNode.value && typeof hookNode.value === \"object\")\r\n                    hookNode.value.current = hookNode.reducer.call(null);\r\n                // ref function\r\n                if (hookNode.value && typeof hookNode.value === \"function\")\r\n                    hookNode.value(hookNode.reducer.call(null));\r\n                hookNode.effect = false;\r\n                hookNode.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            });\r\n        }\r\n        if (hookNode.type === myreactSharedExports.HOOK_TYPE.useSyncExternalStore) {\r\n            renderDispatch.pendingLayoutEffect(fiber, function () {\r\n                hookNode.cancel && hookNode.cancel();\r\n                var storeApi = hookNode.value;\r\n                hookNode.cancel = storeApi.subscribe(function () { var _a, _b; return (_b = (_a = hookNode._ownerFiber) === null || _a === void 0 ? void 0 : _a._update) === null || _b === void 0 ? void 0 : _b.call(_a, myreactSharedExports.STATE_TYPE.__triggerConcurrent__); });\r\n                hookNode.effect = false;\r\n                hookNode.mode = myreactSharedExports.Effect_TYPE.__initial__;\r\n            });\r\n        }\r\n    }\r\n};\n\nvar enableDebugLog = react.__my_react_shared__.enableDebugLog;\r\nvar currentHookTreeNode = react.__my_react_internal__.currentHookTreeNode, currentRenderPlatform = react.__my_react_internal__.currentRenderPlatform;\r\nvar updateHookNode = function (_a, fiber, isHMR) {\r\n    var _b, _c;\r\n    var type = _a.type, value = _a.value, reducer = _a.reducer, deps = _a.deps;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    var renderPlatform = currentRenderPlatform.current;\r\n    var currentHook = (_b = currentHookTreeNode.current) === null || _b === void 0 ? void 0 : _b.value;\r\n    if (!currentHook) {\r\n        throw new Error(\"[@my-react/react] should have a hookList for current node, this is a bug for @my-react\");\r\n    }\r\n    if (type !== (currentHook === null || currentHook === void 0 ? void 0 : currentHook.type)) {\r\n        throw new Error(renderPlatform.getHookTree(currentHookTreeNode.current.prev, {\r\n            lastRender: currentHook === null || currentHook === void 0 ? void 0 : currentHook.type,\r\n            nextRender: type,\r\n        }));\r\n    }\r\n    currentHook._setOwner(fiber);\r\n    currentHookTreeNode.current = currentHookTreeNode.current.next;\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useMemo ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useCallback ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useLayoutEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useInsertionEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useImperativeHandle) {\r\n        if (deps && !currentHook.deps) {\r\n            throw new Error(\"[@my-react/react] deps state change\");\r\n        }\r\n        if (!deps && currentHook.deps) {\r\n            throw new Error(\"[@my-react/react] deps state change\");\r\n        }\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useLayoutEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useInsertionEffect ||\r\n        currentHook.type === myreactSharedExports.HOOK_TYPE.useImperativeHandle) {\r\n        if (isHMR || !deps || !myreactSharedExports.isArrayEquals(currentHook.deps, deps)) {\r\n            currentHook.value = value;\r\n            currentHook.reducer = reducer || currentHook.reducer;\r\n            currentHook.deps = deps;\r\n            currentHook.effect = true;\r\n        }\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useSyncExternalStore) {\r\n        var storeApi_1 = currentHook.value;\r\n        var newStoreApi = value;\r\n        if (isHMR || !Object.is(storeApi_1.subscribe, newStoreApi.subscribe)) {\r\n            storeApi_1.subscribe = newStoreApi.subscribe;\r\n            currentHook.effect = true;\r\n        }\r\n        storeApi_1.getSnapshot = newStoreApi.getSnapshot;\r\n        currentHook.result = safeCallWithFiber({ fiber: fiber, action: function () { return storeApi_1.getSnapshot.call(null); } });\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useCallback) {\r\n        if (isHMR || !deps || !myreactSharedExports.isArrayEquals(currentHook.deps, deps)) {\r\n            currentHook.value = value;\r\n            currentHook.result = value;\r\n            currentHook.deps = deps;\r\n        }\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useMemo) {\r\n        if (isHMR || !deps || !myreactSharedExports.isArrayEquals(currentHook.deps, deps)) {\r\n            currentHook.value = value;\r\n            currentHook.result = safeCallWithFiber({ fiber: fiber, action: function () { return value.call(null); } });\r\n            currentHook.deps = deps;\r\n        }\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useContext) {\r\n        if (!currentHook._contextFiber || myreactSharedExports.include(currentHook._contextFiber.state, myreactSharedExports.STATE_TYPE.__unmount__) || !Object.is(currentHook.value, value)) {\r\n            currentHook.value = value;\r\n            var ProviderFiber = renderDispatch.resolveContextFiber(currentHook._ownerFiber, currentHook.value);\r\n            var context = renderDispatch.resolveContextValue(ProviderFiber, currentHook.value);\r\n            currentHook._setContext(ProviderFiber);\r\n            currentHook.result = context;\r\n            currentHook.context = context;\r\n        }\r\n        else {\r\n            var context = renderDispatch.resolveContextValue(currentHook._contextFiber, currentHook.value);\r\n            currentHook.result = context;\r\n            currentHook.context = context;\r\n        }\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useReducer) {\r\n        currentHook.value = value;\r\n        currentHook.reducer = reducer;\r\n        return currentHook;\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useDeferredValue) {\r\n        (_c = currentHook.cancel) === null || _c === void 0 ? void 0 : _c.call(currentHook);\r\n        currentHook.value = value;\r\n        if (!Object.is(currentHook.value, currentHook.result)) {\r\n            currentHook.cancel = renderPlatform.yieldTask(function () {\r\n                currentHook.result = currentHook.value;\r\n                currentHook._ownerFiber._update();\r\n                currentHook.cancel = null;\r\n            });\r\n        }\r\n    }\r\n    if (currentHook.type === myreactSharedExports.HOOK_TYPE.useDebugValue) {\r\n        if (!myreactSharedExports.isArrayEquals(currentHook.value, value)) {\r\n            currentHook.value = value;\r\n            if (enableDebugLog.current) {\r\n                console.warn.apply(console, __spreadArray([\"[debug]\"], currentHook.value, false));\r\n            }\r\n        }\r\n    }\r\n    return currentHook;\r\n};\n\nvar currentComponentFiber = react.__my_react_internal__.currentComponentFiber, currentHookNodeIndex = react.__my_react_internal__.currentHookNodeIndex;\r\nvar resolveHookValue = function (hookNode) {\r\n    if (hookNode) {\r\n        switch (hookNode.type) {\r\n            case myreactSharedExports.HOOK_TYPE.useState:\r\n            case myreactSharedExports.HOOK_TYPE.useReducer:\r\n                return [hookNode.result, hookNode._dispatch];\r\n            case myreactSharedExports.HOOK_TYPE.useId:\r\n            case myreactSharedExports.HOOK_TYPE.useRef:\r\n            case myreactSharedExports.HOOK_TYPE.useMemo:\r\n            case myreactSharedExports.HOOK_TYPE.useContext:\r\n            case myreactSharedExports.HOOK_TYPE.useCallback:\r\n            case myreactSharedExports.HOOK_TYPE.useTransition:\r\n            case myreactSharedExports.HOOK_TYPE.useDeferredValue:\r\n            case myreactSharedExports.HOOK_TYPE.useSyncExternalStore:\r\n                return hookNode.result;\r\n            case myreactSharedExports.HOOK_TYPE.useSignal:\r\n                return [hookNode.result.getValue, hookNode.result.setValue];\r\n        }\r\n    }\r\n};\r\nvar processHookNode = function (_a) {\r\n    var type = _a.type, reducer = _a.reducer, value = _a.value, deps = _a.deps;\r\n    var fiber = currentComponentFiber.current;\r\n    var renderDispatch = currentRenderDispatch.current;\r\n    if (!fiber)\r\n        throw new Error(\"[@my-react/react] can not use hook outside of component\");\r\n    if (!renderDispatch)\r\n        throw new Error(\"[@my-react/react] internal error, can not get 'renderDispatch' for current render\");\r\n    fiber.hookList = fiber.hookList || new myreactSharedExports.ListTree();\r\n    var currentHook = null;\r\n    // initial\r\n    if (myreactSharedExports.include(fiber.state, myreactSharedExports.STATE_TYPE.__create__)) {\r\n        currentHook = createHookNode({ type: type, reducer: reducer, value: value, deps: deps }, fiber);\r\n    }\r\n    else {\r\n        // update\r\n        currentHook = updateHookNode({ type: type, reducer: reducer, value: value, deps: deps }, fiber, false );\r\n    }\r\n    currentHookNodeIndex.current++;\r\n    effectHookNode(fiber, currentHook);\r\n    return resolveHookValue(currentHook);\r\n};\n\nvar processLazy = function (_fiber) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var typedElementType, loaded, render, e_1;\r\n    return __generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                if (!myreactSharedExports.include(_fiber.type, exports.NODE_TYPE.__lazy__)) return [3 /*break*/, 5];\r\n                typedElementType = _fiber.elementType;\r\n                if (typedElementType._loaded)\r\n                    return [2 /*return*/];\r\n                _a.label = 1;\r\n            case 1:\r\n                _a.trys.push([1, 3, 4, 5]);\r\n                return [4 /*yield*/, typedElementType.loader()];\r\n            case 2:\r\n                loaded = _a.sent();\r\n                render = typeof loaded === \"object\" && typeof (loaded === null || loaded === void 0 ? void 0 : loaded.default) === \"function\" ? loaded.default : loaded;\r\n                typedElementType.render = render;\r\n                _fiber.state = myreactSharedExports.STATE_TYPE.__create__;\r\n                typedElementType._loaded = true;\r\n                return [3 /*break*/, 5];\r\n            case 3:\r\n                e_1 = _a.sent();\r\n                triggerError(_fiber, e_1);\r\n                return [3 /*break*/, 5];\r\n            case 4:\r\n                typedElementType._loading = false;\r\n                return [7 /*endfinally*/];\r\n            case 5: return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\n\nreact.__my_react_internal__.currentComponentFiber;\r\nvar enableSyncFlush = react.__my_react_shared__.enableSyncFlush; react.__my_react_shared__.enableDebugFiled;\r\nvar processState = function (_params) {\r\n    _params.isSync = enableSyncFlush.current;\r\n    if (_params.type === myreactSharedExports.UpdateQueueType.component) {\r\n        var ownerFiber = _params.trigger._ownerFiber;\r\n        if (!ownerFiber || myreactSharedExports.include(ownerFiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n            return;\r\n        ownerFiber.updateQueue = ownerFiber.updateQueue || new myreactSharedExports.ListTree();\r\n        ownerFiber.updateQueue.push(_params);\r\n        ownerFiber._prepare();\r\n    }\r\n    else {\r\n        var ownerFiber = _params.trigger._ownerFiber;\r\n        if (!ownerFiber || myreactSharedExports.include(ownerFiber === null || ownerFiber === void 0 ? void 0 : ownerFiber.state, myreactSharedExports.STATE_TYPE.__unmount__))\r\n            return;\r\n        ownerFiber.updateQueue = ownerFiber.updateQueue || new myreactSharedExports.ListTree();\r\n        ownerFiber.updateQueue.push(_params);\r\n        ownerFiber._prepare();\r\n    }\r\n};\n\nvar CustomRenderDispatch = /** @class */ (function () {\r\n    function CustomRenderDispatch(rootNode, rootFiber) {\r\n        this.rootNode = rootNode;\r\n        this.rootFiber = rootFiber;\r\n        this.runtimeMap = {\r\n            suspenseMap: new MyWeakMap(),\r\n            strictMap: new MyWeakMap(),\r\n            scopeMap: new MyWeakMap(),\r\n            errorBoundariesMap: new MyWeakMap(),\r\n            effectMap: new MyWeakMap(),\r\n            layoutEffectMap: new MyWeakMap(),\r\n            insertionEffectMap: new MyWeakMap(),\r\n            contextMap: new MyWeakMap(),\r\n            unmountMap: new MyWeakMap(),\r\n            eventMap: new MyWeakMap(),\r\n        };\r\n        this.runtimeFiber = {\r\n            scheduledFiber: null,\r\n            errorCatchFiber: null,\r\n            nextWorkingFiber: null,\r\n        };\r\n        this.isAppMounted = false;\r\n        this.isAppCrashed = false;\r\n        this.isAppUnmounted = false;\r\n        this.pendingCommitFiberList = null;\r\n        this.pendingAsyncLoadFiberList = null;\r\n        this.pendingUpdateFiberArray = new myreactSharedExports.UniqueArray();\r\n        this.performanceLogTimeLimit = 2000;\r\n        this.uniqueIdCount = 0;\r\n        var typedFiber = rootFiber;\r\n        typedFiber.containerNode = rootNode;\r\n    }\r\n    CustomRenderDispatch.prototype.generateCommitList = function (_fiber) {\r\n        if (!_fiber)\r\n            return;\r\n        if (_fiber.patch !== myreactSharedExports.PATCH_TYPE.__initial__) {\r\n            this.pendingCommitFiberList = this.pendingCommitFiberList || new myreactSharedExports.ListTree();\r\n            this.pendingCommitFiberList.push(_fiber);\r\n        }\r\n    };\r\n    CustomRenderDispatch.prototype.pendingCreate = function (_fiber) {\r\n        if (myreactSharedExports.include(_fiber.type, this.runtimeRef.typeForCreate)) {\r\n            _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__create__);\r\n        }\r\n    };\r\n    CustomRenderDispatch.prototype.pendingUpdate = function (_fiber) {\r\n        if (myreactSharedExports.include(_fiber.type, this.runtimeRef.typeForUpdate)) {\r\n            _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__update__);\r\n        }\r\n    };\r\n    CustomRenderDispatch.prototype.pendingAppend = function (_fiber) {\r\n        if (myreactSharedExports.include(_fiber.type, this.runtimeRef.typeForAppend)) {\r\n            _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__append__);\r\n        }\r\n    };\r\n    CustomRenderDispatch.prototype.pendingContext = function (_fiber) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__context__);\r\n    };\r\n    CustomRenderDispatch.prototype.pendingPosition = function (_fiber) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__position__);\r\n    };\r\n    CustomRenderDispatch.prototype.pendingRef = function (_fiber) {\r\n        if (_fiber.ref) {\r\n            if (myreactSharedExports.include(_fiber.type, this.runtimeRef.typeForRef)) {\r\n                _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__ref__);\r\n            }\r\n            else if (myreactSharedExports.exclude(_fiber.type, exports.NODE_TYPE.__forwardRef__)) {\r\n                onceWarnWithKeyAndFiber(_fiber, \"ref\", \"[@my-react/react] set ref for current element will be ignored\");\r\n            }\r\n        }\r\n    };\r\n    CustomRenderDispatch.prototype.pendingUnmount = function (_fiber, _pendingUnmount) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__unmount__);\r\n        defaultGenerateUnmountMap(_fiber, _pendingUnmount, this.runtimeMap.unmountMap);\r\n    };\r\n    CustomRenderDispatch.prototype.pendingEffect = function (_fiber, _effect) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__effect__);\r\n        defaultGenerateEffectMap(_fiber, _effect, this.runtimeMap.effectMap);\r\n    };\r\n    CustomRenderDispatch.prototype.pendingLayoutEffect = function (_fiber, _layoutEffect) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__layoutEffect__);\r\n        defaultGenerateEffectMap(_fiber, _layoutEffect, this.runtimeMap.layoutEffectMap);\r\n    };\r\n    CustomRenderDispatch.prototype.pendingInsertionEffect = function (_fiber, _insertionEffect) {\r\n        _fiber.patch = myreactSharedExports.merge(_fiber.patch, myreactSharedExports.PATCH_TYPE.__insertionEffect__);\r\n        defaultGenerateEffectMap(_fiber, _insertionEffect, this.runtimeMap.insertionEffectMap);\r\n    };\r\n    CustomRenderDispatch.prototype.patchToFiberInitial = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.patchToFiberUpdate = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.patchToFiberUnmount = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitCreate = function (_fiber, _hydrate) {\r\n        return false;\r\n    };\r\n    CustomRenderDispatch.prototype.commitUpdate = function (_fiber, _hydrate) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitAppend = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitPosition = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitSetRef = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitUnsetRef = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.commitClearNode = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.resolveLazyElement = function (_fiber) {\r\n        return null;\r\n    };\r\n    CustomRenderDispatch.prototype.resolveStrictMap = function (_fiber) {\r\n    };\r\n    CustomRenderDispatch.prototype.resolveStrict = function (_fiber) {\r\n        // return false ? this.runtimeMap.strictMap.get(_fiber) || false : false;\r\n        return defaultGenerateStrict();\r\n    };\r\n    CustomRenderDispatch.prototype.resolveScopeMap = function (_fiber) {\r\n        defaultGenerateScopeMap(_fiber, this.runtimeMap.scopeMap);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveScope = function (_fiber) {\r\n        return this.runtimeMap.scopeMap.get(_fiber) || null;\r\n    };\r\n    CustomRenderDispatch.prototype.resolveSuspenseMap = function (_fiber) {\r\n        defaultGenerateSuspenseMap(_fiber, this.runtimeMap.suspenseMap);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveSuspense = function (_fiber) {\r\n        // return this.runtimeMap.suspenseMap.get(_fiber)?.pendingProps?.[\"fallback\"] || null;\r\n        return defaultResolveSuspense(_fiber);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveErrorBoundariesMap = function (_fiber) {\r\n        defaultGenerateErrorBoundariesMap(_fiber, this.runtimeMap.errorBoundariesMap);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveErrorBoundaries = function (_fiber) {\r\n        // return this.runtimeMap.errorBoundariesMap.get(_fiber) || null;\r\n        return defaultResolveErrorBoundaries(_fiber);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveContextMap = function (_fiber) {\r\n        defaultGenerateContextMap(_fiber, this.runtimeMap.contextMap);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveContextFiber = function (_fiber, _contextObject) {\r\n        return defaultGetContextFiber_New(_fiber, this, _contextObject);\r\n    };\r\n    CustomRenderDispatch.prototype.resolveContextValue = function (_fiber, _contextObject) {\r\n        return defaultGetContextValue(_fiber, _contextObject);\r\n    };\r\n    CustomRenderDispatch.prototype.reconcileCommit = function (_fiber, _hydrate) {\r\n        return defaultDispatchMount(_fiber, this, _hydrate);\r\n    };\r\n    CustomRenderDispatch.prototype.reconcileUpdate = function (_list) {\r\n        defaultDispatchUpdate(_list, this);\r\n    };\r\n    CustomRenderDispatch.prototype.shouldYield = function () {\r\n        return false;\r\n    };\r\n    return CustomRenderDispatch;\r\n}());\n\nvar mountLoop = function (fiber, renderDispatch) {\r\n    var pendingFiber = fiber;\r\n    while (pendingFiber) {\r\n        pendingFiber = performToNextFiberWithTrigger(pendingFiber, renderDispatch);\r\n    }\r\n};\n\nvar globalLoop = react.__my_react_internal__.globalLoop;\r\nreact.__my_react_shared__.enableScopeTreeLog;\r\nvar mount = function (fiber, renderDispatch, hydrate) {\r\n    globalLoop.current = true;\r\n    mountLoop(fiber, renderDispatch);\r\n    renderDispatch.pendingCommitFiberList = null;\r\n    renderDispatch.reconcileCommit(fiber, hydrate);\r\n    globalLoop.current = false;\r\n};\r\nvar mountAsync = function (fiber, renderDispatch, _hydrate) { return __awaiter(void 0, void 0, void 0, function () {\r\n    var loopCount, beforeLength, node, afterLength;\r\n    var _a;\r\n    return __generator(this, function (_b) {\r\n        switch (_b.label) {\r\n            case 0:\r\n                globalLoop.current = true;\r\n                mountLoop(fiber, renderDispatch);\r\n                loopCount = 0;\r\n                _b.label = 1;\r\n            case 1:\r\n                if (!((_a = renderDispatch.pendingAsyncLoadFiberList) === null || _a === void 0 ? void 0 : _a.length)) return [3 /*break*/, 3];\r\n                beforeLength = renderDispatch.pendingAsyncLoadFiberList.length;\r\n                node = renderDispatch.pendingAsyncLoadFiberList.shift();\r\n                return [4 /*yield*/, processLazy(node)];\r\n            case 2:\r\n                _b.sent();\r\n                mountLoop(node, renderDispatch);\r\n                afterLength = renderDispatch.pendingAsyncLoadFiberList.length;\r\n                if (beforeLength === afterLength) {\r\n                    loopCount++;\r\n                    if (loopCount > 5) {\r\n                        throw new Error(\"lazy() load loop count is too much\");\r\n                    }\r\n                }\r\n                return [3 /*break*/, 1];\r\n            case 3:\r\n                globalLoop.current = false;\r\n                return [2 /*return*/];\r\n        }\r\n    });\r\n}); };\n\nvar CustomRenderPlatform = /** @class */ (function () {\r\n    function CustomRenderPlatform() {\r\n        this.dispatchSet = new myreactSharedExports.UniqueArray();\r\n    }\r\n    CustomRenderPlatform.prototype.microTask = function (_task) {\r\n    };\r\n    CustomRenderPlatform.prototype.macroTask = function (_task) {\r\n    };\r\n    CustomRenderPlatform.prototype.yieldTask = function (_task) {\r\n        return void 0;\r\n    };\r\n    CustomRenderPlatform.prototype.getFiberTree = function (_fiber) {\r\n        return getFiberTree(_fiber);\r\n    };\r\n    CustomRenderPlatform.prototype.getHookTree = function (_treeHookNode, _errorType) {\r\n        return getHookTree(_treeHookNode, _errorType);\r\n    };\r\n    CustomRenderPlatform.prototype.dispatchHook = function (_params) {\r\n        return void 0;\r\n    };\r\n    CustomRenderPlatform.prototype.dispatchState = function (_params) {\r\n    };\r\n    CustomRenderPlatform.prototype.dispatchError = function (_params) {\r\n    };\r\n    return CustomRenderPlatform;\r\n}());\n\nvar WrapperByScope = function (children) {\r\n    return react.createElement(myreactSharedExports.Scope, null, react.createElement(myreactSharedExports.Comment, { mode: \"s\" }), children, react.createElement(myreactSharedExports.Comment, { mode: \"e\" }));\r\n};\r\nvar isCommentElement = function (fiber) { return myreactSharedExports.include(fiber.type, exports.NODE_TYPE.__comment__); };\r\nvar isCommentStartElement = function (fiber) {\r\n    if (isCommentElement(fiber)) {\r\n        return fiber.pendingProps[\"mode\"] === \"s\";\r\n    }\r\n    return false;\r\n};\r\nvar isCommentEndElement = function (fiber) {\r\n    if (isCommentElement(fiber)) {\r\n        return fiber.pendingProps[\"mode\"] === \"e\";\r\n    }\r\n    return false;\r\n};\n\nvar version = \"0.2.6\";\n\nexports.CustomRenderDispatch = CustomRenderDispatch;\nexports.CustomRenderPlatform = CustomRenderPlatform;\nexports.MyReactFiberNode = MyReactFiberNode;\nexports.MyReactHookNode = MyReactHookNode;\nexports.MyWeakMap = MyWeakMap;\nexports.WrapperByScope = WrapperByScope;\nexports.afterSyncFlush = afterSyncFlush;\nexports.afterSyncUpdate = afterSyncUpdate;\nexports.beforeSyncFlush = beforeSyncFlush;\nexports.beforeSyncUpdate = beforeSyncUpdate;\nexports.checkIsSameType = checkIsSameType;\nexports.classComponentActive = classComponentActive;\nexports.classComponentMount = classComponentMount;\nexports.classComponentUpdate = classComponentUpdate;\nexports.context = context;\nexports.createFiberNode = createFiberNode;\nexports.createHookNode = createHookNode;\nexports.currentRefreshHandler = currentRefreshHandler;\nexports.currentRenderDispatch = currentRenderDispatch;\nexports.currentTriggerFiber = currentTriggerFiber;\nexports.debugWithNode = debugWithNode;\nexports.defaultDispatchMount = defaultDispatchMount;\nexports.defaultDispatchUpdate = defaultDispatchUpdate;\nexports.defaultGenerateContextMap = defaultGenerateContextMap;\nexports.defaultGenerateEffectMap = defaultGenerateEffectMap;\nexports.defaultGenerateErrorBoundariesMap = defaultGenerateErrorBoundariesMap;\nexports.defaultGenerateScopeMap = defaultGenerateScopeMap;\nexports.defaultGenerateStrict = defaultGenerateStrict;\nexports.defaultGenerateStrictMap = defaultGenerateStrictMap;\nexports.defaultGenerateSuspenseMap = defaultGenerateSuspenseMap;\nexports.defaultGenerateUnmountMap = defaultGenerateUnmountMap;\nexports.defaultGetContextFiber = defaultGetContextFiber;\nexports.defaultGetContextFiber_New = defaultGetContextFiber_New;\nexports.defaultGetContextValue = defaultGetContextValue;\nexports.defaultResolveErrorBoundaries = defaultResolveErrorBoundaries;\nexports.defaultResolveSuspense = defaultResolveSuspense;\nexports.deleteEffect = deleteEffect;\nexports.devError = devError;\nexports.devErrorWithFiber = devErrorWithFiber;\nexports.devWarn = devWarn;\nexports.devWarnWithFiber = devWarnWithFiber;\nexports.effect = effect;\nexports.effectHookNode = effectHookNode;\nexports.emptyProps = emptyProps$1;\nexports.fiberToDispatchMap = fiberToDispatchMap;\nexports.generateFiberToList = generateFiberToList;\nexports.getCurrentDispatchFromFiber = getCurrentDispatchFromFiber;\nexports.getCurrentDispatchFromType = getCurrentDispatchFromType;\nexports.getCurrentFibersFromType = getCurrentFibersFromType;\nexports.getCurrentTypeFromRefresh = getCurrentTypeFromRefresh;\nexports.getElementName = getElementName;\nexports.getFiberTree = getFiberTree;\nexports.getFiberTreeWithFiber = getFiberTreeWithFiber;\nexports.getHookTree = getHookTree;\nexports.getTypeFromElement = getTypeFromElement;\nexports.getTypeFromElementNode = getTypeFromElementNode;\nexports.hmr = hmr;\nexports.initHMR = initHMR;\nexports.initialFiberNode = initialFiberNode;\nexports.insertionEffect = insertionEffect;\nexports.isCommentElement = isCommentElement;\nexports.isCommentEndElement = isCommentEndElement;\nexports.isCommentStartElement = isCommentStartElement;\nexports.isErrorBoundariesComponent = isErrorBoundariesComponent;\nexports.isErrorBoundariesInstance = isErrorBoundariesInstance;\nexports.layoutEffect = layoutEffect;\nexports.mount = mount;\nexports.mountAsync = mountAsync;\nexports.mountLoop = mountLoop;\nexports.nextWorkClassComponent = nextWorkClassComponent;\nexports.nextWorkCommon = nextWorkCommon;\nexports.nextWorkComponent = nextWorkComponent;\nexports.nextWorkConsumer = nextWorkConsumer;\nexports.nextWorkFunctionComponent = nextWorkFunctionComponent;\nexports.nextWorkLazy = nextWorkLazy;\nexports.nextWorkNormal = nextWorkNormal;\nexports.onceErrorWithKey = onceErrorWithKey;\nexports.onceErrorWithKeyAndFiber = onceErrorWithKeyAndFiber;\nexports.onceWarnWithKey = onceWarnWithKey;\nexports.onceWarnWithKeyAndFiber = onceWarnWithKeyAndFiber;\nexports.originalError = originalError;\nexports.originalWarn = originalWarn;\nexports.performToNextFiberWithAll = performToNextFiberWithAll;\nexports.performToNextFiberWithTrigger = performToNextFiberWithTrigger;\nexports.prepareUpdateAllDependence = prepareUpdateAllDependence;\nexports.processClassComponentUpdateQueue = processClassComponentUpdateQueue;\nexports.processFunctionComponentUpdateQueue = processFunctionComponentUpdateQueue;\nexports.processHookNode = processHookNode;\nexports.processLazy = processLazy;\nexports.processState = processState;\nexports.resetLogScope = resetLogScope;\nexports.runtimeNextWork = runtimeNextWork;\nexports.runtimeNextWorkDev = runtimeNextWorkDev;\nexports.safeCall = safeCall;\nexports.safeCallWithFiber = safeCallWithFiber;\nexports.safeCallWithSync = safeCallWithSync;\nexports.setLogScope = setLogScope;\nexports.setRefreshHandler = setRefreshHandler;\nexports.setRefreshTypeMap = setRefreshTypeMap;\nexports.syncComponentStateToFiber = syncComponentStateToFiber;\nexports.syncFiberStateToComponent = syncFiberStateToComponent;\nexports.syncFlushComponentQueue = syncFlushComponentQueue;\nexports.transformChildrenFiber = transformChildrenFiber;\nexports.triggerError = triggerError;\nexports.triggerRevert = triggerRevert;\nexports.triggerUnmount = triggerUnmount;\nexports.triggerUpdate = triggerUpdate;\nexports.typeToFibersMap = typeToFibersMap;\nexports.unmount = unmount;\nexports.unmountFiber = unmountFiber;\nexports.unmountFiberNode = unmountFiberNode;\nexports.unmountList = unmountList;\nexports.updateConcurrentWithAll = updateConcurrentWithAll;\nexports.updateConcurrentWithTrigger = updateConcurrentWithTrigger;\nexports.updateFiberNode = updateFiberNode;\nexports.updateHookNode = updateHookNode;\nexports.updateLoopConcurrentWithAll = updateLoopConcurrentWithAll;\nexports.updateLoopConcurrentWithTrigger = updateLoopConcurrentWithTrigger;\nexports.updateLoopSyncWithAll = updateLoopSyncWithAll;\nexports.updateLoopSyncWithTrigger = updateLoopSyncWithTrigger;\nexports.updateSyncWithAll = updateSyncWithAll;\nexports.updateSyncWithTrigger = updateSyncWithTrigger;\nexports.version = version;\n//# sourceMappingURL=index.production.js.map\n","\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","'use strict';\n\nvar merge = function (src, rest) {\r\n    return src | rest;\r\n};\r\nvar remove = function (src, rest) {\r\n    if (src & rest) {\r\n        return src ^ rest;\r\n    }\r\n    else {\r\n        return src;\r\n    }\r\n};\r\nvar include = function (src, rest) {\r\n    return src & rest;\r\n};\r\nvar exclude = function (src, rest) {\r\n    return !(src & rest);\r\n};\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nvar once = function (action) {\r\n    var called = false;\r\n    return function () {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        if (called)\r\n            return;\r\n        called = true;\r\n        if (typeof action === \"function\")\r\n            action.call.apply(action, __spreadArray([null], args, false));\r\n    };\r\n};\n\nvar TYPEKEY = \"$$typeof\";\r\nvar Element = Symbol.for(\"react.element\");\r\nvar Memo = Symbol.for(\"react.memo\");\r\nvar ForwardRef = Symbol.for(\"react.forward_ref\");\r\nvar Portal = Symbol.for(\"react.portal\");\r\nvar Fragment = Symbol.for(\"react.fragment\");\r\nvar Context = Symbol.for(\"react.context\");\r\nvar Provider = Symbol.for(\"react.provider\");\r\nvar Consumer = Symbol.for(\"react.consumer\");\r\nvar Lazy = Symbol.for(\"react.lazy\");\r\nvar Suspense = Symbol.for(\"react.suspense\");\r\nvar Strict = Symbol.for(\"react.strict_mode\");\r\n// TODO\r\nvar KeepLive = Symbol.for(\"react.keep_live\");\r\nvar Scope = Symbol.for(\"react.scope\");\r\nvar Comment = Symbol.for(\"react.comment\");\r\nvar Offscreen = Symbol.for(\"react.offscreen\");\r\nvar Profiler = Symbol.for(\"react.profiler\");\n\nfunction isObject(target) {\r\n    return typeof target === \"object\" && target !== null;\r\n}\r\nfunction isFunction(target) {\r\n    return typeof target === \"function\";\r\n}\r\nfunction isArray(target) {\r\n    return Array.isArray(target);\r\n}\r\nfunction isSymbol(target) {\r\n    return typeof target === \"symbol\";\r\n}\r\nfunction isString(target) {\r\n    return typeof target === \"string\";\r\n}\r\nfunction isInteger(target) {\r\n    return Number.isInteger(Number(target));\r\n}\r\nfunction isNumber(target) {\r\n    return typeof target === \"number\";\r\n}\r\nfunction isCollection(target) {\r\n    return target instanceof Map || target instanceof Set || target instanceof WeakMap || target instanceof WeakSet;\r\n}\n\nvar UniqueArray = /** @class */ (function () {\r\n    function UniqueArray() {\r\n        this.set = new Set();\r\n        this.arr = new Array();\r\n        this.length = 0;\r\n    }\r\n    UniqueArray.prototype.uniPop = function () {\r\n        var v = this.arr.pop();\r\n        this.set.delete(v);\r\n        this.length--;\r\n        return v;\r\n    };\r\n    UniqueArray.prototype.uniPush = function (v) {\r\n        if (this.set.has(v))\r\n            return 0;\r\n        this.set.add(v);\r\n        this.arr.push(v);\r\n        this.length++;\r\n    };\r\n    UniqueArray.prototype.uniShift = function () {\r\n        var v = this.arr.shift();\r\n        this.set.delete(v);\r\n        this.length--;\r\n        return v;\r\n    };\r\n    UniqueArray.prototype.uniUnshift = function (v) {\r\n        if (this.set.has(v))\r\n            return 0;\r\n        this.set.add(v);\r\n        this.arr.unshift(v);\r\n        this.length++;\r\n    };\r\n    UniqueArray.prototype.uniDelete = function (v) {\r\n        if (this.set.has(v)) {\r\n            this.set.delete(v);\r\n            this.arr = this.arr.filter(function (i) { return i !== v; });\r\n            this.length--;\r\n        }\r\n    };\r\n    UniqueArray.prototype.clear = function () {\r\n        this.length = 0;\r\n        this.set.clear();\r\n        this.arr.length = 0;\r\n    };\r\n    UniqueArray.prototype.getAll = function () {\r\n        return this.arr;\r\n    };\r\n    return UniqueArray;\r\n}());\n\nexports.HOOK_TYPE = void 0;\r\n(function (HOOK_TYPE) {\r\n    HOOK_TYPE[HOOK_TYPE[\"useId\"] = 0] = \"useId\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useRef\"] = 1] = \"useRef\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useMemo\"] = 2] = \"useMemo\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useState\"] = 3] = \"useState\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useSignal\"] = 4] = \"useSignal\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useEffect\"] = 5] = \"useEffect\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useContext\"] = 6] = \"useContext\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useReducer\"] = 7] = \"useReducer\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useCallback\"] = 8] = \"useCallback\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useTransition\"] = 9] = \"useTransition\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useDebugValue\"] = 10] = \"useDebugValue\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useLayoutEffect\"] = 11] = \"useLayoutEffect\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useDeferredValue\"] = 12] = \"useDeferredValue\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useInsertionEffect\"] = 13] = \"useInsertionEffect\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useImperativeHandle\"] = 14] = \"useImperativeHandle\";\r\n    HOOK_TYPE[HOOK_TYPE[\"useSyncExternalStore\"] = 15] = \"useSyncExternalStore\";\r\n})(exports.HOOK_TYPE || (exports.HOOK_TYPE = {}));\n\nexports.UpdateQueueType = void 0;\r\n(function (UpdateQueueType) {\r\n    UpdateQueueType[UpdateQueueType[\"hook\"] = 2] = \"hook\";\r\n    UpdateQueueType[UpdateQueueType[\"component\"] = 1] = \"component\";\r\n})(exports.UpdateQueueType || (exports.UpdateQueueType = {}));\n\nexports.STATE_TYPE = void 0;\r\n(function (STATE_TYPE) {\r\n    STATE_TYPE[STATE_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n    STATE_TYPE[STATE_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n    STATE_TYPE[STATE_TYPE[\"__stable__\"] = 2] = \"__stable__\";\r\n    STATE_TYPE[STATE_TYPE[\"__skippedConcurrent__\"] = 4] = \"__skippedConcurrent__\";\r\n    STATE_TYPE[STATE_TYPE[\"__skippedSync__\"] = 8] = \"__skippedSync__\";\r\n    STATE_TYPE[STATE_TYPE[\"__inherit__\"] = 16] = \"__inherit__\";\r\n    STATE_TYPE[STATE_TYPE[\"__triggerConcurrent__\"] = 32] = \"__triggerConcurrent__\";\r\n    STATE_TYPE[STATE_TYPE[\"__triggerSync__\"] = 64] = \"__triggerSync__\";\r\n    STATE_TYPE[STATE_TYPE[\"__unmount__\"] = 128] = \"__unmount__\";\r\n    STATE_TYPE[STATE_TYPE[\"__hmr__\"] = 256] = \"__hmr__\";\r\n})(exports.STATE_TYPE || (exports.STATE_TYPE = {}));\n\nexports.PATCH_TYPE = void 0;\r\n(function (PATCH_TYPE) {\r\n    PATCH_TYPE[PATCH_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__update__\"] = 2] = \"__update__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__append__\"] = 4] = \"__append__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__position__\"] = 8] = \"__position__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__context__\"] = 16] = \"__context__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__effect__\"] = 32] = \"__effect__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__layoutEffect__\"] = 64] = \"__layoutEffect__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__insertionEffect__\"] = 128] = \"__insertionEffect__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__unmount__\"] = 256] = \"__unmount__\";\r\n    PATCH_TYPE[PATCH_TYPE[\"__ref__\"] = 512] = \"__ref__\";\r\n})(exports.PATCH_TYPE || (exports.PATCH_TYPE = {}));\n\nexports.Effect_TYPE = void 0;\r\n(function (Effect_TYPE) {\r\n    Effect_TYPE[Effect_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n    Effect_TYPE[Effect_TYPE[\"__effect__\"] = 1] = \"__effect__\";\r\n    Effect_TYPE[Effect_TYPE[\"__unmount__\"] = 2] = \"__unmount__\";\r\n})(exports.Effect_TYPE || (exports.Effect_TYPE = {}));\n\nvar compareVersion = function (version1, version2) {\r\n    var compare = function (arr1, arr2) {\r\n        if (arr1.length && arr2.length) {\r\n            var v1 = arr1[0];\r\n            var v2 = arr2[0];\r\n            if (v1 > v2)\r\n                return true;\r\n            if (v2 > v1)\r\n                return false;\r\n            return compare(arr1.slice(1), arr2.slice(1));\r\n        }\r\n        if (arr1.length)\r\n            return true;\r\n        if (arr2.length)\r\n            return false;\r\n        return null;\r\n    };\r\n    return compare(version1.split(\".\").map(Number), version2.split(\".\").map(Number));\r\n};\n\nvar isNormalEquals = function (src, target, isSkipKey) {\r\n    var isEquals = Object.is(src, target);\r\n    if (isEquals)\r\n        return true;\r\n    var hasSkipKeyFunction = typeof isSkipKey === \"function\";\r\n    if (typeof src === \"object\" && typeof target === \"object\" && src !== null && target !== null) {\r\n        var srcKeys = Object.keys(src);\r\n        var targetKeys = Object.keys(target);\r\n        if (srcKeys.length !== targetKeys.length)\r\n            return false;\r\n        var res = true;\r\n        if (hasSkipKeyFunction) {\r\n            for (var key in src) {\r\n                if (isSkipKey(key)) {\r\n                    continue;\r\n                }\r\n                else {\r\n                    res = res && Object.is(src[key], target[key]);\r\n                }\r\n                if (!res)\r\n                    return res;\r\n            }\r\n        }\r\n        else {\r\n            for (var key in src) {\r\n                res = res && Object.is(src[key], target[key]);\r\n                if (!res)\r\n                    return res;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    return false;\r\n};\r\nvar isArrayEquals = function (src, target) {\r\n    var isEquals = Object.is(src, target);\r\n    if (isEquals)\r\n        return true;\r\n    if (Array.isArray(src) && Array.isArray(target) && src.length === target.length) {\r\n        var re = true;\r\n        for (var key in src) {\r\n            re = re && Object.is(src[key], target[key]);\r\n            if (!re)\r\n                return re;\r\n        }\r\n        return re;\r\n    }\r\n    return false;\r\n};\n\nvar ListTreeNode = /** @class */ (function () {\r\n    function ListTreeNode(value) {\r\n        this.prev = null;\r\n        this.next = null;\r\n        this.value = value;\r\n    }\r\n    return ListTreeNode;\r\n}());\r\nvar ListTree = /** @class */ (function () {\r\n    function ListTree() {\r\n        this.length = 0;\r\n        this.head = null;\r\n        this.foot = null;\r\n    }\r\n    ListTree.prototype.push = function (node) {\r\n        var listNode = new ListTreeNode(node);\r\n        this.length++;\r\n        if (!this.foot) {\r\n            this.head = listNode;\r\n            this.foot = listNode;\r\n        }\r\n        else {\r\n            this.foot.next = listNode;\r\n            listNode.prev = this.foot;\r\n            this.foot = listNode;\r\n        }\r\n    };\r\n    ListTree.prototype.pop = function () {\r\n        var foot = this.foot;\r\n        if (foot) {\r\n            this.delete(foot);\r\n            return foot.value;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ListTree.prototype.unshift = function (node) {\r\n        var listNode = new ListTreeNode(node);\r\n        this.length++;\r\n        if (!this.head) {\r\n            this.head = listNode;\r\n            this.foot = listNode;\r\n        }\r\n        else {\r\n            this.head.prev = listNode;\r\n            listNode.next = this.head;\r\n            this.head = listNode;\r\n        }\r\n    };\r\n    ListTree.prototype.shift = function () {\r\n        var head = this.head;\r\n        if (head) {\r\n            this.delete(head);\r\n            return head.value;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    ListTree.prototype.pickHead = function () {\r\n        return this.head.value;\r\n    };\r\n    ListTree.prototype.pickFoot = function () {\r\n        return this.foot.value;\r\n    };\r\n    ListTree.prototype.listToFoot = function (action) {\r\n        var node = this.head;\r\n        while (node) {\r\n            action(node.value);\r\n            node = node.next;\r\n        }\r\n    };\r\n    ListTree.prototype.listToHead = function (action) {\r\n        var node = this.foot;\r\n        while (node) {\r\n            action(node.value);\r\n            node = node.prev;\r\n        }\r\n    };\r\n    ListTree.prototype.toArray = function () {\r\n        var re = [];\r\n        this.listToFoot(function (v) { return re.push(v); });\r\n        return re;\r\n    };\r\n    ListTree.prototype.delete = function (node) {\r\n        if (this.head === node) {\r\n            var next = node.next;\r\n            node.next = null;\r\n            if (next) {\r\n                this.head = next;\r\n                next.prev = null;\r\n            }\r\n            else {\r\n                this.head = null;\r\n                this.foot = null;\r\n            }\r\n            this.length--;\r\n        }\r\n        else if (this.foot === node) {\r\n            var prev = node.prev;\r\n            node.prev = null;\r\n            if (prev) {\r\n                this.foot = prev;\r\n                prev.next = null;\r\n            }\r\n            else {\r\n                this.head = null;\r\n                this.foot = null;\r\n            }\r\n            this.length--;\r\n        }\r\n        else if (this.hasNode(node)) {\r\n            var prev = node.prev;\r\n            var next = node.next;\r\n            node.prev = null;\r\n            node.next = null;\r\n            prev.next = next;\r\n            next.prev = prev;\r\n            this.length--;\r\n        }\r\n    };\r\n    ListTree.prototype.size = function () {\r\n        return this.length;\r\n    };\r\n    ListTree.prototype.hasNode = function (node) {\r\n        var listNode = this.head;\r\n        while (listNode) {\r\n            if (Object.is(listNode, node))\r\n                return true;\r\n            listNode = listNode.next;\r\n        }\r\n        return false;\r\n    };\r\n    ListTree.prototype.hasValue = function (node) {\r\n        var listNode = this.head;\r\n        while (listNode) {\r\n            if (Object.is(listNode.value, node))\r\n                return true;\r\n            listNode = listNode.next;\r\n        }\r\n        return false;\r\n    };\r\n    ListTree.prototype.some = function (iterator) {\r\n        var re = false;\r\n        this.listToFoot(function (node) {\r\n            re = re || iterator(node);\r\n        });\r\n        return re;\r\n    };\r\n    ListTree.prototype.every = function (iterator) {\r\n        var re = true;\r\n        this.listToFoot(function (node) {\r\n            re = re && iterator(node);\r\n        });\r\n        return re;\r\n    };\r\n    ListTree.prototype.concat = function (list) {\r\n        var _this = this;\r\n        list.listToFoot(function (node) { return _this.push(node); });\r\n    };\r\n    ListTree.prototype.clone = function () {\r\n        var newList = new ListTree();\r\n        this.listToFoot(function (v) { return newList.push(v); });\r\n        return newList;\r\n    };\r\n    return ListTree;\r\n}());\n\nexports.Comment = Comment;\nexports.Consumer = Consumer;\nexports.Context = Context;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.KeepLive = KeepLive;\nexports.Lazy = Lazy;\nexports.ListTree = ListTree;\nexports.ListTreeNode = ListTreeNode;\nexports.Memo = Memo;\nexports.Offscreen = Offscreen;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.Provider = Provider;\nexports.Scope = Scope;\nexports.Strict = Strict;\nexports.Suspense = Suspense;\nexports.TYPEKEY = TYPEKEY;\nexports.UniqueArray = UniqueArray;\nexports.compareVersion = compareVersion;\nexports.exclude = exclude;\nexports.include = include;\nexports.isArray = isArray;\nexports.isArrayEquals = isArrayEquals;\nexports.isCollection = isCollection;\nexports.isFunction = isFunction;\nexports.isInteger = isInteger;\nexports.isNormalEquals = isNormalEquals;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isString = isString;\nexports.isSymbol = isSymbol;\nexports.merge = merge;\nexports.once = once;\nexports.remove = remove;\n//# sourceMappingURL=index.production.js.map\n","\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","'use strict';\n\nvar react = require('@my-react/react');\n\nvar myreactShared = {exports: {}};\n\nvar index_production = {};\n\nvar hasRequiredIndex_production;\n\nfunction requireIndex_production () {\n\tif (hasRequiredIndex_production) return index_production;\n\thasRequiredIndex_production = 1;\n\t(function (exports) {\n\n\t\tvar merge = function (src, rest) {\r\n\t\t    return src | rest;\r\n\t\t};\r\n\t\tvar remove = function (src, rest) {\r\n\t\t    if (src & rest) {\r\n\t\t        return src ^ rest;\r\n\t\t    }\r\n\t\t    else {\r\n\t\t        return src;\r\n\t\t    }\r\n\t\t};\r\n\t\tvar include = function (src, rest) {\r\n\t\t    return src & rest;\r\n\t\t};\r\n\t\tvar exclude = function (src, rest) {\r\n\t\t    return !(src & rest);\r\n\t\t};\n\n\t\t/******************************************************************************\r\n\t\tCopyright (c) Microsoft Corporation.\r\n\r\n\t\tPermission to use, copy, modify, and/or distribute this software for any\r\n\t\tpurpose with or without fee is hereby granted.\r\n\r\n\t\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n\t\tREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n\t\tAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n\t\tINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n\t\tLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n\t\tOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n\t\tPERFORMANCE OF THIS SOFTWARE.\r\n\t\t***************************************************************************** */\r\n\t\t/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\n\t\tfunction __spreadArray(to, from, pack) {\r\n\t\t    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n\t\t        if (ar || !(i in from)) {\r\n\t\t            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n\t\t            ar[i] = from[i];\r\n\t\t        }\r\n\t\t    }\r\n\t\t    return to.concat(ar || Array.prototype.slice.call(from));\r\n\t\t}\r\n\r\n\t\ttypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n\t\t    var e = new Error(message);\r\n\t\t    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n\t\t};\n\n\t\tvar once = function (action) {\r\n\t\t    var called = false;\r\n\t\t    return function () {\r\n\t\t        var args = [];\r\n\t\t        for (var _i = 0; _i < arguments.length; _i++) {\r\n\t\t            args[_i] = arguments[_i];\r\n\t\t        }\r\n\t\t        if (called)\r\n\t\t            return;\r\n\t\t        called = true;\r\n\t\t        if (typeof action === \"function\")\r\n\t\t            action.call.apply(action, __spreadArray([null], args, false));\r\n\t\t    };\r\n\t\t};\n\n\t\tvar TYPEKEY = \"$$typeof\";\r\n\t\tvar Element = Symbol.for(\"react.element\");\r\n\t\tvar Memo = Symbol.for(\"react.memo\");\r\n\t\tvar ForwardRef = Symbol.for(\"react.forward_ref\");\r\n\t\tvar Portal = Symbol.for(\"react.portal\");\r\n\t\tvar Fragment = Symbol.for(\"react.fragment\");\r\n\t\tvar Context = Symbol.for(\"react.context\");\r\n\t\tvar Provider = Symbol.for(\"react.provider\");\r\n\t\tvar Consumer = Symbol.for(\"react.consumer\");\r\n\t\tvar Lazy = Symbol.for(\"react.lazy\");\r\n\t\tvar Suspense = Symbol.for(\"react.suspense\");\r\n\t\tvar Strict = Symbol.for(\"react.strict_mode\");\r\n\t\t// TODO\r\n\t\tvar KeepLive = Symbol.for(\"react.keep_live\");\r\n\t\tvar Scope = Symbol.for(\"react.scope\");\r\n\t\tvar Comment = Symbol.for(\"react.comment\");\r\n\t\tvar Offscreen = Symbol.for(\"react.offscreen\");\r\n\t\tvar Profiler = Symbol.for(\"react.profiler\");\n\n\t\tfunction isObject(target) {\r\n\t\t    return typeof target === \"object\" && target !== null;\r\n\t\t}\r\n\t\tfunction isFunction(target) {\r\n\t\t    return typeof target === \"function\";\r\n\t\t}\r\n\t\tfunction isArray(target) {\r\n\t\t    return Array.isArray(target);\r\n\t\t}\r\n\t\tfunction isSymbol(target) {\r\n\t\t    return typeof target === \"symbol\";\r\n\t\t}\r\n\t\tfunction isString(target) {\r\n\t\t    return typeof target === \"string\";\r\n\t\t}\r\n\t\tfunction isInteger(target) {\r\n\t\t    return Number.isInteger(Number(target));\r\n\t\t}\r\n\t\tfunction isNumber(target) {\r\n\t\t    return typeof target === \"number\";\r\n\t\t}\r\n\t\tfunction isCollection(target) {\r\n\t\t    return target instanceof Map || target instanceof Set || target instanceof WeakMap || target instanceof WeakSet;\r\n\t\t}\n\n\t\tvar UniqueArray = /** @class */ (function () {\r\n\t\t    function UniqueArray() {\r\n\t\t        this.set = new Set();\r\n\t\t        this.arr = new Array();\r\n\t\t        this.length = 0;\r\n\t\t    }\r\n\t\t    UniqueArray.prototype.uniPop = function () {\r\n\t\t        var v = this.arr.pop();\r\n\t\t        this.set.delete(v);\r\n\t\t        this.length--;\r\n\t\t        return v;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniPush = function (v) {\r\n\t\t        if (this.set.has(v))\r\n\t\t            return 0;\r\n\t\t        this.set.add(v);\r\n\t\t        this.arr.push(v);\r\n\t\t        this.length++;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniShift = function () {\r\n\t\t        var v = this.arr.shift();\r\n\t\t        this.set.delete(v);\r\n\t\t        this.length--;\r\n\t\t        return v;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniUnshift = function (v) {\r\n\t\t        if (this.set.has(v))\r\n\t\t            return 0;\r\n\t\t        this.set.add(v);\r\n\t\t        this.arr.unshift(v);\r\n\t\t        this.length++;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.uniDelete = function (v) {\r\n\t\t        if (this.set.has(v)) {\r\n\t\t            this.set.delete(v);\r\n\t\t            this.arr = this.arr.filter(function (i) { return i !== v; });\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.clear = function () {\r\n\t\t        this.length = 0;\r\n\t\t        this.set.clear();\r\n\t\t        this.arr.length = 0;\r\n\t\t    };\r\n\t\t    UniqueArray.prototype.getAll = function () {\r\n\t\t        return this.arr;\r\n\t\t    };\r\n\t\t    return UniqueArray;\r\n\t\t}());\n\n\t\texports.HOOK_TYPE = void 0;\r\n\t\t(function (HOOK_TYPE) {\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useId\"] = 0] = \"useId\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useRef\"] = 1] = \"useRef\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useMemo\"] = 2] = \"useMemo\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useState\"] = 3] = \"useState\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useSignal\"] = 4] = \"useSignal\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useEffect\"] = 5] = \"useEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useContext\"] = 6] = \"useContext\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useReducer\"] = 7] = \"useReducer\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useCallback\"] = 8] = \"useCallback\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useTransition\"] = 9] = \"useTransition\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useDebugValue\"] = 10] = \"useDebugValue\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useLayoutEffect\"] = 11] = \"useLayoutEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useDeferredValue\"] = 12] = \"useDeferredValue\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useInsertionEffect\"] = 13] = \"useInsertionEffect\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useImperativeHandle\"] = 14] = \"useImperativeHandle\";\r\n\t\t    HOOK_TYPE[HOOK_TYPE[\"useSyncExternalStore\"] = 15] = \"useSyncExternalStore\";\r\n\t\t})(exports.HOOK_TYPE || (exports.HOOK_TYPE = {}));\n\n\t\texports.UpdateQueueType = void 0;\r\n\t\t(function (UpdateQueueType) {\r\n\t\t    UpdateQueueType[UpdateQueueType[\"hook\"] = 2] = \"hook\";\r\n\t\t    UpdateQueueType[UpdateQueueType[\"component\"] = 1] = \"component\";\r\n\t\t})(exports.UpdateQueueType || (exports.UpdateQueueType = {}));\n\n\t\texports.STATE_TYPE = void 0;\r\n\t\t(function (STATE_TYPE) {\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__stable__\"] = 2] = \"__stable__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__skippedConcurrent__\"] = 4] = \"__skippedConcurrent__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__skippedSync__\"] = 8] = \"__skippedSync__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__inherit__\"] = 16] = \"__inherit__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__triggerConcurrent__\"] = 32] = \"__triggerConcurrent__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__triggerSync__\"] = 64] = \"__triggerSync__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__unmount__\"] = 128] = \"__unmount__\";\r\n\t\t    STATE_TYPE[STATE_TYPE[\"__hmr__\"] = 256] = \"__hmr__\";\r\n\t\t})(exports.STATE_TYPE || (exports.STATE_TYPE = {}));\n\n\t\texports.PATCH_TYPE = void 0;\r\n\t\t(function (PATCH_TYPE) {\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__create__\"] = 1] = \"__create__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__update__\"] = 2] = \"__update__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__append__\"] = 4] = \"__append__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__position__\"] = 8] = \"__position__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__context__\"] = 16] = \"__context__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__effect__\"] = 32] = \"__effect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__layoutEffect__\"] = 64] = \"__layoutEffect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__insertionEffect__\"] = 128] = \"__insertionEffect__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__unmount__\"] = 256] = \"__unmount__\";\r\n\t\t    PATCH_TYPE[PATCH_TYPE[\"__ref__\"] = 512] = \"__ref__\";\r\n\t\t})(exports.PATCH_TYPE || (exports.PATCH_TYPE = {}));\n\n\t\texports.Effect_TYPE = void 0;\r\n\t\t(function (Effect_TYPE) {\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__initial__\"] = 0] = \"__initial__\";\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__effect__\"] = 1] = \"__effect__\";\r\n\t\t    Effect_TYPE[Effect_TYPE[\"__unmount__\"] = 2] = \"__unmount__\";\r\n\t\t})(exports.Effect_TYPE || (exports.Effect_TYPE = {}));\n\n\t\tvar compareVersion = function (version1, version2) {\r\n\t\t    var compare = function (arr1, arr2) {\r\n\t\t        if (arr1.length && arr2.length) {\r\n\t\t            var v1 = arr1[0];\r\n\t\t            var v2 = arr2[0];\r\n\t\t            if (v1 > v2)\r\n\t\t                return true;\r\n\t\t            if (v2 > v1)\r\n\t\t                return false;\r\n\t\t            return compare(arr1.slice(1), arr2.slice(1));\r\n\t\t        }\r\n\t\t        if (arr1.length)\r\n\t\t            return true;\r\n\t\t        if (arr2.length)\r\n\t\t            return false;\r\n\t\t        return null;\r\n\t\t    };\r\n\t\t    return compare(version1.split(\".\").map(Number), version2.split(\".\").map(Number));\r\n\t\t};\n\n\t\tvar isNormalEquals = function (src, target, isSkipKey) {\r\n\t\t    var isEquals = Object.is(src, target);\r\n\t\t    if (isEquals)\r\n\t\t        return true;\r\n\t\t    var hasSkipKeyFunction = typeof isSkipKey === \"function\";\r\n\t\t    if (typeof src === \"object\" && typeof target === \"object\" && src !== null && target !== null) {\r\n\t\t        var srcKeys = Object.keys(src);\r\n\t\t        var targetKeys = Object.keys(target);\r\n\t\t        if (srcKeys.length !== targetKeys.length)\r\n\t\t            return false;\r\n\t\t        var res = true;\r\n\t\t        if (hasSkipKeyFunction) {\r\n\t\t            for (var key in src) {\r\n\t\t                if (isSkipKey(key)) {\r\n\t\t                    continue;\r\n\t\t                }\r\n\t\t                else {\r\n\t\t                    res = res && Object.is(src[key], target[key]);\r\n\t\t                }\r\n\t\t                if (!res)\r\n\t\t                    return res;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            for (var key in src) {\r\n\t\t                res = res && Object.is(src[key], target[key]);\r\n\t\t                if (!res)\r\n\t\t                    return res;\r\n\t\t            }\r\n\t\t        }\r\n\t\t        return res;\r\n\t\t    }\r\n\t\t    return false;\r\n\t\t};\r\n\t\tvar isArrayEquals = function (src, target) {\r\n\t\t    var isEquals = Object.is(src, target);\r\n\t\t    if (isEquals)\r\n\t\t        return true;\r\n\t\t    if (Array.isArray(src) && Array.isArray(target) && src.length === target.length) {\r\n\t\t        var re = true;\r\n\t\t        for (var key in src) {\r\n\t\t            re = re && Object.is(src[key], target[key]);\r\n\t\t            if (!re)\r\n\t\t                return re;\r\n\t\t        }\r\n\t\t        return re;\r\n\t\t    }\r\n\t\t    return false;\r\n\t\t};\n\n\t\tvar ListTreeNode = /** @class */ (function () {\r\n\t\t    function ListTreeNode(value) {\r\n\t\t        this.prev = null;\r\n\t\t        this.next = null;\r\n\t\t        this.value = value;\r\n\t\t    }\r\n\t\t    return ListTreeNode;\r\n\t\t}());\r\n\t\tvar ListTree = /** @class */ (function () {\r\n\t\t    function ListTree() {\r\n\t\t        this.length = 0;\r\n\t\t        this.head = null;\r\n\t\t        this.foot = null;\r\n\t\t    }\r\n\t\t    ListTree.prototype.push = function (node) {\r\n\t\t        var listNode = new ListTreeNode(node);\r\n\t\t        this.length++;\r\n\t\t        if (!this.foot) {\r\n\t\t            this.head = listNode;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            this.foot.next = listNode;\r\n\t\t            listNode.prev = this.foot;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.pop = function () {\r\n\t\t        var foot = this.foot;\r\n\t\t        if (foot) {\r\n\t\t            this.delete(foot);\r\n\t\t            return foot.value;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.unshift = function (node) {\r\n\t\t        var listNode = new ListTreeNode(node);\r\n\t\t        this.length++;\r\n\t\t        if (!this.head) {\r\n\t\t            this.head = listNode;\r\n\t\t            this.foot = listNode;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            this.head.prev = listNode;\r\n\t\t            listNode.next = this.head;\r\n\t\t            this.head = listNode;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.shift = function () {\r\n\t\t        var head = this.head;\r\n\t\t        if (head) {\r\n\t\t            this.delete(head);\r\n\t\t            return head.value;\r\n\t\t        }\r\n\t\t        else {\r\n\t\t            return null;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.pickHead = function () {\r\n\t\t        return this.head.value;\r\n\t\t    };\r\n\t\t    ListTree.prototype.pickFoot = function () {\r\n\t\t        return this.foot.value;\r\n\t\t    };\r\n\t\t    ListTree.prototype.listToFoot = function (action) {\r\n\t\t        var node = this.head;\r\n\t\t        while (node) {\r\n\t\t            action(node.value);\r\n\t\t            node = node.next;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.listToHead = function (action) {\r\n\t\t        var node = this.foot;\r\n\t\t        while (node) {\r\n\t\t            action(node.value);\r\n\t\t            node = node.prev;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.toArray = function () {\r\n\t\t        var re = [];\r\n\t\t        this.listToFoot(function (v) { return re.push(v); });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.delete = function (node) {\r\n\t\t        if (this.head === node) {\r\n\t\t            var next = node.next;\r\n\t\t            node.next = null;\r\n\t\t            if (next) {\r\n\t\t                this.head = next;\r\n\t\t                next.prev = null;\r\n\t\t            }\r\n\t\t            else {\r\n\t\t                this.head = null;\r\n\t\t                this.foot = null;\r\n\t\t            }\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t        else if (this.foot === node) {\r\n\t\t            var prev = node.prev;\r\n\t\t            node.prev = null;\r\n\t\t            if (prev) {\r\n\t\t                this.foot = prev;\r\n\t\t                prev.next = null;\r\n\t\t            }\r\n\t\t            else {\r\n\t\t                this.head = null;\r\n\t\t                this.foot = null;\r\n\t\t            }\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t        else if (this.hasNode(node)) {\r\n\t\t            var prev = node.prev;\r\n\t\t            var next = node.next;\r\n\t\t            node.prev = null;\r\n\t\t            node.next = null;\r\n\t\t            prev.next = next;\r\n\t\t            next.prev = prev;\r\n\t\t            this.length--;\r\n\t\t        }\r\n\t\t    };\r\n\t\t    ListTree.prototype.size = function () {\r\n\t\t        return this.length;\r\n\t\t    };\r\n\t\t    ListTree.prototype.hasNode = function (node) {\r\n\t\t        var listNode = this.head;\r\n\t\t        while (listNode) {\r\n\t\t            if (Object.is(listNode, node))\r\n\t\t                return true;\r\n\t\t            listNode = listNode.next;\r\n\t\t        }\r\n\t\t        return false;\r\n\t\t    };\r\n\t\t    ListTree.prototype.hasValue = function (node) {\r\n\t\t        var listNode = this.head;\r\n\t\t        while (listNode) {\r\n\t\t            if (Object.is(listNode.value, node))\r\n\t\t                return true;\r\n\t\t            listNode = listNode.next;\r\n\t\t        }\r\n\t\t        return false;\r\n\t\t    };\r\n\t\t    ListTree.prototype.some = function (iterator) {\r\n\t\t        var re = false;\r\n\t\t        this.listToFoot(function (node) {\r\n\t\t            re = re || iterator(node);\r\n\t\t        });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.every = function (iterator) {\r\n\t\t        var re = true;\r\n\t\t        this.listToFoot(function (node) {\r\n\t\t            re = re && iterator(node);\r\n\t\t        });\r\n\t\t        return re;\r\n\t\t    };\r\n\t\t    ListTree.prototype.concat = function (list) {\r\n\t\t        var _this = this;\r\n\t\t        list.listToFoot(function (node) { return _this.push(node); });\r\n\t\t    };\r\n\t\t    ListTree.prototype.clone = function () {\r\n\t\t        var newList = new ListTree();\r\n\t\t        this.listToFoot(function (v) { return newList.push(v); });\r\n\t\t        return newList;\r\n\t\t    };\r\n\t\t    return ListTree;\r\n\t\t}());\n\n\t\texports.Comment = Comment;\n\t\texports.Consumer = Consumer;\n\t\texports.Context = Context;\n\t\texports.Element = Element;\n\t\texports.ForwardRef = ForwardRef;\n\t\texports.Fragment = Fragment;\n\t\texports.KeepLive = KeepLive;\n\t\texports.Lazy = Lazy;\n\t\texports.ListTree = ListTree;\n\t\texports.ListTreeNode = ListTreeNode;\n\t\texports.Memo = Memo;\n\t\texports.Offscreen = Offscreen;\n\t\texports.Portal = Portal;\n\t\texports.Profiler = Profiler;\n\t\texports.Provider = Provider;\n\t\texports.Scope = Scope;\n\t\texports.Strict = Strict;\n\t\texports.Suspense = Suspense;\n\t\texports.TYPEKEY = TYPEKEY;\n\t\texports.UniqueArray = UniqueArray;\n\t\texports.compareVersion = compareVersion;\n\t\texports.exclude = exclude;\n\t\texports.include = include;\n\t\texports.isArray = isArray;\n\t\texports.isArrayEquals = isArrayEquals;\n\t\texports.isCollection = isCollection;\n\t\texports.isFunction = isFunction;\n\t\texports.isInteger = isInteger;\n\t\texports.isNormalEquals = isNormalEquals;\n\t\texports.isNumber = isNumber;\n\t\texports.isObject = isObject;\n\t\texports.isString = isString;\n\t\texports.isSymbol = isSymbol;\n\t\texports.merge = merge;\n\t\texports.once = once;\n\t\texports.remove = remove;\n\t\t\n\t} (index_production));\n\treturn index_production;\n}\n\n{\n  myreactShared.exports = requireIndex_production();\n}\n\nvar myreactSharedExports = myreactShared.exports;\n\nvar currentRenderPlatform = react.__my_react_internal__.currentRenderPlatform, currentComponentFiber = react.__my_react_internal__.currentComponentFiber;\r\nvar enableOptimizeTreeLog = react.__my_react_shared__.enableOptimizeTreeLog;\r\nfunction isValidElement(element) {\r\n    return typeof element === \"object\" && !Array.isArray(element) && (element === null || element === void 0 ? void 0 : element[myreactSharedExports.TYPEKEY]) === myreactSharedExports.Element;\r\n}\r\nvar keysMap = {};\r\nvar checkValidKey = function (children) {\r\n    var obj = {};\r\n    var renderPlatform = currentRenderPlatform.current;\r\n    var currentFiber = currentComponentFiber.current;\r\n    var validElement = children.filter(function (c) { return isValidElement(c); });\r\n    if (validElement.length) {\r\n        validElement.forEach(function (c) {\r\n            if (!c._store[\"validKey\"]) {\r\n                if (typeof c.key === \"string\") {\r\n                    if (obj[c.key]) {\r\n                        var renderTree = renderPlatform.getFiberTree(currentFiber);\r\n                        if (!keysMap[renderTree])\r\n                            console.warn(\"[@my-react/react] array child have duplicate key \".concat(c.key));\r\n                        keysMap[renderTree] = true;\r\n                    }\r\n                    obj[c.key] = true;\r\n                }\r\n                else {\r\n                    var renderTree = renderPlatform.getFiberTree(currentFiber);\r\n                    if (!keysMap[renderTree])\r\n                        console.warn(\"[@my-react/react] each array child must have a unique key props\");\r\n                    keysMap[renderTree] = true;\r\n                }\r\n                c._store[\"validKey\"] = true;\r\n            }\r\n        });\r\n    }\r\n};\r\n/**\r\n * @internal\r\n */\r\nvar checkSingleChildrenKey = function (children) {\r\n    var last = enableOptimizeTreeLog.current;\r\n    enableOptimizeTreeLog.current = false;\r\n    if (Array.isArray(children)) {\r\n        checkValidKey(children);\r\n    }\r\n    else {\r\n        if (isValidElement(children))\r\n            children._store[\"validKey\"] = true;\r\n    }\r\n    enableOptimizeTreeLog.current = last;\r\n};\r\n/**\r\n * @internal\r\n */\r\nvar checkValidElement = function (element) {\r\n    var _a, _b, _c, _d;\r\n    var last = enableOptimizeTreeLog.current;\r\n    enableOptimizeTreeLog.current = false;\r\n    if (isValidElement(element)) {\r\n        if (!element._store[\"validType\"]) {\r\n            var rawType = element.type;\r\n            if (element.ref && typeof element.ref !== \"object\" && typeof element.ref !== \"function\") {\r\n                console.error(\"[@my-react/react] invalid ref type, ref should be a function or a object like {current:  any}, but got a \".concat(element.ref));\r\n            }\r\n            if (element.key && typeof element.key !== \"string\") {\r\n                console.error(\"[@my-react/react] invalid key type, key should be a string, but got a \".concat(element.key));\r\n            }\r\n            if (typeof rawType === \"object\") {\r\n                var typedRawType = rawType;\r\n                // check <Context.Consumer />\r\n                if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Consumer) {\r\n                    var props = element.props;\r\n                    for (var key in props) {\r\n                        if (key !== \"key\" && key !== \"children\" && !key.startsWith(\"_\")) {\r\n                            console.warn(\"[@my-react/react] <Context.Consumer /> element only support 'key' / 'children' props, but got \".concat(key));\r\n                        }\r\n                    }\r\n                    if (!(props === null || props === void 0 ? void 0 : props.children)) {\r\n                        throw new Error(\"[@my-react/react] <Context.Consumer /> need a render function as children, this is unsupported usage\");\r\n                    }\r\n                    if (typeof props.children !== \"function\") {\r\n                        throw new Error(\"[@my-react/react] <Context.Consumer /> expect a render function as children but got \".concat(props.children, \", this is unsupported usage\"));\r\n                    }\r\n                    if ((_b = (_a = props.children) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b.isMyReactComponent) {\r\n                        throw new Error(\"[@my-react/react] invalid render type for <Context.Consumer />, expect a render function but got a class element \".concat(props.children));\r\n                    }\r\n                }\r\n                // check <Context />\r\n                else if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Context) {\r\n                    throw new Error(\"[@my-react/react] look like you are using Context like <Context />, this is unsupported usage, please use <Context.Provider /> or <Context.Consumer />\");\r\n                }\r\n                // check <Context.Provider />\r\n                else if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Provider) {\r\n                    var props = element.props;\r\n                    for (var key in props) {\r\n                        if (key !== \"key\" && key !== \"children\" && key !== \"value\" && !key.startsWith(\"_\")) {\r\n                            console.warn(\"[@my-react/react] <Context.Provider /> element only support 'key' / 'value' / 'children' props, but got \".concat(key));\r\n                        }\r\n                    }\r\n                }\r\n                // check forwardRef()\r\n                else if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.ForwardRef) {\r\n                    var CurrentTypedRawType = rawType;\r\n                    var targetRender = CurrentTypedRawType.render;\r\n                    if (typeof targetRender !== \"function\") {\r\n                        throw new Error(\"[@my-react/react] 'forwardRef()' expect a render function but got \".concat(targetRender, \", this is unsupported usage\"));\r\n                    }\r\n                    if ((_c = targetRender.prototype) === null || _c === void 0 ? void 0 : _c.isMyReactComponent) {\r\n                        throw new Error(\"[@my-react/react] invalid render type for 'forwardRef()', expect a render function, but got a element class \".concat(targetRender));\r\n                    }\r\n                }\r\n                // check memo()\r\n                else if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Memo) {\r\n                    var CurrentTypedRawType = rawType;\r\n                    if (typeof CurrentTypedRawType.render === \"object\") {\r\n                        if (isValidElement(CurrentTypedRawType.render)) {\r\n                            throw new Error(\"[@my-react/react] look like you are using memo like memo(<Foo />), this is unsupported usage, please change to memo(Foo)\");\r\n                        }\r\n                        if (CurrentTypedRawType.render[myreactSharedExports.TYPEKEY] === myreactSharedExports.Memo) {\r\n                            throw new Error(\"[@my-react/react] look like you are using memo like memo(memo(Foo)), this is unsupported usage, please do not wrapper memo more than once\");\r\n                        }\r\n                        if (CurrentTypedRawType.render[myreactSharedExports.TYPEKEY] === myreactSharedExports.Lazy) {\r\n                            throw new Error(\"[@my-react/react] look like you are using memo like memo(lazy(loader fun)), this is unsupported usage\");\r\n                        }\r\n                        if (CurrentTypedRawType.render[myreactSharedExports.TYPEKEY] === myreactSharedExports.Context) {\r\n                            throw new Error(\"[@my-react/react] look like you are using memo like memo(Context), this is unsupported usage\");\r\n                        }\r\n                    }\r\n                    else if (typeof CurrentTypedRawType.render !== \"function\") {\r\n                        throw new Error(\"[@my-react/react] invalid render type for 'memo()', expect a render function or a render object, but got a \".concat(CurrentTypedRawType.render));\r\n                    }\r\n                }\r\n                // check lazy()\r\n                else if (typedRawType[myreactSharedExports.TYPEKEY] === myreactSharedExports.Lazy) {\r\n                    var CurrentTypedRawType = rawType;\r\n                    var targetRender = CurrentTypedRawType.loader;\r\n                    if (typeof targetRender !== \"function\") {\r\n                        throw new Error(\"[@my-react/react] invalid argument for lazy(loader), the loader expect a function, but got a \".concat(CurrentTypedRawType.loader));\r\n                    }\r\n                    if ((_d = targetRender.prototype) === null || _d === void 0 ? void 0 : _d.isMyReactComponent) {\r\n                        throw new Error(\"[@my-react/react] invalid argument for lazy(loader), the loader expect a function, but got a element class \".concat(CurrentTypedRawType.loader));\r\n                    }\r\n                }\r\n                // check invalid object element\r\n                else {\r\n                    throw new Error(\"[@my-react/react] invalid object element type, current type is: \".concat(typedRawType));\r\n                }\r\n            }\r\n            else {\r\n                if (rawType === myreactSharedExports.Fragment) {\r\n                    for (var key in element.props) {\r\n                        if (key !== \"key\" && key !== \"children\" && key !== \"wrap\" && !key.startsWith(\"_\")) {\r\n                            console.warn(\"[@my-react/react] <Fragment /> element only support 'key' / 'children' props, but got \".concat(key));\r\n                        }\r\n                    }\r\n                }\r\n                if (rawType === myreactSharedExports.Suspense) {\r\n                    for (var key in element.props) {\r\n                        if (key !== \"key\" && key !== \"children\" && key !== \"fallback\" && !key.startsWith(\"_\")) {\r\n                            console.warn(\"[@my-react/react] <Suspense /> element only support 'key' / 'children' / 'fallback' props, but got \".concat(key));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        element._store[\"validType\"] = true;\r\n    }\r\n    enableOptimizeTreeLog.current = last;\r\n};\n\nreact.__my_react_internal__.currentComponentFiber;\r\nvar RESERVED_PROPS = {\r\n    key: true,\r\n    ref: true,\r\n    __self: true,\r\n    __source: true,\r\n};\r\n/**\r\n * @public\r\n */\r\nvar jsx = function (type, config, maybeKey, source, self) {\r\n    var _a;\r\n    var props = {};\r\n    var key = null;\r\n    var ref = null;\r\n    if (maybeKey !== undefined) {\r\n        key = \"\" + maybeKey;\r\n    }\r\n    // <div {...props} /> we can not make sure this usage will contain `key` of not\r\n    if ((config === null || config === void 0 ? void 0 : config.key) !== undefined) {\r\n        key = \"\" + config.key;\r\n    }\r\n    if (config === null || config === void 0 ? void 0 : config.ref) {\r\n        ref = config.ref;\r\n    }\r\n    for (var propsName in config) {\r\n        if (Object.prototype.hasOwnProperty.call(config, propsName) && !Object.prototype.hasOwnProperty.call(RESERVED_PROPS, propsName)) {\r\n            props[propsName] = config[propsName];\r\n        }\r\n    }\r\n    if (type && (typeof type === \"function\" || typeof type === \"object\")) {\r\n        var typedType_1 = type;\r\n        Object.keys((typedType_1 === null || typedType_1 === void 0 ? void 0 : typedType_1.defaultProps) || {}).forEach(function (key) {\r\n            var _a;\r\n            props[key] = props[key] === undefined ? (_a = typedType_1.defaultProps) === null || _a === void 0 ? void 0 : _a[key] : props[key];\r\n        });\r\n    }\r\n    var element = (_a = {},\r\n        _a[myreactSharedExports.TYPEKEY] = myreactSharedExports.Element,\r\n        _a.type = type,\r\n        _a.key = key,\r\n        _a.ref = ref,\r\n        _a.props = props,\r\n        _a);\r\n    return element;\r\n};\r\n/**\r\n * @public\r\n */\r\nvar jsxDEV = function (type, config, key, isStaticChildren, source, self) {\r\n    var element = jsx(type, config, key);\r\n    if (config.children) {\r\n        var children = config.children;\r\n        if (isStaticChildren) {\r\n            if (Array.isArray(children)) {\r\n                children.forEach(function (c) { return checkSingleChildrenKey(c); });\r\n                Object.freeze(children);\r\n            }\r\n            else {\r\n                console.warn(\"[@my-react/react] static children should always be an array\");\r\n            }\r\n            if (!Array.isArray(children)) {\r\n                console.warn(\"[@my-react/react] static children should always be an array.\");\r\n            }\r\n        }\r\n        else {\r\n            checkSingleChildrenKey(children);\r\n        }\r\n    }\r\n    checkValidElement(element);\r\n    return element;\r\n};\r\n/**\r\n * @public\r\n */\r\nvar jsxs = function (type, config, key, source, self) {\r\n    {\r\n        return jsx(type, config, key);\r\n    }\r\n};\n\nexports.Fragment = myreactSharedExports.Fragment;\nexports.jsx = jsx;\nexports.jsxDEV = jsxDEV;\nexports.jsxs = jsxs;\n","\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","\"use strict\";\n\nmodule.exports = require(\"./dist/cjs/index.production\");\n","\"use strict\";\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dist/cjs/index.production\");\n} else {\n  module.exports = require(\"./dist/cjs/index.development\");\n}\n","\"use strict\";\n\nmodule.exports = require(\"@my-react/react-jsx\");","import { InMemoryCache } from \"@apollo/client\";\n\nexport const autoMergeCache = new InMemoryCache({\n  typePolicies: {\n    Repository: {\n      fields: {\n        issues: {\n          keyArgs: false,\n          merge(existing = { nodes: [] }, incoming) {\n            if (existing?.pageInfo?.startCursor === incoming?.pageInfo?.startCursor) return existing;\n            return {\n              ...existing,\n              ...incoming,\n              nodes: [...existing.nodes, ...incoming.nodes],\n            };\n          },\n        },\n      },\n    },\n    Issue: {\n      fields: {\n        comments: {\n          keyArgs: false,\n          merge(existing = { nodes: [] }, incoming) {\n            if (existing?.pageInfo?.startCursor === incoming?.pageInfo?.startCursor) return existing;\n            return {\n              ...existing,\n              ...incoming,\n              nodes: [...existing.nodes, ...incoming.nodes],\n            };\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const plainCache = new InMemoryCache();\n","import { ApolloClient, from } from \"@apollo/client\";\nimport merge from \"lodash/merge\";\nimport { useMemo } from \"react\";\n\nimport { autoMergeCache, plainCache } from \"./cache\";\nimport { authLink, httpLink, onErrorLink } from \"./links\";\n\nimport type { ApolloClientOptions, NormalizedCacheObject } from \"@apollo/client\";\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | undefined;\n\nconst __SERVER__ = typeof window === \"undefined\";\n\nconst _createApolloClient = ({ ...restProps }: Omit<ApolloClientOptions<NormalizedCacheObject>, \"cache\"> = {}, enableInfinityLoad = true) =>\n  new ApolloClient<NormalizedCacheObject>({\n    ssrMode: __SERVER__,\n    link: from([onErrorLink, authLink, httpLink]),\n    cache: enableInfinityLoad ? autoMergeCache : plainCache,\n    ...restProps,\n  });\n\nconst createApolloClient = (initialState: NormalizedCacheObject = {}, enableInfinityLoad?: boolean) => {\n  const _apolloClient = apolloClient ?? _createApolloClient({}, enableInfinityLoad);\n\n  // for server side, every apollo request should clean the cache\n  if (__SERVER__) {\n    _apolloClient.cache.restore(initialState);\n  } else {\n    // for client side, should merge exist cacheData\n    const existCacheData = _apolloClient.cache.extract();\n    _apolloClient.cache.restore(merge(existCacheData, initialState));\n  }\n\n  if (!__SERVER__) apolloClient = _apolloClient;\n\n  return _apolloClient;\n};\n\nexport const getApolloClient = createApolloClient;\n\nexport const useApollo = (initialState: NormalizedCacheObject, enableInfinityLoad?: boolean): ApolloClient<any> => {\n  const store = useMemo(() => createApolloClient(initialState, enableInfinityLoad), [initialState, enableInfinityLoad]);\n  return store;\n};\n","/* eslint-disable */\n// @ts-nocheck\n\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends \" $fragmentName\" | \"__typename\" ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string };\n  String: { input: string; output: string };\n  Boolean: { input: boolean; output: boolean };\n  Int: { input: number; output: number };\n  Float: { input: number; output: number };\n  /** A (potentially binary) string encoded using base64. */\n  Base64String: { input: any; output: any };\n  /** An ISO-8601 encoded date string. */\n  Date: { input: any; output: any };\n  /** An ISO-8601 encoded UTC date string. */\n  DateTime: { input: any; output: any };\n  /** A Git object ID. */\n  GitObjectID: { input: any; output: any };\n  /** A fully qualified reference name (e.g. `refs/heads/master`). */\n  GitRefname: { input: any; output: any };\n  /** Git SSH string */\n  GitSSHRemote: { input: any; output: any };\n  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */\n  GitTimestamp: { input: any; output: any };\n  /** A string containing HTML code. */\n  HTML: { input: any; output: any };\n  /** An ISO-8601 encoded UTC date string with millisecond precision. */\n  PreciseDateTime: { input: any; output: any };\n  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */\n  URI: { input: any; output: any };\n  /** A valid x509 certificate string */\n  X509Certificate: { input: any; output: any };\n};\n\n/** Autogenerated input type of AbortQueuedMigrations */\nexport type AbortQueuedMigrationsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the organization that is running the migrations. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AbortQueuedMigrations */\nexport type AbortQueuedMigrationsPayload = {\n  __typename?: \"AbortQueuedMigrationsPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */\nexport type AcceptEnterpriseAdministratorInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the invitation being accepted */\n  invitationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation */\nexport type AcceptEnterpriseAdministratorInvitationPayload = {\n  __typename?: \"AcceptEnterpriseAdministratorInvitationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The invitation that was accepted. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of accepting an administrator invitation. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of AcceptTopicSuggestion */\nexport type AcceptTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the suggested topic. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AcceptTopicSuggestion */\nexport type AcceptTopicSuggestionPayload = {\n  __typename?: \"AcceptTopicSuggestionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The accepted topic. */\n  topic?: Maybe<Topic>;\n};\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type Actor = {\n  /** A URL pointing to the actor's public avatar. */\n  avatarUrl: Scalars[\"URI\"][\"output\"];\n  /** The username of the actor. */\n  login: Scalars[\"String\"][\"output\"];\n  /** The HTTP path for this actor. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this actor. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type ActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Location information for an actor */\nexport type ActorLocation = {\n  __typename?: \"ActorLocation\";\n  /** City */\n  city?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Country name */\n  country?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Country code */\n  countryCode?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Region name */\n  region?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Region or state code */\n  regionCode?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The actor's type. */\nexport enum ActorType {\n  /** Indicates a team actor. */\n  Team = \"TEAM\",\n  /** Indicates a user actor. */\n  User = \"USER\",\n}\n\n/** Autogenerated input type of AddAssigneesToAssignable */\nexport type AddAssigneesToAssignableInput = {\n  /** The id of the assignable object to add assignees to. */\n  assignableId: Scalars[\"ID\"][\"input\"];\n  /** The id of users to add as assignees. */\n  assigneeIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of AddAssigneesToAssignable */\nexport type AddAssigneesToAssignablePayload = {\n  __typename?: \"AddAssigneesToAssignablePayload\";\n  /** The item that was assigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of AddComment */\nexport type AddCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddComment */\nexport type AddCommentPayload = {\n  __typename?: \"AddCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The edge from the subject's comment connection. */\n  commentEdge?: Maybe<IssueCommentEdge>;\n  /** The subject */\n  subject?: Maybe<Node>;\n  /** The edge from the subject's timeline connection. */\n  timelineEdge?: Maybe<IssueTimelineItemEdge>;\n};\n\n/** Autogenerated input type of AddDiscussionComment */\nexport type AddDiscussionCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion to comment on. */\n  discussionId: Scalars[\"ID\"][\"input\"];\n  /** The Node ID of the discussion comment within this discussion to reply to. */\n  replyToId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of AddDiscussionComment */\nexport type AddDiscussionCommentPayload = {\n  __typename?: \"AddDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The newly created discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of AddEnterpriseSupportEntitlement */\nexport type AddEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of a member who will receive the support entitlement. */\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of AddEnterpriseSupportEntitlement */\nexport type AddEnterpriseSupportEntitlementPayload = {\n  __typename?: \"AddEnterpriseSupportEntitlementPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A message confirming the result of adding the support entitlement. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of AddLabelsToLabelable */\nexport type AddLabelsToLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ids of the labels to add. */\n  labelIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** The id of the labelable object to add labels to. */\n  labelableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddLabelsToLabelable */\nexport type AddLabelsToLabelablePayload = {\n  __typename?: \"AddLabelsToLabelablePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The item that was labeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of AddProjectCard */\nexport type AddProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The content of the card. Must be a member of the ProjectCardItem union */\n  contentId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The note on the card. */\n  note?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the ProjectColumn. */\n  projectColumnId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddProjectCard */\nexport type AddProjectCardPayload = {\n  __typename?: \"AddProjectCardPayload\";\n  /** The edge from the ProjectColumn's card connection. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The ProjectColumn */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of AddProjectColumn */\nexport type AddProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the column. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the project. */\n  projectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddProjectColumn */\nexport type AddProjectColumnPayload = {\n  __typename?: \"AddProjectColumnPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The edge from the project's column connection. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n  /** The project */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of AddProjectDraftIssue */\nexport type AddProjectDraftIssueInput = {\n  /** The IDs of the assignees of the draft issue. */\n  assigneeIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The body of the draft issue. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Project to add the draft issue to. */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** The title of the draft issue. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of AddProjectDraftIssue */\nexport type AddProjectDraftIssuePayload = {\n  __typename?: \"AddProjectDraftIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The draft issue added to the project. */\n  projectNextItem?: Maybe<ProjectNextItem>;\n};\n\n/** Autogenerated input type of AddProjectNextItem */\nexport type AddProjectNextItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The content id of the item (Issue or PullRequest). */\n  contentId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the Project to add the item to. */\n  projectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddProjectNextItem */\nexport type AddProjectNextItemPayload = {\n  __typename?: \"AddProjectNextItemPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The item added to the project. */\n  projectNextItem?: Maybe<ProjectNextItem>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewComment */\nexport type AddPullRequestReviewCommentInput = {\n  /** The text of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The SHA of the commit to comment on. */\n  commitOID?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n  /** The comment id to reply to. */\n  inReplyTo?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The relative path of the file to comment on. */\n  path?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The line index in the diff to comment on. */\n  position?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** The node ID of the pull request reviewing */\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The Node ID of the review to modify. */\n  pullRequestReviewId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewComment */\nexport type AddPullRequestReviewCommentPayload = {\n  __typename?: \"AddPullRequestReviewCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The newly created comment. */\n  comment?: Maybe<PullRequestReviewComment>;\n  /** The edge from the review's comment connection. */\n  commentEdge?: Maybe<PullRequestReviewCommentEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReview */\nexport type AddPullRequestReviewInput = {\n  /** The contents of the review body comment. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The review line comments. */\n  comments?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewComment>>>;\n  /** The commit OID the review pertains to. */\n  commitOID?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n  /** The event to perform on the pull request review. */\n  event?: InputMaybe<PullRequestReviewEvent>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n  /** The review line comment threads. */\n  threads?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewThread>>>;\n};\n\n/** Autogenerated return type of AddPullRequestReview */\nexport type AddPullRequestReviewPayload = {\n  __typename?: \"AddPullRequestReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The newly created pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** The edge from the pull request's review connection. */\n  reviewEdge?: Maybe<PullRequestReviewEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewThread */\nexport type AddPullRequestReviewThreadInput = {\n  /** Body of the thread's first comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */\n  line: Scalars[\"Int\"][\"input\"];\n  /** Path to the file being commented on. */\n  path: Scalars[\"String\"][\"input\"];\n  /** The node ID of the pull request reviewing */\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The Node ID of the review to modify. */\n  pullRequestReviewId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewThread */\nexport type AddPullRequestReviewThreadPayload = {\n  __typename?: \"AddPullRequestReviewThreadPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The newly created thread. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Autogenerated input type of AddReaction */\nexport type AddReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the emoji to react with. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddReaction */\nexport type AddReactionPayload = {\n  __typename?: \"AddReactionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of AddStar */\nexport type AddStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Starrable ID to star. */\n  starrableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddStar */\nexport type AddStarPayload = {\n  __typename?: \"AddStarPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of AddUpvote */\nexport type AddUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion or comment to upvote. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddUpvote */\nexport type AddUpvotePayload = {\n  __typename?: \"AddUpvotePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Autogenerated input type of AddVerifiableDomain */\nexport type AddVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The URL of the domain */\n  domain: Scalars[\"URI\"][\"input\"];\n  /** The ID of the owner to add the domain to */\n  ownerId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of AddVerifiableDomain */\nexport type AddVerifiableDomainPayload = {\n  __typename?: \"AddVerifiableDomainPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The verifiable domain that was added. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Represents a 'added_to_project' event on a given issue or pull request. */\nexport type AddedToProjectEvent = Node & {\n  __typename?: \"AddedToProjectEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars[\"String\"][\"output\"];\n};\n\n/** A GitHub App. */\nexport type App = Node & {\n  __typename?: \"App\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The description of the app. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The IP addresses of the app. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars[\"String\"][\"output\"];\n  /** A URL pointing to the app's logo. */\n  logoUrl: Scalars[\"URI\"][\"output\"];\n  /** The name of the app. */\n  name: Scalars[\"String\"][\"output\"];\n  /** A slug based on the name of the app for use in URLs. */\n  slug: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The URL to the app's homepage. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** A GitHub App. */\nexport type AppIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n/** A GitHub App. */\nexport type AppLogoUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated input type of ApproveDeployments */\nexport type ApproveDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Optional comment for approving deployments */\n  comment?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ApproveDeployments */\nexport type ApproveDeploymentsPayload = {\n  __typename?: \"ApproveDeploymentsPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** Autogenerated input type of ApproveVerifiableDomain */\nexport type ApproveVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the verifiable domain to approve. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ApproveVerifiableDomain */\nexport type ApproveVerifiableDomainPayload = {\n  __typename?: \"ApproveVerifiableDomainPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The verifiable domain that was approved. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Autogenerated input type of ArchiveRepository */\nexport type ArchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the repository to mark as archived. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ArchiveRepository */\nexport type ArchiveRepositoryPayload = {\n  __typename?: \"ArchiveRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository that was marked as archived. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can have users assigned to it. */\nexport type Assignable = {\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n};\n\n/** An object that can have users assigned to it. */\nexport type AssignableAssigneesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents an 'assigned' event on any assignable object. */\nexport type AssignedEvent = Node & {\n  __typename?: \"AssignedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was assigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /**\n   * Identifies the user who was assigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Types that can be assigned to issues. */\nexport type Assignee = Bot | Mannequin | Organization | User;\n\n/** An entry in the audit log. */\nexport type AuditEntry = {\n  /** The action name */\n  action: Scalars[\"String\"][\"output\"];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The time the action was initiated */\n  createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Types that can initiate an audit log event. */\nexport type AuditEntryActor = Bot | Organization | User;\n\n/** Ordering options for Audit Log connections. */\nexport type AuditLogOrder = {\n  /** The ordering direction. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field to order Audit Logs by. */\n  field?: InputMaybe<AuditLogOrderField>;\n};\n\n/** Properties by which Audit Log connections can be ordered. */\nexport enum AuditLogOrderField {\n  /** Order audit log entries by timestamp */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Represents a 'auto_merge_disabled' event on a given pull request. */\nexport type AutoMergeDisabledEvent = Node & {\n  __typename?: \"AutoMergeDisabledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who disabled auto-merge for this Pull Request */\n  disabler?: Maybe<User>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event */\n  pullRequest?: Maybe<PullRequest>;\n  /** The reason auto-merge was disabled */\n  reason?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The reason_code relating to why auto-merge was disabled */\n  reasonCode?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Represents a 'auto_merge_enabled' event on a given pull request. */\nexport type AutoMergeEnabledEvent = Node & {\n  __typename?: \"AutoMergeEnabledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who enabled auto-merge for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents an auto-merge request for a pull request */\nexport type AutoMergeRequest = {\n  __typename?: \"AutoMergeRequest\";\n  /** The email address of the author of this auto-merge request. */\n  authorEmail?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The commit message of the auto-merge request. */\n  commitBody?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The commit title of the auto-merge request. */\n  commitHeadline?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** When was this auto-merge request was enabled. */\n  enabledAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The actor who created the auto-merge request. */\n  enabledBy?: Maybe<Actor>;\n  /** The merge method of the auto-merge request. */\n  mergeMethod: PullRequestMergeMethod;\n  /** The pull request that this auto-merge request is set against. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'auto_rebase_enabled' event on a given pull request. */\nexport type AutoRebaseEnabledEvent = Node & {\n  __typename?: \"AutoRebaseEnabledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who enabled auto-merge (rebase) for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'auto_squash_enabled' event on a given pull request. */\nexport type AutoSquashEnabledEvent = Node & {\n  __typename?: \"AutoSquashEnabledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who enabled auto-merge (squash) for this Pull Request */\n  enabler?: Maybe<User>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'automatic_base_change_failed' event on a given pull request. */\nexport type AutomaticBaseChangeFailedEvent = Node & {\n  __typename?: \"AutomaticBaseChangeFailedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The new base for this PR */\n  newBase: Scalars[\"String\"][\"output\"];\n  /** The old base for this PR */\n  oldBase: Scalars[\"String\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\nexport type AutomaticBaseChangeSucceededEvent = Node & {\n  __typename?: \"AutomaticBaseChangeSucceededEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The new base for this PR */\n  newBase: Scalars[\"String\"][\"output\"];\n  /** The old base for this PR */\n  oldBase: Scalars[\"String\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_changed' event on a given issue or pull request. */\nexport type BaseRefChangedEvent = Node & {\n  __typename?: \"BaseRefChangedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the name of the base ref for the pull request after it was changed. */\n  currentRefName: Scalars[\"String\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the name of the base ref for the pull request before it was changed. */\n  previousRefName: Scalars[\"String\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_deleted' event on a given pull request. */\nexport type BaseRefDeletedEvent = Node & {\n  __typename?: \"BaseRefDeletedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */\n  baseRefName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'base_ref_force_pushed' event on a given pull request. */\nexport type BaseRefForcePushedEvent = Node & {\n  __typename?: \"BaseRefForcePushedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a Git blame. */\nexport type Blame = {\n  __typename?: \"Blame\";\n  /** The list of ranges from a Git blame. */\n  ranges: Array<BlameRange>;\n};\n\n/** Represents a range of information from a Git blame. */\nexport type BlameRange = {\n  __typename?: \"BlameRange\";\n  /**\n   * Identifies the recency of the change, from 1 (new) to 10 (old). This is\n   * calculated as a 2-quantile and determines the length of distance between the\n   * median age of all the changes in the file and the recency of the current\n   * range's change.\n   */\n  age: Scalars[\"Int\"][\"output\"];\n  /** Identifies the line author */\n  commit: Commit;\n  /** The ending line for the range */\n  endingLine: Scalars[\"Int\"][\"output\"];\n  /** The starting line for the range */\n  startingLine: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a Git blob. */\nexport type Blob = GitObject &\n  Node & {\n    __typename?: \"Blob\";\n    /** An abbreviated version of the Git object ID */\n    abbreviatedOid: Scalars[\"String\"][\"output\"];\n    /** Byte size of Blob object */\n    byteSize: Scalars[\"Int\"][\"output\"];\n    /** The HTTP path for this Git object */\n    commitResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this Git object */\n    commitUrl: Scalars[\"URI\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */\n    isBinary?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** Indicates whether the contents is truncated */\n    isTruncated: Scalars[\"Boolean\"][\"output\"];\n    /** The Git object ID */\n    oid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The Repository the Git object belongs to */\n    repository: Repository;\n    /** UTF8 text data or null if the Blob is binary */\n    text?: Maybe<Scalars[\"String\"][\"output\"]>;\n  };\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type Bot = Actor &\n  Node &\n  UniformResourceLocatable & {\n    __typename?: \"Bot\";\n    /** A URL pointing to the GitHub App's public avatar. */\n    avatarUrl: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The username of the actor. */\n    login: Scalars[\"String\"][\"output\"];\n    /** The HTTP path for this bot */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this bot */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type BotAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Types which can be actors for `BranchActorAllowance` objects. */\nexport type BranchActorAllowanceActor = Team | User;\n\n/** A branch protection rule. */\nexport type BranchProtectionRule = Node & {\n  __typename?: \"BranchProtectionRule\";\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars[\"Boolean\"][\"output\"];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars[\"Boolean\"][\"output\"];\n  /** Is branch creation a protected operation. */\n  blocksCreations: Scalars[\"Boolean\"][\"output\"];\n  /** A list of conflicts matching branches protection rule and other branch protection rules */\n  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;\n  /** A list of actors able to force push for this branch protection rule. */\n  bypassForcePushAllowances: BypassForcePushAllowanceConnection;\n  /** A list of actors able to bypass PRs for this branch protection rule. */\n  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection;\n  /** The actor who created this branch protection rule. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews: Scalars[\"Boolean\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced: Scalars[\"Boolean\"][\"output\"];\n  /** Repository refs that are protected by this rule */\n  matchingRefs: RefConnection;\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars[\"String\"][\"output\"];\n  /** A list push allowances for this branch protection rule. */\n  pushAllowances: PushAllowanceConnection;\n  /** The repository associated with this branch protection rule. */\n  repository?: Maybe<Repository>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars[\"String\"][\"output\"]>>>;\n  /** List of required status checks that must pass for commits to be accepted to matching branches. */\n  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckDescription>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews: Scalars[\"Boolean\"][\"output\"];\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars[\"Boolean\"][\"output\"];\n  /** Are commits required to be signed. */\n  requiresCommitSignatures: Scalars[\"Boolean\"][\"output\"];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars[\"Boolean\"][\"output\"];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars[\"Boolean\"][\"output\"];\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks: Scalars[\"Boolean\"][\"output\"];\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks: Scalars[\"Boolean\"][\"output\"];\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes: Scalars[\"Boolean\"][\"output\"];\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals: Scalars[\"Boolean\"][\"output\"];\n  /** A list review dismissal allowances for this branch protection rule. */\n  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBranchProtectionRuleConflictsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassForcePushAllowancesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassPullRequestAllowancesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleMatchingRefsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRulePushAllowancesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleReviewDismissalAllowancesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A conflict between two branch protection rules. */\nexport type BranchProtectionRuleConflict = {\n  __typename?: \"BranchProtectionRuleConflict\";\n  /** Identifies the branch protection rule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the conflicting branch protection rule. */\n  conflictingBranchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the branch ref that has conflicting rules */\n  ref?: Maybe<Ref>;\n};\n\n/** The connection type for BranchProtectionRuleConflict. */\nexport type BranchProtectionRuleConflictConnection = {\n  __typename?: \"BranchProtectionRuleConflictConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleConflictEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRuleConflict>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleConflictEdge = {\n  __typename?: \"BranchProtectionRuleConflictEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRuleConflict>;\n};\n\n/** The connection type for BranchProtectionRule. */\nexport type BranchProtectionRuleConnection = {\n  __typename?: \"BranchProtectionRuleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleEdge = {\n  __typename?: \"BranchProtectionRuleEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRule>;\n};\n\n/** A team or user who has the ability to bypass a force push requirement on a protected branch. */\nexport type BypassForcePushAllowance = Node & {\n  __typename?: \"BypassForcePushAllowance\";\n  /** The actor that can dismiss. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** The connection type for BypassForcePushAllowance. */\nexport type BypassForcePushAllowanceConnection = {\n  __typename?: \"BypassForcePushAllowanceConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassForcePushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassForcePushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type BypassForcePushAllowanceEdge = {\n  __typename?: \"BypassForcePushAllowanceEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassForcePushAllowance>;\n};\n\n/** A team or user who has the ability to bypass a pull request requirement on a protected branch. */\nexport type BypassPullRequestAllowance = Node & {\n  __typename?: \"BypassPullRequestAllowance\";\n  /** The actor that can dismiss. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** The connection type for BypassPullRequestAllowance. */\nexport type BypassPullRequestAllowanceConnection = {\n  __typename?: \"BypassPullRequestAllowanceConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassPullRequestAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassPullRequestAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type BypassPullRequestAllowanceEdge = {\n  __typename?: \"BypassPullRequestAllowanceEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassPullRequestAllowance>;\n};\n\n/** The Common Vulnerability Scoring System */\nexport type Cvss = {\n  __typename?: \"CVSS\";\n  /** The CVSS score associated with this advisory */\n  score: Scalars[\"Float\"][\"output\"];\n  /** The CVSS vector string associated with this advisory */\n  vectorString?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** A common weakness enumeration */\nexport type Cwe = Node & {\n  __typename?: \"CWE\";\n  /** The id of the CWE */\n  cweId: Scalars[\"String\"][\"output\"];\n  /** A detailed description of this CWE */\n  description: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The name of this CWE */\n  name: Scalars[\"String\"][\"output\"];\n};\n\n/** The connection type for CWE. */\nexport type CweConnection = {\n  __typename?: \"CWEConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CweEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Cwe>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CweEdge = {\n  __typename?: \"CWEEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Cwe>;\n};\n\n/** Autogenerated input type of CancelEnterpriseAdminInvitation */\nexport type CancelEnterpriseAdminInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the pending enterprise administrator invitation. */\n  invitationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CancelEnterpriseAdminInvitation */\nexport type CancelEnterpriseAdminInvitationPayload = {\n  __typename?: \"CancelEnterpriseAdminInvitationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The invitation that was canceled. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of canceling an administrator invitation. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of CancelSponsorship */\nexport type CancelSponsorshipInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of CancelSponsorship */\nexport type CancelSponsorshipPayload = {\n  __typename?: \"CancelSponsorshipPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The tier that was being used at the time of cancellation. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of ChangeUserStatus */\nexport type ChangeUserStatusInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */\n  emoji?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** If set, the user status will not be shown after this date. */\n  expiresAt?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */\n  limitedAvailability?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A short description of your current status. */\n  message?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * The ID of the organization whose members will be allowed to see the status. If\n   * omitted, the status will be publicly visible.\n   */\n  organizationId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of ChangeUserStatus */\nexport type ChangeUserStatusPayload = {\n  __typename?: \"ChangeUserStatusPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Your updated status. */\n  status?: Maybe<UserStatus>;\n};\n\n/** A single check annotation. */\nexport type CheckAnnotation = {\n  __typename?: \"CheckAnnotation\";\n  /** The annotation's severity level. */\n  annotationLevel?: Maybe<CheckAnnotationLevel>;\n  /** The path to the file that this annotation was made on. */\n  blobUrl: Scalars[\"URI\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The position of this annotation. */\n  location: CheckAnnotationSpan;\n  /** The annotation's message. */\n  message: Scalars[\"String\"][\"output\"];\n  /** The path that this annotation was made on. */\n  path: Scalars[\"String\"][\"output\"];\n  /** Additional information about the annotation. */\n  rawDetails?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The annotation's title */\n  title?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The connection type for CheckAnnotation. */\nexport type CheckAnnotationConnection = {\n  __typename?: \"CheckAnnotationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckAnnotationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckAnnotation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationData = {\n  /** Represents an annotation's information level */\n  annotationLevel: CheckAnnotationLevel;\n  /** The location of the annotation */\n  location: CheckAnnotationRange;\n  /** A short description of the feedback for these lines of code. */\n  message: Scalars[\"String\"][\"input\"];\n  /** The path of the file to add an annotation to. */\n  path: Scalars[\"String\"][\"input\"];\n  /** Details about this annotation. */\n  rawDetails?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The title that represents the annotation. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An edge in a connection. */\nexport type CheckAnnotationEdge = {\n  __typename?: \"CheckAnnotationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckAnnotation>;\n};\n\n/** Represents an annotation's information level. */\nexport enum CheckAnnotationLevel {\n  /** An annotation indicating an inescapable error. */\n  Failure = \"FAILURE\",\n  /** An annotation indicating some information. */\n  Notice = \"NOTICE\",\n  /** An annotation indicating an ignorable error. */\n  Warning = \"WARNING\",\n}\n\n/** A character position in a check annotation. */\nexport type CheckAnnotationPosition = {\n  __typename?: \"CheckAnnotationPosition\";\n  /** Column number (1 indexed). */\n  column?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Line number (1 indexed). */\n  line: Scalars[\"Int\"][\"output\"];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationRange = {\n  /** The ending column of the range. */\n  endColumn?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** The ending line of the range. */\n  endLine: Scalars[\"Int\"][\"input\"];\n  /** The starting column of the range. */\n  startColumn?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** The starting line of the range. */\n  startLine: Scalars[\"Int\"][\"input\"];\n};\n\n/** An inclusive pair of positions for a check annotation. */\nexport type CheckAnnotationSpan = {\n  __typename?: \"CheckAnnotationSpan\";\n  /** End position (inclusive). */\n  end: CheckAnnotationPosition;\n  /** Start position (inclusive). */\n  start: CheckAnnotationPosition;\n};\n\n/** The possible states for a check suite or run conclusion. */\nexport enum CheckConclusionState {\n  /** The check suite or run requires action. */\n  ActionRequired = \"ACTION_REQUIRED\",\n  /** The check suite or run has been cancelled. */\n  Cancelled = \"CANCELLED\",\n  /** The check suite or run has failed. */\n  Failure = \"FAILURE\",\n  /** The check suite or run was neutral. */\n  Neutral = \"NEUTRAL\",\n  /** The check suite or run was skipped. */\n  Skipped = \"SKIPPED\",\n  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */\n  Stale = \"STALE\",\n  /** The check suite or run has failed at startup. */\n  StartupFailure = \"STARTUP_FAILURE\",\n  /** The check suite or run has succeeded. */\n  Success = \"SUCCESS\",\n  /** The check suite or run has timed out. */\n  TimedOut = \"TIMED_OUT\",\n}\n\n/** A check run. */\nexport type CheckRun = Node &\n  RequirableByPullRequest &\n  UniformResourceLocatable & {\n    __typename?: \"CheckRun\";\n    /** The check run's annotations */\n    annotations?: Maybe<CheckAnnotationConnection>;\n    /** The check suite that this run is a part of. */\n    checkSuite: CheckSuite;\n    /** Identifies the date and time when the check run was completed. */\n    completedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The conclusion of the check run. */\n    conclusion?: Maybe<CheckConclusionState>;\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The corresponding deployment for this job, if any */\n    deployment?: Maybe<Deployment>;\n    /** The URL from which to find full details of the check run on the integrator's site. */\n    detailsUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** A reference for the check run on the integrator's system. */\n    externalId?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether this is required to pass before merging for a specific pull request. */\n    isRequired: Scalars[\"Boolean\"][\"output\"];\n    /** The name of the check for this check run. */\n    name: Scalars[\"String\"][\"output\"];\n    /** Information about a pending deployment, if any, in this check run */\n    pendingDeploymentRequest?: Maybe<DeploymentRequest>;\n    /** The permalink to the check run summary. */\n    permalink: Scalars[\"URI\"][\"output\"];\n    /** The repository associated with this check run. */\n    repository: Repository;\n    /** The HTTP path for this check run. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the check run was started. */\n    startedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The current status of the check run. */\n    status: CheckStatusState;\n    /** The check run's steps */\n    steps?: Maybe<CheckStepConnection>;\n    /** A string representing the check run's summary */\n    summary?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A string representing the check run's text */\n    text?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A string representing the check run */\n    title?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this check run. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** A check run. */\nexport type CheckRunAnnotationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A check run. */\nexport type CheckRunIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  pullRequestNumber?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A check run. */\nexport type CheckRunStepsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  number?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Possible further actions the integrator can perform. */\nexport type CheckRunAction = {\n  /** A short explanation of what this action would do. */\n  description: Scalars[\"String\"][\"input\"];\n  /** A reference for the action on the integrator's system. */\n  identifier: Scalars[\"String\"][\"input\"];\n  /** The text to be displayed on a button in the web UI. */\n  label: Scalars[\"String\"][\"input\"];\n};\n\n/** The connection type for CheckRun. */\nexport type CheckRunConnection = {\n  __typename?: \"CheckRunConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckRunEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckRun>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CheckRunEdge = {\n  __typename?: \"CheckRunEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckRun>;\n};\n\n/** The filters that are available when fetching check runs. */\nexport type CheckRunFilter = {\n  /** Filters the check runs created by this application ID. */\n  appId?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** Filters the check runs by this name. */\n  checkName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Filters the check runs by this type. */\n  checkType?: InputMaybe<CheckRunType>;\n  /** Filters the check runs by this status. */\n  status?: InputMaybe<CheckStatusState>;\n};\n\n/** Descriptive details about the check run. */\nexport type CheckRunOutput = {\n  /** The annotations that are made as part of the check run. */\n  annotations?: InputMaybe<Array<CheckAnnotationData>>;\n  /** Images attached to the check run output displayed in the GitHub pull request UI. */\n  images?: InputMaybe<Array<CheckRunOutputImage>>;\n  /** The summary of the check run (supports Commonmark). */\n  summary: Scalars[\"String\"][\"input\"];\n  /** The details of the check run (supports Commonmark). */\n  text?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A title to provide for this check run. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Images attached to the check run output displayed in the GitHub pull request UI. */\nexport type CheckRunOutputImage = {\n  /** The alternative text for the image. */\n  alt: Scalars[\"String\"][\"input\"];\n  /** A short image description. */\n  caption?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The full URL of the image. */\n  imageUrl: Scalars[\"URI\"][\"input\"];\n};\n\n/** The possible types of check runs. */\nexport enum CheckRunType {\n  /** Every check run available. */\n  All = \"ALL\",\n  /** The latest check run. */\n  Latest = \"LATEST\",\n}\n\n/** The possible states for a check suite or run status. */\nexport enum CheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = \"COMPLETED\",\n  /** The check suite or run is in progress. */\n  InProgress = \"IN_PROGRESS\",\n  /** The check suite or run is in pending state. */\n  Pending = \"PENDING\",\n  /** The check suite or run has been queued. */\n  Queued = \"QUEUED\",\n  /** The check suite or run has been requested. */\n  Requested = \"REQUESTED\",\n  /** The check suite or run is in waiting state. */\n  Waiting = \"WAITING\",\n}\n\n/** A single check step. */\nexport type CheckStep = {\n  __typename?: \"CheckStep\";\n  /** Identifies the date and time when the check step was completed. */\n  completedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The conclusion of the check step. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** A reference for the check step on the integrator's system. */\n  externalId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The step's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The index of the step in the list of steps of the parent check run. */\n  number: Scalars[\"Int\"][\"output\"];\n  /** Number of seconds to completion. */\n  secondsToCompletion?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Identifies the date and time when the check step was started. */\n  startedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The current status of the check step. */\n  status: CheckStatusState;\n};\n\n/** The connection type for CheckStep. */\nexport type CheckStepConnection = {\n  __typename?: \"CheckStepConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckStepEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckStep>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CheckStepEdge = {\n  __typename?: \"CheckStepEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckStep>;\n};\n\n/** A check suite. */\nexport type CheckSuite = Node & {\n  __typename?: \"CheckSuite\";\n  /** The GitHub App which created this check suite. */\n  app?: Maybe<App>;\n  /** The name of the branch for this check suite. */\n  branch?: Maybe<Ref>;\n  /** The check runs associated with a check suite. */\n  checkRuns?: Maybe<CheckRunConnection>;\n  /** The commit for this check suite */\n  commit: Commit;\n  /** The conclusion of this check suite. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who triggered the check suite. */\n  creator?: Maybe<User>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** A list of open pull requests matching the check suite. */\n  matchingPullRequests?: Maybe<PullRequestConnection>;\n  /** The push that triggered this check suite. */\n  push?: Maybe<Push>;\n  /** The repository associated with this check suite. */\n  repository: Repository;\n  /** The HTTP path for this check suite */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The status of this check suite. */\n  status: CheckStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP URL for this check suite */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The workflow run associated with this check suite. */\n  workflowRun?: Maybe<WorkflowRun>;\n};\n\n/** A check suite. */\nexport type CheckSuiteCheckRunsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<CheckRunFilter>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A check suite. */\nexport type CheckSuiteMatchingPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The auto-trigger preferences that are available for check suites. */\nexport type CheckSuiteAutoTriggerPreference = {\n  /** The node ID of the application that owns the check suite. */\n  appId: Scalars[\"ID\"][\"input\"];\n  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */\n  setting: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** The connection type for CheckSuite. */\nexport type CheckSuiteConnection = {\n  __typename?: \"CheckSuiteConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckSuiteEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckSuite>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CheckSuiteEdge = {\n  __typename?: \"CheckSuiteEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckSuite>;\n};\n\n/** The filters that are available when fetching check suites. */\nexport type CheckSuiteFilter = {\n  /** Filters the check suites created by this application ID. */\n  appId?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** Filters the check suites by this name. */\n  checkName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated input type of ClearLabelsFromLabelable */\nexport type ClearLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the labelable object to clear the labels from. */\n  labelableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ClearLabelsFromLabelable */\nexport type ClearLabelsFromLabelablePayload = {\n  __typename?: \"ClearLabelsFromLabelablePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The item that was unlabeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of CloneProject */\nexport type CloneProjectInput = {\n  /** The description of the project. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Whether or not to clone the source project's workflows. */\n  includeWorkflows: Scalars[\"Boolean\"][\"input\"];\n  /** The name of the project. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The visibility of the project, defaults to false (private). */\n  public?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The source project to clone. */\n  sourceId: Scalars[\"ID\"][\"input\"];\n  /** The owner ID to create the project under. */\n  targetOwnerId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CloneProject */\nexport type CloneProjectPayload = {\n  __typename?: \"CloneProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The id of the JobStatus for populating cloned fields. */\n  jobStatusId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new cloned project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CloneTemplateRepository */\nexport type CloneTemplateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * Whether to copy all branches from the template to the new repository. Defaults\n   * to copying only the default branch of the template.\n   */\n  includeAllBranches?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The name of the new repository. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The ID of the owner for the new repository. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The Node ID of the template repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CloneTemplateRepository */\nexport type CloneTemplateRepositoryPayload = {\n  __typename?: \"CloneTemplateRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can be closed */\nexport type Closable = {\n  /** `true` if the object is closed (definition of closed may depend on type) */\n  closed: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** Autogenerated input type of CloseIssue */\nexport type CloseIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the issue to be closed. */\n  issueId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CloseIssue */\nexport type CloseIssuePayload = {\n  __typename?: \"CloseIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue that was closed. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ClosePullRequest */\nexport type ClosePullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the pull request to be closed. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ClosePullRequest */\nexport type ClosePullRequestPayload = {\n  __typename?: \"ClosePullRequestPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that was closed. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'closed' event on any `Closable`. */\nexport type ClosedEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"ClosedEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Object that was closed. */\n    closable: Closable;\n    /** Object which triggered the creation of this event. */\n    closer?: Maybe<Closer>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The HTTP path for this closed event. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this closed event. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** The object which triggered a `ClosedEvent`. */\nexport type Closer = Commit | PullRequest;\n\n/** The Code of Conduct for a repository */\nexport type CodeOfConduct = Node & {\n  __typename?: \"CodeOfConduct\";\n  /** The body of the Code of Conduct */\n  body?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The key for the Code of Conduct */\n  key: Scalars[\"String\"][\"output\"];\n  /** The formal name of the Code of Conduct */\n  name: Scalars[\"String\"][\"output\"];\n  /** The HTTP path for this Code of Conduct */\n  resourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for this Code of Conduct */\n  url?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Collaborators affiliation level with a subject. */\nexport enum CollaboratorAffiliation {\n  /** All collaborators the authenticated user can see. */\n  All = \"ALL\",\n  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */\n  Direct = \"DIRECT\",\n  /** All outside collaborators of an organization-owned subject. */\n  Outside = \"OUTSIDE\",\n}\n\n/** Represents a comment. */\nexport type Comment = {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars[\"String\"][\"output\"];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars[\"HTML\"][\"output\"];\n  /** The body rendered to text. */\n  bodyText: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a comment. */\nexport type CommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A comment author association with repository. */\nexport enum CommentAuthorAssociation {\n  /** Author has been invited to collaborate on the repository. */\n  Collaborator = \"COLLABORATOR\",\n  /** Author has previously committed to the repository. */\n  Contributor = \"CONTRIBUTOR\",\n  /** Author has not previously committed to GitHub. */\n  FirstTimer = \"FIRST_TIMER\",\n  /** Author has not previously committed to the repository. */\n  FirstTimeContributor = \"FIRST_TIME_CONTRIBUTOR\",\n  /** Author is a placeholder for an unclaimed user. */\n  Mannequin = \"MANNEQUIN\",\n  /** Author is a member of the organization that owns the repository. */\n  Member = \"MEMBER\",\n  /** Author has no association with the repository. */\n  None = \"NONE\",\n  /** Author is the owner of the repository. */\n  Owner = \"OWNER\",\n}\n\n/** The possible errors that will prevent a user from updating a comment. */\nexport enum CommentCannotUpdateReason {\n  /** Unable to create comment because repository is archived. */\n  Archived = \"ARCHIVED\",\n  /** You cannot update this comment */\n  Denied = \"DENIED\",\n  /** You must be the author or have write access to this repository to update this comment. */\n  InsufficientAccess = \"INSUFFICIENT_ACCESS\",\n  /** Unable to create comment because issue is locked. */\n  Locked = \"LOCKED\",\n  /** You must be logged in to update this comment. */\n  LoginRequired = \"LOGIN_REQUIRED\",\n  /** Repository is under maintenance. */\n  Maintenance = \"MAINTENANCE\",\n  /** At least one email address must be verified to update this comment. */\n  VerifiedEmailRequired = \"VERIFIED_EMAIL_REQUIRED\",\n}\n\n/** Represents a 'comment_deleted' event on a given issue or pull request. */\nexport type CommentDeletedEvent = Node & {\n  __typename?: \"CommentDeletedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The user who authored the deleted comment. */\n  deletedCommentAuthor?: Maybe<Actor>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Represents a Git commit. */\nexport type Commit = GitObject &\n  Node &\n  Subscribable &\n  UniformResourceLocatable & {\n    __typename?: \"Commit\";\n    /** An abbreviated version of the Git object ID */\n    abbreviatedOid: Scalars[\"String\"][\"output\"];\n    /** The number of additions in this commit. */\n    additions: Scalars[\"Int\"][\"output\"];\n    /**\n     * The merged Pull Request that introduced the commit to the repository. If the\n     * commit is not present in the default branch, additionally returns open Pull\n     * Requests associated with the commit\n     */\n    associatedPullRequests?: Maybe<PullRequestConnection>;\n    /** Authorship details of the commit. */\n    author?: Maybe<GitActor>;\n    /** Check if the committer and the author match. */\n    authoredByCommitter: Scalars[\"Boolean\"][\"output\"];\n    /** The datetime when this commit was authored. */\n    authoredDate: Scalars[\"DateTime\"][\"output\"];\n    /**\n     * The list of authors for this commit based on the git author and the Co-authored-by\n     * message trailer. The git author will always be first.\n     */\n    authors: GitActorConnection;\n    /** Fetches `git blame` information. */\n    blame: Blame;\n    /** The number of changed files in this commit. */\n    changedFiles: Scalars[\"Int\"][\"output\"];\n    /** The check suites associated with a commit. */\n    checkSuites?: Maybe<CheckSuiteConnection>;\n    /** Comments made on the commit. */\n    comments: CommitCommentConnection;\n    /** The HTTP path for this Git object */\n    commitResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this Git object */\n    commitUrl: Scalars[\"URI\"][\"output\"];\n    /** The datetime when this commit was committed. */\n    committedDate: Scalars[\"DateTime\"][\"output\"];\n    /** Check if committed via GitHub web UI. */\n    committedViaWeb: Scalars[\"Boolean\"][\"output\"];\n    /** Committer details of the commit. */\n    committer?: Maybe<GitActor>;\n    /** The number of deletions in this commit. */\n    deletions: Scalars[\"Int\"][\"output\"];\n    /** The deployments associated with a commit. */\n    deployments?: Maybe<DeploymentConnection>;\n    /** The tree entry representing the file located at the given path. */\n    file?: Maybe<TreeEntry>;\n    /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */\n    history: CommitHistoryConnection;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The Git commit message */\n    message: Scalars[\"String\"][\"output\"];\n    /** The Git commit message body */\n    messageBody: Scalars[\"String\"][\"output\"];\n    /** The commit message body rendered to HTML. */\n    messageBodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The Git commit message headline */\n    messageHeadline: Scalars[\"String\"][\"output\"];\n    /** The commit message headline rendered to HTML. */\n    messageHeadlineHTML: Scalars[\"HTML\"][\"output\"];\n    /** The Git object ID */\n    oid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The organization this commit was made on behalf of. */\n    onBehalfOf?: Maybe<Organization>;\n    /** The parents of a commit. */\n    parents: CommitConnection;\n    /** The datetime when this commit was pushed. */\n    pushedDate?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The Repository this commit belongs to */\n    repository: Repository;\n    /** The HTTP path for this commit */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Commit signing information, if present. */\n    signature?: Maybe<GitSignature>;\n    /** Status information for this commit */\n    status?: Maybe<Status>;\n    /** Check and Status rollup information for this commit. */\n    statusCheckRollup?: Maybe<StatusCheckRollup>;\n    /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */\n    submodules: SubmoduleConnection;\n    /**\n     * Returns a URL to download a tarball archive for a repository.\n     * Note: For private repositories, these links are temporary and expire after five minutes.\n     */\n    tarballUrl: Scalars[\"URI\"][\"output\"];\n    /** Commit's root Tree */\n    tree: Tree;\n    /** The HTTP path for the tree of this commit */\n    treeResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for the tree of this commit */\n    treeUrl: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this commit */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n    /**\n     * Returns a URL to download a zipball archive for a repository.\n     * Note: For private repositories, these links are temporary and expire after five minutes.\n     */\n    zipballUrl: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents a Git commit. */\nexport type CommitAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<PullRequestOrder>;\n};\n\n/** Represents a Git commit. */\nexport type CommitAuthorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a Git commit. */\nexport type CommitBlameArgs = {\n  path: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents a Git commit. */\nexport type CommitCheckSuitesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<CheckSuiteFilter>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a Git commit. */\nexport type CommitCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a Git commit. */\nexport type CommitDeploymentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  environments?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n/** Represents a Git commit. */\nexport type CommitFileArgs = {\n  path: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents a Git commit. */\nexport type CommitHistoryArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  author?: InputMaybe<CommitAuthor>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  path?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  since?: InputMaybe<Scalars[\"GitTimestamp\"][\"input\"]>;\n  until?: InputMaybe<Scalars[\"GitTimestamp\"][\"input\"]>;\n};\n\n/** Represents a Git commit. */\nexport type CommitParentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a Git commit. */\nexport type CommitSubmodulesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Specifies an author for filtering Git commits. */\nexport type CommitAuthor = {\n  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */\n  emails?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  /**\n   * ID of a User to filter by. If non-null, only commits authored by this user\n   * will be returned. This field takes precedence over emails.\n   */\n  id?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Represents a comment on a given Commit. */\nexport type CommitComment = Comment &\n  Deletable &\n  Minimizable &\n  Node &\n  Reactable &\n  RepositoryNode &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"CommitComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** Identifies the comment body. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the commit associated with the comment, if the commit exists. */\n    commit?: Maybe<Commit>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not a comment has been minimized. */\n    isMinimized: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Returns why the comment was minimized. */\n    minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the file path associated with the comment. */\n    path?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the line position associated with the comment. */\n    position?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path permalink for this commit comment. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL permalink for this commit comment. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can minimize this object. */\n    viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for CommitComment. */\nexport type CommitCommentConnection = {\n  __typename?: \"CommitCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CommitComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CommitCommentEdge = {\n  __typename?: \"CommitCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CommitComment>;\n};\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThread = Node &\n  RepositoryNode & {\n    __typename?: \"CommitCommentThread\";\n    /** The comments that exist in this thread. */\n    comments: CommitCommentConnection;\n    /** The commit the comments were made on. */\n    commit?: Maybe<Commit>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The file the comments were made on. */\n    path?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The position in the diff for the commit that the comment was made on. */\n    position?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The repository associated with this node. */\n    repository: Repository;\n  };\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for Commit. */\nexport type CommitConnection = {\n  __typename?: \"CommitConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Ordering options for commit contribution connections. */\nexport type CommitContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field by which to order commit contributions. */\n  field: CommitContributionOrderField;\n};\n\n/** Properties by which commit contribution connections can be ordered. */\nexport enum CommitContributionOrderField {\n  /** Order commit contributions by how many commits they represent. */\n  CommitCount = \"COMMIT_COUNT\",\n  /** Order commit contributions by when they were made. */\n  OccurredAt = \"OCCURRED_AT\",\n}\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepository = {\n  __typename?: \"CommitContributionsByRepository\";\n  /** The commit contributions, each representing a day. */\n  contributions: CreatedCommitContributionConnection;\n  /** The repository in which the commits were made. */\n  repository: Repository;\n  /** The HTTP path for the user's commits to the repository in this time range. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for the user's commits to the repository in this time range. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<CommitContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type CommitEdge = {\n  __typename?: \"CommitEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Commit>;\n};\n\n/** The connection type for Commit. */\nexport type CommitHistoryConnection = {\n  __typename?: \"CommitHistoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A message to include with a new commit */\nexport type CommitMessage = {\n  /** The body of the message. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The headline of the message. */\n  headline: Scalars[\"String\"][\"input\"];\n};\n\n/**\n * A git ref for a commit to be appended to.\n *\n * The ref must be a branch, i.e. its fully qualified name must start\n * with `refs/heads/` (although the input is not required to be fully\n * qualified).\n *\n * The Ref may be specified by its global node ID or by the\n * repository nameWithOwner and branch name.\n *\n * ### Examples\n *\n * Specify a branch using a global node ID:\n *\n *     { \"id\": \"MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=\" }\n *\n * Specify a branch using nameWithOwner and branch name:\n *\n *     {\n *       \"nameWithOwner\": \"github/graphql-client\",\n *       \"branchName\": \"main\"\n *     }\n */\nexport type CommittableBranch = {\n  /** The unqualified name of the branch to append the commit to. */\n  branchName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the Ref to be updated. */\n  id?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The nameWithOwner of the repository to commit to. */\n  repositoryNameWithOwner?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Represents a 'connected' event on a given issue or pull request. */\nexport type ConnectedEvent = Node & {\n  __typename?: \"ConnectedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n  /** Issue or pull request that made the reference. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was connected. */\n  subject: ReferencedSubject;\n};\n\n/** Represents a contribution a user made on GitHub, such as opening an issue. */\nexport type Contribution = {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** A calendar of contributions made on GitHub by a user. */\nexport type ContributionCalendar = {\n  __typename?: \"ContributionCalendar\";\n  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */\n  colors: Array<Scalars[\"String\"][\"output\"]>;\n  /** Determine if the color set was chosen because it's currently Halloween. */\n  isHalloween: Scalars[\"Boolean\"][\"output\"];\n  /** A list of the months of contributions in this calendar. */\n  months: Array<ContributionCalendarMonth>;\n  /** The count of total contributions in the calendar. */\n  totalContributions: Scalars[\"Int\"][\"output\"];\n  /** A list of the weeks of contributions in this calendar. */\n  weeks: Array<ContributionCalendarWeek>;\n};\n\n/** Represents a single day of contributions on GitHub by a user. */\nexport type ContributionCalendarDay = {\n  __typename?: \"ContributionCalendarDay\";\n  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */\n  color: Scalars[\"String\"][\"output\"];\n  /** How many contributions were made by the user on this day. */\n  contributionCount: Scalars[\"Int\"][\"output\"];\n  /**\n   * Indication of contributions, relative to other days. Can be used to indicate\n   * which color to represent this day on a calendar.\n   */\n  contributionLevel: ContributionLevel;\n  /** The day this square represents. */\n  date: Scalars[\"Date\"][\"output\"];\n  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */\n  weekday: Scalars[\"Int\"][\"output\"];\n};\n\n/** A month of contributions in a user's contribution graph. */\nexport type ContributionCalendarMonth = {\n  __typename?: \"ContributionCalendarMonth\";\n  /** The date of the first day of this month. */\n  firstDay: Scalars[\"Date\"][\"output\"];\n  /** The name of the month. */\n  name: Scalars[\"String\"][\"output\"];\n  /** How many weeks started in this month. */\n  totalWeeks: Scalars[\"Int\"][\"output\"];\n  /** The year the month occurred in. */\n  year: Scalars[\"Int\"][\"output\"];\n};\n\n/** A week of contributions in a user's contribution graph. */\nexport type ContributionCalendarWeek = {\n  __typename?: \"ContributionCalendarWeek\";\n  /** The days of contributions in this week. */\n  contributionDays: Array<ContributionCalendarDay>;\n  /** The date of the earliest square in this week. */\n  firstDay: Scalars[\"Date\"][\"output\"];\n};\n\n/** Varying levels of contributions from none to many. */\nexport enum ContributionLevel {\n  /** Lowest 25% of days of contributions. */\n  FirstQuartile = \"FIRST_QUARTILE\",\n  /** Highest 25% of days of contributions. More contributions than the third quartile. */\n  FourthQuartile = \"FOURTH_QUARTILE\",\n  /** No contributions occurred. */\n  None = \"NONE\",\n  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */\n  SecondQuartile = \"SECOND_QUARTILE\",\n  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */\n  ThirdQuartile = \"THIRD_QUARTILE\",\n}\n\n/** Ordering options for contribution connections. */\nexport type ContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollection = {\n  __typename?: \"ContributionsCollection\";\n  /** Commit contributions made by the user, grouped by repository. */\n  commitContributionsByRepository: Array<CommitContributionsByRepository>;\n  /** A calendar of this user's contributions on GitHub. */\n  contributionCalendar: ContributionCalendar;\n  /** The years the user has been making contributions with the most recent year first. */\n  contributionYears: Array<Scalars[\"Int\"][\"output\"]>;\n  /** Determine if this collection's time span ends in the current month. */\n  doesEndInCurrentMonth: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * The date of the first restricted contribution the user made in this time\n   * period. Can only be non-null when the user has enabled private contribution counts.\n   */\n  earliestRestrictedContributionDate?: Maybe<Scalars[\"Date\"][\"output\"]>;\n  /** The ending date and time of this collection. */\n  endedAt: Scalars[\"DateTime\"][\"output\"];\n  /**\n   * The first issue the user opened on GitHub. This will be null if that issue was\n   * opened outside the collection's time range and ignoreTimeRange is false. If\n   * the issue is not visible but the user has opted to show private contributions,\n   * a RestrictedContribution will be returned.\n   */\n  firstIssueContribution?: Maybe<CreatedIssueOrRestrictedContribution>;\n  /**\n   * The first pull request the user opened on GitHub. This will be null if that\n   * pull request was opened outside the collection's time range and\n   * ignoreTimeRange is not true. If the pull request is not visible but the user\n   * has opted to show private contributions, a RestrictedContribution will be returned.\n   */\n  firstPullRequestContribution?: Maybe<CreatedPullRequestOrRestrictedContribution>;\n  /**\n   * The first repository the user created on GitHub. This will be null if that\n   * first repository was created outside the collection's time range and\n   * ignoreTimeRange is false. If the repository is not visible, then a\n   * RestrictedContribution is returned.\n   */\n  firstRepositoryContribution?: Maybe<CreatedRepositoryOrRestrictedContribution>;\n  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */\n  hasActivityInThePast: Scalars[\"Boolean\"][\"output\"];\n  /** Determine if there are any contributions in this collection. */\n  hasAnyContributions: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Determine if the user made any contributions in this time frame whose details\n   * are not visible because they were made in a private repository. Can only be\n   * true if the user enabled private contribution counts.\n   */\n  hasAnyRestrictedContributions: Scalars[\"Boolean\"][\"output\"];\n  /** Whether or not the collector's time span is all within the same day. */\n  isSingleDay: Scalars[\"Boolean\"][\"output\"];\n  /** A list of issues the user opened. */\n  issueContributions: CreatedIssueContributionConnection;\n  /** Issue contributions made by the user, grouped by repository. */\n  issueContributionsByRepository: Array<IssueContributionsByRepository>;\n  /**\n   * When the user signed up for GitHub. This will be null if that sign up date\n   * falls outside the collection's time range and ignoreTimeRange is false.\n   */\n  joinedGitHubContribution?: Maybe<JoinedGitHubContribution>;\n  /**\n   * The date of the most recent restricted contribution the user made in this time\n   * period. Can only be non-null when the user has enabled private contribution counts.\n   */\n  latestRestrictedContributionDate?: Maybe<Scalars[\"Date\"][\"output\"]>;\n  /**\n   * When this collection's time range does not include any activity from the user, use this\n   * to get a different collection from an earlier time range that does have activity.\n   */\n  mostRecentCollectionWithActivity?: Maybe<ContributionsCollection>;\n  /**\n   * Returns a different contributions collection from an earlier time range than this one\n   * that does not have any contributions.\n   */\n  mostRecentCollectionWithoutActivity?: Maybe<ContributionsCollection>;\n  /**\n   * The issue the user opened on GitHub that received the most comments in the specified\n   * time frame.\n   */\n  popularIssueContribution?: Maybe<CreatedIssueContribution>;\n  /**\n   * The pull request the user opened on GitHub that received the most comments in the\n   * specified time frame.\n   */\n  popularPullRequestContribution?: Maybe<CreatedPullRequestContribution>;\n  /** Pull request contributions made by the user. */\n  pullRequestContributions: CreatedPullRequestContributionConnection;\n  /** Pull request contributions made by the user, grouped by repository. */\n  pullRequestContributionsByRepository: Array<PullRequestContributionsByRepository>;\n  /** Pull request review contributions made by the user. */\n  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection;\n  /** Pull request review contributions made by the user, grouped by repository. */\n  pullRequestReviewContributionsByRepository: Array<PullRequestReviewContributionsByRepository>;\n  /** A list of repositories owned by the user that the user created in this time range. */\n  repositoryContributions: CreatedRepositoryContributionConnection;\n  /**\n   * A count of contributions made by the user that the viewer cannot access. Only\n   * non-zero when the user has chosen to share their private contribution counts.\n   */\n  restrictedContributionsCount: Scalars[\"Int\"][\"output\"];\n  /** The beginning date and time of this collection. */\n  startedAt: Scalars[\"DateTime\"][\"output\"];\n  /** How many commits were made by the user in this time span. */\n  totalCommitContributions: Scalars[\"Int\"][\"output\"];\n  /** How many issues the user opened. */\n  totalIssueContributions: Scalars[\"Int\"][\"output\"];\n  /** How many pull requests the user opened. */\n  totalPullRequestContributions: Scalars[\"Int\"][\"output\"];\n  /** How many pull request reviews the user left. */\n  totalPullRequestReviewContributions: Scalars[\"Int\"][\"output\"];\n  /** How many different repositories the user committed to. */\n  totalRepositoriesWithContributedCommits: Scalars[\"Int\"][\"output\"];\n  /** How many different repositories the user opened issues in. */\n  totalRepositoriesWithContributedIssues: Scalars[\"Int\"][\"output\"];\n  /** How many different repositories the user left pull request reviews in. */\n  totalRepositoriesWithContributedPullRequestReviews: Scalars[\"Int\"][\"output\"];\n  /** How many different repositories the user opened pull requests in. */\n  totalRepositoriesWithContributedPullRequests: Scalars[\"Int\"][\"output\"];\n  /** How many repositories the user created. */\n  totalRepositoryContributions: Scalars[\"Int\"][\"output\"];\n  /** The user who made the contributions in this collection. */\n  user: User;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionCommitContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  maxRepositories?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  maxRepositories?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalIssueContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalPullRequestContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludePopular?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoryContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** Autogenerated input type of ConvertProjectCardNoteToIssue */\nexport type ConvertProjectCardNoteToIssueInput = {\n  /** The body of the newly created issue. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ProjectCard ID to convert. */\n  projectCardId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the repository to create the issue in. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The title of the newly created issue. Defaults to the card's note text. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of ConvertProjectCardNoteToIssue */\nexport type ConvertProjectCardNoteToIssuePayload = {\n  __typename?: \"ConvertProjectCardNoteToIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of ConvertPullRequestToDraft */\nexport type ConvertPullRequestToDraftInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the pull request to convert to draft */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ConvertPullRequestToDraft */\nexport type ConvertPullRequestToDraftPayload = {\n  __typename?: \"ConvertPullRequestToDraftPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that is now a draft. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'convert_to_draft' event on a given pull request. */\nexport type ConvertToDraftEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"ConvertToDraftEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** PullRequest referenced by event. */\n    pullRequest: PullRequest;\n    /** The HTTP path for this convert to draft event. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this convert to draft event. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\nexport type ConvertedNoteToIssueEvent = Node & {\n  __typename?: \"ConvertedNoteToIssueEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars[\"String\"][\"output\"];\n};\n\n/** Represents a 'converted_to_discussion' event on a given issue. */\nexport type ConvertedToDiscussionEvent = Node & {\n  __typename?: \"ConvertedToDiscussionEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The discussion that the issue was converted into. */\n  discussion?: Maybe<Discussion>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Autogenerated input type of CreateBranchProtectionRule */\nexport type CreateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is branch creation a protected operation. */\n  blocksCreations?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern: Scalars[\"String\"][\"input\"];\n  /** A list of User, Team or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The global relay id of the repository in which a new branch protection rule should be created in. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n};\n\n/** Autogenerated return type of CreateBranchProtectionRule */\nexport type CreateBranchProtectionRulePayload = {\n  __typename?: \"CreateBranchProtectionRulePayload\";\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of CreateCheckRun */\nexport type CreateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars[\"URI\"][\"input\"]>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The SHA of the head commit. */\n  headSha: Scalars[\"GitObjectID\"][\"input\"];\n  /** The name of the check. */\n  name: Scalars[\"String\"][\"input\"];\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of CreateCheckRun */\nexport type CreateCheckRunPayload = {\n  __typename?: \"CreateCheckRunPayload\";\n  /** The newly created check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of CreateCheckSuite */\nexport type CreateCheckSuiteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The SHA of the head commit. */\n  headSha: Scalars[\"GitObjectID\"][\"input\"];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateCheckSuite */\nexport type CreateCheckSuitePayload = {\n  __typename?: \"CreateCheckSuitePayload\";\n  /** The newly created check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of CreateCommitOnBranch */\nexport type CreateCommitOnBranchInput = {\n  /** The Ref to be updated.  Must be a branch. */\n  branch: CommittableBranch;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The git commit oid expected at the head of the branch prior to the commit */\n  expectedHeadOid: Scalars[\"GitObjectID\"][\"input\"];\n  /** A description of changes to files in this commit. */\n  fileChanges?: InputMaybe<FileChanges>;\n  /** The commit message the be included with the commit. */\n  message: CommitMessage;\n};\n\n/** Autogenerated return type of CreateCommitOnBranch */\nexport type CreateCommitOnBranchPayload = {\n  __typename?: \"CreateCommitOnBranchPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new commit. */\n  commit?: Maybe<Commit>;\n  /** The ref which has been updated to point to the new commit. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateDeployment */\nexport type CreateDeploymentInput = {\n  /** Attempt to automatically merge the default branch into the requested ref, defaults to true. */\n  autoMerge?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Short description of the deployment. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Name for the target deployment environment. */\n  environment?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** JSON payload with extra information about the deployment. */\n  payload?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The node ID of the ref to be deployed. */\n  refId: Scalars[\"ID\"][\"input\"];\n  /** The node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /**\n   * The status contexts to verify against commit status checks. To bypass required\n   * contexts, pass an empty array. Defaults to all unique contexts.\n   */\n  requiredContexts?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  /** Specifies a task to execute. */\n  task?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of CreateDeployment */\nexport type CreateDeploymentPayload = {\n  __typename?: \"CreateDeploymentPayload\";\n  /** True if the default branch has been auto-merged into the deployment ref. */\n  autoMerged?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new deployment. */\n  deployment?: Maybe<Deployment>;\n};\n\n/** Autogenerated input type of CreateDeploymentStatus */\nexport type CreateDeploymentStatusInput = {\n  /**\n   * Adds a new inactive status to all non-transient, non-production environment\n   * deployments with the same repository and environment name as the created\n   * status's deployment.\n   */\n  autoInactive?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The node ID of the deployment. */\n  deploymentId: Scalars[\"ID\"][\"input\"];\n  /** A short description of the status. Maximum length of 140 characters. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */\n  environment?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Sets the URL for accessing your environment. */\n  environmentUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * The log URL to associate with this status.       This URL should contain\n   * output to keep the user updated while the task is running       or serve as\n   * historical information for what happened in the deployment.\n   */\n  logUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The state of the deployment. */\n  state: DeploymentStatusState;\n};\n\n/** Autogenerated return type of CreateDeploymentStatus */\nexport type CreateDeploymentStatusPayload = {\n  __typename?: \"CreateDeploymentStatusPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new deployment status. */\n  deploymentStatus?: Maybe<DeploymentStatus>;\n};\n\n/** Autogenerated input type of CreateDiscussion */\nexport type CreateDiscussionInput = {\n  /** The body of the discussion. */\n  body: Scalars[\"String\"][\"input\"];\n  /** The id of the discussion category to associate with this discussion. */\n  categoryId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the repository on which to create the discussion. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The title of the discussion. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateDiscussion */\nexport type CreateDiscussionPayload = {\n  __typename?: \"CreateDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The discussion that was just created. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of CreateEnterpriseOrganization */\nexport type CreateEnterpriseOrganizationInput = {\n  /** The logins for the administrators of the new organization. */\n  adminLogins: Array<Scalars[\"String\"][\"input\"]>;\n  /** The email used for sending billing receipts. */\n  billingEmail: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise owning the new organization. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of the new organization. */\n  login: Scalars[\"String\"][\"input\"];\n  /** The profile name of the new organization. */\n  profileName: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateEnterpriseOrganization */\nexport type CreateEnterpriseOrganizationPayload = {\n  __typename?: \"CreateEnterpriseOrganizationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise that owns the created organization. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was created. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of CreateEnvironment */\nexport type CreateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the environment. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateEnvironment */\nexport type CreateEnvironmentPayload = {\n  __typename?: \"CreateEnvironmentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new or existing environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of CreateIpAllowListEntry */\nexport type CreateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars[\"Boolean\"][\"input\"];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the owner for which to create the new IP allow list entry. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateIpAllowListEntry */\nexport type CreateIpAllowListEntryPayload = {\n  __typename?: \"CreateIpAllowListEntryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The IP allow list entry that was created. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of CreateIssue */\nexport type CreateIssueInput = {\n  /** The Node ID for the user assignee for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */\n  issueTemplate?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The title for the issue. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateIssue */\nexport type CreateIssuePayload = {\n  __typename?: \"CreateIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of CreateLabel */\nexport type CreateLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A 6 character hex code, without the leading #, identifying the color of the label. */\n  color: Scalars[\"String\"][\"input\"];\n  /** A brief description of the label, such as its purpose. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the label. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateLabel */\nexport type CreateLabelPayload = {\n  __typename?: \"CreateLabelPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new label. */\n  label?: Maybe<Label>;\n};\n\n/** Autogenerated input type of CreateMigrationSource */\nexport type CreateMigrationSourceInput = {\n  /** The Octoshift migration source access token. */\n  accessToken?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Octoshift migration source name. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The ID of the organization that will own the Octoshift migration source. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The Octoshift migration source type. */\n  type: MigrationSourceType;\n  /** The Octoshift migration source URL. */\n  url: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateMigrationSource */\nexport type CreateMigrationSourcePayload = {\n  __typename?: \"CreateMigrationSourcePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The created Octoshift migration source. */\n  migrationSource?: Maybe<MigrationSource>;\n};\n\n/** Autogenerated input type of CreateProject */\nexport type CreateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of project. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The owner ID to create the project under. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** A list of repository IDs to create as linked repositories for the project */\n  repositoryIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The name of the GitHub-provided template. */\n  template?: InputMaybe<ProjectTemplate>;\n};\n\n/** Autogenerated return type of CreateProject */\nexport type CreateProjectPayload = {\n  __typename?: \"CreateProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CreatePullRequest */\nexport type CreatePullRequestInput = {\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository. You cannot update the base branch on a pull request to point\n   * to another repository.\n   */\n  baseRefName: Scalars[\"String\"][\"input\"];\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Indicates whether this pull request should be a draft. */\n  draft?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * The name of the branch where your changes are implemented. For cross-repository pull requests\n   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n   */\n  headRefName: Scalars[\"String\"][\"input\"];\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The title of the pull request. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreatePullRequest */\nexport type CreatePullRequestPayload = {\n  __typename?: \"CreatePullRequestPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of CreateRef */\nexport type CreateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */\n  name: Scalars[\"String\"][\"input\"];\n  /** The GitObjectID that the new Ref shall target. Must point to a commit. */\n  oid: Scalars[\"GitObjectID\"][\"input\"];\n  /** The Node ID of the Repository to create the Ref in. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateRef */\nexport type CreateRefPayload = {\n  __typename?: \"CreateRefPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The newly created ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateRepository */\nexport type CreateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The URL for a web page about this repository. */\n  homepageUrl?: InputMaybe<Scalars[\"URI\"][\"input\"]>;\n  /** The name of the new repository. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The ID of the owner for the new repository. */\n  ownerId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * When an organization is specified as the owner, this ID identifies the team\n   * that should be granted access to the new repository.\n   */\n  teamId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * Whether this repository should be marked as a template such that anyone who\n   * can access it can create new repositories with the same files and directory structure.\n   */\n  template?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CreateRepository */\nexport type CreateRepositoryPayload = {\n  __typename?: \"CreateRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of CreateSponsorsTier */\nexport type CreateSponsorsTierInput = {\n  /** The value of the new tier in US dollars. Valid values: 1-12000. */\n  amount: Scalars[\"Int\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */\n  description: Scalars[\"String\"][\"input\"];\n  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */\n  isRecurring?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * Whether to make the tier available immediately for sponsors to choose.\n   * Defaults to creating a draft tier that will not be publicly visible.\n   */\n  publish?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * Optional ID of the private repository that sponsors at this tier should gain\n   * read-only access to. Must be owned by an organization.\n   */\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * Optional name of the private repository that sponsors at this tier should gain\n   * read-only access to. Must be owned by an organization. Necessary if\n   * repositoryOwnerLogin is given. Will be ignored if repositoryId is given.\n   */\n  repositoryName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * Optional login of the organization owner of the private repository that\n   * sponsors at this tier should gain read-only access to. Necessary if\n   * repositoryName is given. Will be ignored if repositoryId is given.\n   */\n  repositoryOwnerLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * The ID of the user or organization who owns the GitHub Sponsors profile.\n   * Defaults to the current user if omitted and sponsorableLogin is not given.\n   */\n  sponsorableId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * The username of the user or organization who owns the GitHub Sponsors profile.\n   * Defaults to the current user if omitted and sponsorableId is not given.\n   */\n  sponsorableLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Optional message new sponsors at this tier will receive. */\n  welcomeMessage?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of CreateSponsorsTier */\nexport type CreateSponsorsTierPayload = {\n  __typename?: \"CreateSponsorsTierPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of CreateSponsorship */\nexport type CreateSponsorshipInput = {\n  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */\n  amount?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */\n  isRecurring?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * Specify whether others should be able to see that the sponsor is sponsoring\n   * the sponsorable. Public visibility still does not reveal which tier is used.\n   */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */\n  tierId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of CreateSponsorship */\nexport type CreateSponsorshipPayload = {\n  __typename?: \"CreateSponsorshipPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The sponsorship that was started. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussionComment */\nexport type CreateTeamDiscussionCommentInput = {\n  /** The content of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the discussion to which the comment belongs. */\n  discussionId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateTeamDiscussionComment */\nexport type CreateTeamDiscussionCommentPayload = {\n  __typename?: \"CreateTeamDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new comment. */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussion */\nexport type CreateTeamDiscussionInput = {\n  /** The content of the discussion. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * If true, restricts the visibility of this discussion to team members and\n   * organization admins. If false or not specified, allows any organization member\n   * to view this discussion.\n   */\n  private?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The ID of the team to which the discussion belongs. */\n  teamId: Scalars[\"ID\"][\"input\"];\n  /** The title of the discussion. */\n  title: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of CreateTeamDiscussion */\nexport type CreateTeamDiscussionPayload = {\n  __typename?: \"CreateTeamDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new discussion. */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Represents the contribution a user made by committing to a repository. */\nexport type CreatedCommitContribution = Contribution & {\n  __typename?: \"CreatedCommitContribution\";\n  /** How many commits were made on this day to this repository by the user. */\n  commitCount: Scalars[\"Int\"][\"output\"];\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The repository the user made a commit in. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedCommitContribution. */\nexport type CreatedCommitContributionConnection = {\n  __typename?: \"CreatedCommitContributionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedCommitContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedCommitContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of commits across days and repositories in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CreatedCommitContributionEdge = {\n  __typename?: \"CreatedCommitContributionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedCommitContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by opening an issue. */\nexport type CreatedIssueContribution = Contribution & {\n  __typename?: \"CreatedIssueContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** The issue that was opened. */\n  issue: Issue;\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedIssueContribution. */\nexport type CreatedIssueContributionConnection = {\n  __typename?: \"CreatedIssueContributionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedIssueContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedIssueContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CreatedIssueContributionEdge = {\n  __typename?: \"CreatedIssueContributionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedIssueContribution>;\n};\n\n/** Represents either a issue the viewer can access or a restricted contribution. */\nexport type CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution;\n\n/** Represents the contribution a user made on GitHub by opening a pull request. */\nexport type CreatedPullRequestContribution = Contribution & {\n  __typename?: \"CreatedPullRequestContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The pull request that was opened. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestContribution. */\nexport type CreatedPullRequestContributionConnection = {\n  __typename?: \"CreatedPullRequestContributionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestContributionEdge = {\n  __typename?: \"CreatedPullRequestContributionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestContribution>;\n};\n\n/** Represents either a pull request the viewer can access or a restricted contribution. */\nexport type CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution;\n\n/** Represents the contribution a user made by leaving a review on a pull request. */\nexport type CreatedPullRequestReviewContribution = Contribution & {\n  __typename?: \"CreatedPullRequestReviewContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The pull request the user reviewed. */\n  pullRequest: PullRequest;\n  /** The review the user left on the pull request. */\n  pullRequestReview: PullRequestReview;\n  /** The repository containing the pull request that the user reviewed. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestReviewContribution. */\nexport type CreatedPullRequestReviewContributionConnection = {\n  __typename?: \"CreatedPullRequestReviewContributionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestReviewContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestReviewContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestReviewContributionEdge = {\n  __typename?: \"CreatedPullRequestReviewContributionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestReviewContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by creating a repository. */\nexport type CreatedRepositoryContribution = Contribution & {\n  __typename?: \"CreatedRepositoryContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The repository that was created. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedRepositoryContribution. */\nexport type CreatedRepositoryContributionConnection = {\n  __typename?: \"CreatedRepositoryContributionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedRepositoryContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedRepositoryContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type CreatedRepositoryContributionEdge = {\n  __typename?: \"CreatedRepositoryContributionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedRepositoryContribution>;\n};\n\n/** Represents either a repository the viewer can access or a restricted contribution. */\nexport type CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution;\n\n/** Represents a mention made by one issue or pull request to another. */\nexport type CrossReferencedEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"CrossReferencedEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Reference originated in a different repository. */\n    isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies when the reference was made. */\n    referencedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP path for this pull request. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Issue or pull request that made the reference. */\n    source: ReferencedSubject;\n    /** Issue or pull request to which the reference was made. */\n    target: ReferencedSubject;\n    /** The HTTP URL for this pull request. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Checks if the target will be closed when the source is merged. */\n    willCloseTarget: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** Autogenerated input type of DeclineTopicSuggestion */\nexport type DeclineTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the suggested topic. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The reason why the suggested topic is declined. */\n  reason: TopicSuggestionDeclineReason;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeclineTopicSuggestion */\nexport type DeclineTopicSuggestionPayload = {\n  __typename?: \"DeclineTopicSuggestionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The declined topic. */\n  topic?: Maybe<Topic>;\n};\n\n/** The possible base permissions for repositories. */\nexport enum DefaultRepositoryPermissionField {\n  /** Can read, write, and administrate repos by default */\n  Admin = \"ADMIN\",\n  /** No access */\n  None = \"NONE\",\n  /** Can read repos by default */\n  Read = \"READ\",\n  /** Can read and write repos by default */\n  Write = \"WRITE\",\n}\n\n/** Entities that can be deleted. */\nexport type Deletable = {\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Autogenerated input type of DeleteBranchProtectionRule */\nexport type DeleteBranchProtectionRuleInput = {\n  /** The global relay id of the branch protection rule to be deleted. */\n  branchProtectionRuleId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of DeleteBranchProtectionRule */\nexport type DeleteBranchProtectionRulePayload = {\n  __typename?: \"DeleteBranchProtectionRulePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteDeployment */\nexport type DeleteDeploymentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the deployment to be deleted. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteDeployment */\nexport type DeleteDeploymentPayload = {\n  __typename?: \"DeleteDeploymentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteDiscussionComment */\nexport type DeleteDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node id of the discussion comment to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteDiscussionComment */\nexport type DeleteDiscussionCommentPayload = {\n  __typename?: \"DeleteDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The discussion comment that was just deleted. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of DeleteDiscussion */\nexport type DeleteDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the discussion to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteDiscussion */\nexport type DeleteDiscussionPayload = {\n  __typename?: \"DeleteDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The discussion that was just deleted. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of DeleteEnvironment */\nexport type DeleteEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the environment to be deleted. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteEnvironment */\nexport type DeleteEnvironmentPayload = {\n  __typename?: \"DeleteEnvironmentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteIpAllowListEntry */\nexport type DeleteIpAllowListEntryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the IP allow list entry to delete. */\n  ipAllowListEntryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteIpAllowListEntry */\nexport type DeleteIpAllowListEntryPayload = {\n  __typename?: \"DeleteIpAllowListEntryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The IP allow list entry that was deleted. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of DeleteIssueComment */\nexport type DeleteIssueCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the comment to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteIssueComment */\nexport type DeleteIssueCommentPayload = {\n  __typename?: \"DeleteIssueCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteIssue */\nexport type DeleteIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the issue to delete. */\n  issueId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteIssue */\nexport type DeleteIssuePayload = {\n  __typename?: \"DeleteIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository the issue belonged to */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of DeleteLabel */\nexport type DeleteLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the label to be deleted. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteLabel */\nexport type DeleteLabelPayload = {\n  __typename?: \"DeleteLabelPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeletePackageVersion */\nexport type DeletePackageVersionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the package version to be deleted. */\n  packageVersionId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeletePackageVersion */\nexport type DeletePackageVersionPayload = {\n  __typename?: \"DeletePackageVersionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Whether or not the operation succeeded. */\n  success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteProjectCard */\nexport type DeleteProjectCardInput = {\n  /** The id of the card to delete. */\n  cardId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of DeleteProjectCard */\nexport type DeleteProjectCardPayload = {\n  __typename?: \"DeleteProjectCardPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The column the deleted card was in. */\n  column?: Maybe<ProjectColumn>;\n  /** The deleted card ID. */\n  deletedCardId?: Maybe<Scalars[\"ID\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteProjectColumn */\nexport type DeleteProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the column to delete. */\n  columnId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteProjectColumn */\nexport type DeleteProjectColumnPayload = {\n  __typename?: \"DeleteProjectColumnPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The deleted column ID. */\n  deletedColumnId?: Maybe<Scalars[\"ID\"][\"output\"]>;\n  /** The project the deleted column was in. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of DeleteProject */\nexport type DeleteProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Project ID to update. */\n  projectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated input type of DeleteProjectNextItem */\nexport type DeleteProjectNextItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the item to be removed. */\n  itemId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the Project from which the item should be removed. */\n  projectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteProjectNextItem */\nexport type DeleteProjectNextItemPayload = {\n  __typename?: \"DeleteProjectNextItemPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The ID of the deleted item. */\n  deletedItemId?: Maybe<Scalars[\"ID\"][\"output\"]>;\n};\n\n/** Autogenerated return type of DeleteProject */\nexport type DeleteProjectPayload = {\n  __typename?: \"DeleteProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository or organization the project was removed from. */\n  owner?: Maybe<ProjectOwner>;\n};\n\n/** Autogenerated input type of DeletePullRequestReviewComment */\nexport type DeletePullRequestReviewCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the comment to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeletePullRequestReviewComment */\nexport type DeletePullRequestReviewCommentPayload = {\n  __typename?: \"DeletePullRequestReviewCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request review the deleted comment belonged to. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of DeletePullRequestReview */\nexport type DeletePullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the pull request review to delete. */\n  pullRequestReviewId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeletePullRequestReview */\nexport type DeletePullRequestReviewPayload = {\n  __typename?: \"DeletePullRequestReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The deleted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of DeleteRef */\nexport type DeleteRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the Ref to be deleted. */\n  refId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteRef */\nexport type DeleteRefPayload = {\n  __typename?: \"DeleteRefPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussionComment */\nexport type DeleteTeamDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the comment to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussionComment */\nexport type DeleteTeamDiscussionCommentPayload = {\n  __typename?: \"DeleteTeamDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussion */\nexport type DeleteTeamDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The discussion ID to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussion */\nexport type DeleteTeamDiscussionPayload = {\n  __typename?: \"DeleteTeamDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of DeleteVerifiableDomain */\nexport type DeleteVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the verifiable domain to delete. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DeleteVerifiableDomain */\nexport type DeleteVerifiableDomainPayload = {\n  __typename?: \"DeleteVerifiableDomainPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The owning account from which the domain was deleted. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Represents a 'demilestoned' event on a given issue or pull request. */\nexport type DemilestonedEvent = Node & {\n  __typename?: \"DemilestonedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the milestone title associated with the 'demilestoned' event. */\n  milestoneTitle: Scalars[\"String\"][\"output\"];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** A Dependabot Update for a dependency in a repository */\nexport type DependabotUpdate = RepositoryNode & {\n  __typename?: \"DependabotUpdate\";\n  /** The error from a dependency update */\n  error?: Maybe<DependabotUpdateError>;\n  /** The associated pull request */\n  pullRequest?: Maybe<PullRequest>;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n/** An error produced from a Dependabot Update */\nexport type DependabotUpdateError = {\n  __typename?: \"DependabotUpdateError\";\n  /** The body of the error */\n  body: Scalars[\"String\"][\"output\"];\n  /** The error code */\n  errorType: Scalars[\"String\"][\"output\"];\n  /** The title of the error */\n  title: Scalars[\"String\"][\"output\"];\n};\n\n/** A dependency manifest entry */\nexport type DependencyGraphDependency = {\n  __typename?: \"DependencyGraphDependency\";\n  /** Does the dependency itself have dependencies? */\n  hasDependencies: Scalars[\"Boolean\"][\"output\"];\n  /** The original name of the package, as it appears in the manifest. */\n  packageLabel: Scalars[\"String\"][\"output\"];\n  /** The dependency package manager */\n  packageManager?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /**\n   * The name of the package in the canonical form used by the package manager.\n   * This may differ from the original textual form (see packageLabel), for example\n   * in a package manager that uses case-insensitive comparisons.\n   */\n  packageName: Scalars[\"String\"][\"output\"];\n  /** The repository containing the package */\n  repository?: Maybe<Repository>;\n  /** The dependency version requirements */\n  requirements: Scalars[\"String\"][\"output\"];\n};\n\n/** The connection type for DependencyGraphDependency. */\nexport type DependencyGraphDependencyConnection = {\n  __typename?: \"DependencyGraphDependencyConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DependencyGraphDependencyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DependencyGraphDependency>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DependencyGraphDependencyEdge = {\n  __typename?: \"DependencyGraphDependencyEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DependencyGraphDependency>;\n};\n\n/** The possible ecosystems of a dependency graph package. */\nexport enum DependencyGraphEcosystem {\n  /** GitHub Actions */\n  Actions = \"ACTIONS\",\n  /** PHP packages hosted at packagist.org */\n  Composer = \"COMPOSER\",\n  /** Go modules */\n  Go = \"GO\",\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = \"MAVEN\",\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = \"NPM\",\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = \"NUGET\",\n  /** Python packages hosted at PyPI.org */\n  Pip = \"PIP\",\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = \"RUBYGEMS\",\n}\n\n/** Dependency manifest for a repository */\nexport type DependencyGraphManifest = Node & {\n  __typename?: \"DependencyGraphManifest\";\n  /** Path to view the manifest file blob */\n  blobPath: Scalars[\"String\"][\"output\"];\n  /** A list of manifest dependencies */\n  dependencies?: Maybe<DependencyGraphDependencyConnection>;\n  /** The number of dependencies listed in the manifest */\n  dependenciesCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Is the manifest too big to parse? */\n  exceedsMaxSize: Scalars[\"Boolean\"][\"output\"];\n  /** Fully qualified manifest filename */\n  filename: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Were we able to parse the manifest? */\n  parseable: Scalars[\"Boolean\"][\"output\"];\n  /** The repository containing the manifest */\n  repository: Repository;\n};\n\n/** Dependency manifest for a repository */\nexport type DependencyGraphManifestDependenciesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for DependencyGraphManifest. */\nexport type DependencyGraphManifestConnection = {\n  __typename?: \"DependencyGraphManifestConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DependencyGraphManifestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DependencyGraphManifest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DependencyGraphManifestEdge = {\n  __typename?: \"DependencyGraphManifestEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DependencyGraphManifest>;\n};\n\n/** A repository deploy key. */\nexport type DeployKey = Node & {\n  __typename?: \"DeployKey\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The deploy key. */\n  key: Scalars[\"String\"][\"output\"];\n  /** Whether or not the deploy key is read only. */\n  readOnly: Scalars[\"Boolean\"][\"output\"];\n  /** The deploy key title. */\n  title: Scalars[\"String\"][\"output\"];\n  /** Whether or not the deploy key has been verified. */\n  verified: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** The connection type for DeployKey. */\nexport type DeployKeyConnection = {\n  __typename?: \"DeployKeyConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeployKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeployKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeployKeyEdge = {\n  __typename?: \"DeployKeyEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeployKey>;\n};\n\n/** Represents a 'deployed' event on a given pull request. */\nexport type DeployedEvent = Node & {\n  __typename?: \"DeployedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The deployment associated with the 'deployed' event. */\n  deployment: Deployment;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The ref associated with the 'deployed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents triggered deployment instance. */\nexport type Deployment = Node & {\n  __typename?: \"Deployment\";\n  /** Identifies the commit sha of the deployment. */\n  commit?: Maybe<Commit>;\n  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */\n  commitOid: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The deployment description. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The latest environment to which this deployment was made. */\n  environment?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The latest environment to which this deployment was made. */\n  latestEnvironment?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The latest status of this deployment. */\n  latestStatus?: Maybe<DeploymentStatus>;\n  /** The original environment to which this deployment was made. */\n  originalEnvironment?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Extra information that a deployment system might need. */\n  payload?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the Ref of the deployment, if the deployment was created by ref. */\n  ref?: Maybe<Ref>;\n  /** Identifies the repository associated with the deployment. */\n  repository: Repository;\n  /** The current state of the deployment. */\n  state?: Maybe<DeploymentState>;\n  /** A list of statuses associated with the deployment. */\n  statuses?: Maybe<DeploymentStatusConnection>;\n  /** The deployment task. */\n  task?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** Represents triggered deployment instance. */\nexport type DeploymentStatusesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for Deployment. */\nexport type DeploymentConnection = {\n  __typename?: \"DeploymentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Deployment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentEdge = {\n  __typename?: \"DeploymentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Deployment>;\n};\n\n/** Represents a 'deployment_environment_changed' event on a given pull request. */\nexport type DeploymentEnvironmentChangedEvent = Node & {\n  __typename?: \"DeploymentEnvironmentChangedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The deployment status that updated the deployment environment. */\n  deploymentStatus: DeploymentStatus;\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Ordering options for deployment connections */\nexport type DeploymentOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order deployments by. */\n  field: DeploymentOrderField;\n};\n\n/** Properties by which deployment connections can be ordered. */\nexport enum DeploymentOrderField {\n  /** Order collection by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** A protection rule. */\nexport type DeploymentProtectionRule = {\n  __typename?: \"DeploymentProtectionRule\";\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The timeout in minutes for this protection rule. */\n  timeout: Scalars[\"Int\"][\"output\"];\n  /** The type of protection rule. */\n  type: DeploymentProtectionRuleType;\n};\n\n/** A protection rule. */\nexport type DeploymentProtectionRuleReviewersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for DeploymentProtectionRule. */\nexport type DeploymentProtectionRuleConnection = {\n  __typename?: \"DeploymentProtectionRuleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentProtectionRuleEdge = {\n  __typename?: \"DeploymentProtectionRuleEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentProtectionRule>;\n};\n\n/** The possible protection rule types. */\nexport enum DeploymentProtectionRuleType {\n  /** Required reviewers */\n  RequiredReviewers = \"REQUIRED_REVIEWERS\",\n  /** Wait timer */\n  WaitTimer = \"WAIT_TIMER\",\n}\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequest = {\n  __typename?: \"DeploymentRequest\";\n  /** Whether or not the current user can approve the deployment */\n  currentUserCanApprove: Scalars[\"Boolean\"][\"output\"];\n  /** The target environment of the deployment */\n  environment: Environment;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The wait timer in minutes configured in the environment */\n  waitTimer: Scalars[\"Int\"][\"output\"];\n  /** The wait timer in minutes configured in the environment */\n  waitTimerStartedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequestReviewersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for DeploymentRequest. */\nexport type DeploymentRequestConnection = {\n  __typename?: \"DeploymentRequestConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentRequestEdge = {\n  __typename?: \"DeploymentRequestEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentRequest>;\n};\n\n/** A deployment review. */\nexport type DeploymentReview = Node & {\n  __typename?: \"DeploymentReview\";\n  /** The comment the user left. */\n  comment: Scalars[\"String\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The environments approved or rejected */\n  environments: EnvironmentConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The decision of the user. */\n  state: DeploymentReviewState;\n  /** The user that reviewed the deployment. */\n  user: User;\n};\n\n/** A deployment review. */\nexport type DeploymentReviewEnvironmentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for DeploymentReview. */\nexport type DeploymentReviewConnection = {\n  __typename?: \"DeploymentReviewConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewEdge = {\n  __typename?: \"DeploymentReviewEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReview>;\n};\n\n/** The possible states for a deployment review. */\nexport enum DeploymentReviewState {\n  /** The deployment was approved. */\n  Approved = \"APPROVED\",\n  /** The deployment was rejected. */\n  Rejected = \"REJECTED\",\n}\n\n/** Users and teams. */\nexport type DeploymentReviewer = Team | User;\n\n/** The connection type for DeploymentReviewer. */\nexport type DeploymentReviewerConnection = {\n  __typename?: \"DeploymentReviewerConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReviewer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewerEdge = {\n  __typename?: \"DeploymentReviewerEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReviewer>;\n};\n\n/** The possible states in which a deployment can be. */\nexport enum DeploymentState {\n  /** The pending deployment was not updated after 30 minutes. */\n  Abandoned = \"ABANDONED\",\n  /** The deployment is currently active. */\n  Active = \"ACTIVE\",\n  /** An inactive transient deployment. */\n  Destroyed = \"DESTROYED\",\n  /** The deployment experienced an error. */\n  Error = \"ERROR\",\n  /** The deployment has failed. */\n  Failure = \"FAILURE\",\n  /** The deployment is inactive. */\n  Inactive = \"INACTIVE\",\n  /** The deployment is in progress. */\n  InProgress = \"IN_PROGRESS\",\n  /** The deployment is pending. */\n  Pending = \"PENDING\",\n  /** The deployment has queued */\n  Queued = \"QUEUED\",\n  /** The deployment is waiting. */\n  Waiting = \"WAITING\",\n}\n\n/** Describes the status of a given deployment attempt. */\nexport type DeploymentStatus = Node & {\n  __typename?: \"DeploymentStatus\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the deployment associated with status. */\n  deployment: Deployment;\n  /** Identifies the description of the deployment. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the environment of the deployment at the time of this deployment status */\n  environment?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the environment URL of the deployment. */\n  environmentUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the log URL of the deployment. */\n  logUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** Identifies the current state of the deployment. */\n  state: DeploymentStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** The connection type for DeploymentStatus. */\nexport type DeploymentStatusConnection = {\n  __typename?: \"DeploymentStatusConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DeploymentStatusEdge = {\n  __typename?: \"DeploymentStatusEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentStatus>;\n};\n\n/** The possible states for a deployment status. */\nexport enum DeploymentStatusState {\n  /** The deployment experienced an error. */\n  Error = \"ERROR\",\n  /** The deployment has failed. */\n  Failure = \"FAILURE\",\n  /** The deployment is inactive. */\n  Inactive = \"INACTIVE\",\n  /** The deployment is in progress. */\n  InProgress = \"IN_PROGRESS\",\n  /** The deployment is pending. */\n  Pending = \"PENDING\",\n  /** The deployment is queued */\n  Queued = \"QUEUED\",\n  /** The deployment was successful. */\n  Success = \"SUCCESS\",\n  /** The deployment is waiting. */\n  Waiting = \"WAITING\",\n}\n\n/** The possible sides of a diff. */\nexport enum DiffSide {\n  /** The left side of the diff. */\n  Left = \"LEFT\",\n  /** The right side of the diff. */\n  Right = \"RIGHT\",\n}\n\n/** Autogenerated input type of DisablePullRequestAutoMerge */\nexport type DisablePullRequestAutoMergeInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the pull request to disable auto merge on. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DisablePullRequestAutoMerge */\nexport type DisablePullRequestAutoMergePayload = {\n  __typename?: \"DisablePullRequestAutoMergePayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request auto merge was disabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'disconnected' event on a given issue or pull request. */\nexport type DisconnectedEvent = Node & {\n  __typename?: \"DisconnectedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n  /** Issue or pull request from which the issue was disconnected. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was disconnected. */\n  subject: ReferencedSubject;\n};\n\n/** A discussion in a repository. */\nexport type Discussion = Comment &\n  Deletable &\n  Labelable &\n  Lockable &\n  Node &\n  Reactable &\n  RepositoryNode &\n  Subscribable &\n  Updatable &\n  Votable & {\n    __typename?: \"Discussion\";\n    /** Reason that the conversation was locked. */\n    activeLockReason?: Maybe<LockReason>;\n    /** The comment chosen as this discussion's answer, if any. */\n    answer?: Maybe<DiscussionComment>;\n    /** The time when a user chose this discussion's answer, if answered. */\n    answerChosenAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The user who chose this discussion's answer, if answered. */\n    answerChosenBy?: Maybe<Actor>;\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The main text of the discussion post. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** The category for this discussion. */\n    category: DiscussionCategory;\n    /** The replies to the discussion. */\n    comments: DiscussionCommentConnection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** A list of labels associated with the object. */\n    labels?: Maybe<LabelConnection>;\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** `true` if the object is locked */\n    locked: Scalars[\"Boolean\"][\"output\"];\n    /** The number identifying this discussion within the repository. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The path for this discussion. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The title of this discussion. */\n    title: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** Number of upvotes that this subject has received. */\n    upvoteCount: Scalars[\"Int\"][\"output\"];\n    /** The URL for this discussion. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the current user can add or remove an upvote on this subject. */\n    viewerCanUpvote: Scalars[\"Boolean\"][\"output\"];\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the current user has already upvoted this subject. */\n    viewerHasUpvoted: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n  };\n\n/** A discussion in a repository. */\nexport type DiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A discussion in a repository. */\nexport type DiscussionLabelsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** A discussion in a repository. */\nexport type DiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A discussion in a repository. */\nexport type DiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A category for discussions in a repository. */\nexport type DiscussionCategory = Node &\n  RepositoryNode & {\n    __typename?: \"DiscussionCategory\";\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** A description of this category. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** An emoji representing this category. */\n    emoji: Scalars[\"String\"][\"output\"];\n    /** This category's emoji rendered as HTML. */\n    emojiHTML: Scalars[\"HTML\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */\n    isAnswerable: Scalars[\"Boolean\"][\"output\"];\n    /** The name of this category. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n  };\n\n/** The connection type for DiscussionCategory. */\nexport type DiscussionCategoryConnection = {\n  __typename?: \"DiscussionCategoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCategoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionCategory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCategoryEdge = {\n  __typename?: \"DiscussionCategoryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionCategory>;\n};\n\n/** A comment on a discussion. */\nexport type DiscussionComment = Comment &\n  Deletable &\n  Minimizable &\n  Node &\n  Reactable &\n  Updatable &\n  UpdatableComment &\n  Votable & {\n    __typename?: \"DiscussionComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The body as Markdown. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The time when this replied-to comment was deleted */\n    deletedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The discussion this comment was created in */\n    discussion?: Maybe<Discussion>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Has this comment been chosen as the answer of its discussion? */\n    isAnswer: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not a comment has been minimized. */\n    isMinimized: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Returns why the comment was minimized. */\n    minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The threaded replies to this comment. */\n    replies: DiscussionCommentConnection;\n    /** The discussion comment this comment is a reply to */\n    replyTo?: Maybe<DiscussionComment>;\n    /** The path for this discussion comment. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** Number of upvotes that this subject has received. */\n    upvoteCount: Scalars[\"Int\"][\"output\"];\n    /** The URL for this discussion comment. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Can the current user mark this comment as an answer? */\n    viewerCanMarkAsAnswer: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can minimize this object. */\n    viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Can the current user unmark this comment as an answer? */\n    viewerCanUnmarkAsAnswer: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the current user can add or remove an upvote on this subject. */\n    viewerCanUpvote: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the current user has already upvoted this subject. */\n    viewerHasUpvoted: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A comment on a discussion. */\nexport type DiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A comment on a discussion. */\nexport type DiscussionCommentRepliesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A comment on a discussion. */\nexport type DiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for DiscussionComment. */\nexport type DiscussionCommentConnection = {\n  __typename?: \"DiscussionCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCommentEdge = {\n  __typename?: \"DiscussionCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionComment>;\n};\n\n/** The connection type for Discussion. */\nexport type DiscussionConnection = {\n  __typename?: \"DiscussionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Discussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type DiscussionEdge = {\n  __typename?: \"DiscussionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Discussion>;\n};\n\n/** Ways in which lists of discussions can be ordered upon return. */\nexport type DiscussionOrder = {\n  /** The direction in which to order discussions by the specified field. */\n  direction: OrderDirection;\n  /** The field by which to order discussions. */\n  field: DiscussionOrderField;\n};\n\n/** Properties by which discussion connections can be ordered. */\nexport enum DiscussionOrderField {\n  /** Order discussions by creation time. */\n  CreatedAt = \"CREATED_AT\",\n  /** Order discussions by most recent modification time. */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** Autogenerated input type of DismissPullRequestReview */\nexport type DismissPullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The contents of the pull request review dismissal message. */\n  message: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DismissPullRequestReview */\nexport type DismissPullRequestReviewPayload = {\n  __typename?: \"DismissPullRequestReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The dismissed pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** The possible reasons that a Dependabot alert was dismissed. */\nexport enum DismissReason {\n  /** A fix has already been started */\n  FixStarted = \"FIX_STARTED\",\n  /** This alert is inaccurate or incorrect */\n  Inaccurate = \"INACCURATE\",\n  /** Vulnerable code is not actually used */\n  NotUsed = \"NOT_USED\",\n  /** No bandwidth to fix this */\n  NoBandwidth = \"NO_BANDWIDTH\",\n  /** Risk is tolerable to this project */\n  TolerableRisk = \"TOLERABLE_RISK\",\n}\n\n/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */\nexport type DismissRepositoryVulnerabilityAlertInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The reason the Dependabot alert is being dismissed. */\n  dismissReason: DismissReason;\n  /** The Dependabot alert ID to dismiss. */\n  repositoryVulnerabilityAlertId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of DismissRepositoryVulnerabilityAlert */\nexport type DismissRepositoryVulnerabilityAlertPayload = {\n  __typename?: \"DismissRepositoryVulnerabilityAlertPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The Dependabot alert that was dismissed */\n  repositoryVulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** A draft issue within a project. */\nexport type DraftIssue = Node & {\n  __typename?: \"DraftIssue\";\n  /** A list of users to assigned to this draft issue. */\n  assignees: UserConnection;\n  /** The body of the draft issue. */\n  body: Scalars[\"String\"][\"output\"];\n  /** The body of the draft issue rendered to HTML. */\n  bodyHTML: Scalars[\"HTML\"][\"output\"];\n  /** The body of the draft issue rendered to text. */\n  bodyText: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The actor who created this draft issue. */\n  creator?: Maybe<Actor>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The project (beta) that contains this draft issue. */\n  project: ProjectNext;\n  /** The project (beta) item that wraps this draft issue. */\n  projectItem: ProjectNextItem;\n  /** The title of the draft issue */\n  title: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** A draft issue within a project. */\nexport type DraftIssueAssigneesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Specifies a review comment to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewComment = {\n  /** Body of the comment to leave. */\n  body: Scalars[\"String\"][\"input\"];\n  /** Path to the file being commented on. */\n  path: Scalars[\"String\"][\"input\"];\n  /** Position in the file to leave a comment on. */\n  position: Scalars[\"Int\"][\"input\"];\n};\n\n/** Specifies a review comment thread to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewThread = {\n  /** Body of the comment to leave. */\n  body: Scalars[\"String\"][\"input\"];\n  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */\n  line: Scalars[\"Int\"][\"input\"];\n  /** Path to the file being commented on. */\n  path: Scalars[\"String\"][\"input\"];\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n};\n\n/** Autogenerated input type of EnablePullRequestAutoMerge */\nexport type EnablePullRequestAutoMergeInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Commit body to use for the commit when the PR is mergable; if omitted, a default message will be used. */\n  commitBody?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Commit headline to use for the commit when the PR is mergable; if omitted, a default message will be used. */\n  commitHeadline?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The merge method to use. If omitted, defaults to 'MERGE' */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to enable auto-merge on. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of EnablePullRequestAutoMerge */\nexport type EnablePullRequestAutoMergePayload = {\n  __typename?: \"EnablePullRequestAutoMergePayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request auto-merge was enabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type Enterprise = Node & {\n  __typename?: \"Enterprise\";\n  /** A URL pointing to the enterprise's public avatar. */\n  avatarUrl: Scalars[\"URI\"][\"output\"];\n  /** Enterprise billing information visible to enterprise billing managers. */\n  billingInfo?: Maybe<EnterpriseBillingInfo>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The description of the enterprise. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The description of the enterprise as HTML. */\n  descriptionHTML: Scalars[\"HTML\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The location of the enterprise. */\n  location?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A list of users who are members of this enterprise. */\n  members: EnterpriseMemberConnection;\n  /** The name of the enterprise. */\n  name: Scalars[\"String\"][\"output\"];\n  /** A list of organizations that belong to this enterprise. */\n  organizations: OrganizationConnection;\n  /** Enterprise information only visible to enterprise owners. */\n  ownerInfo?: Maybe<EnterpriseOwnerInfo>;\n  /** The HTTP path for this enterprise. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The URL-friendly identifier for the enterprise. */\n  slug: Scalars[\"String\"][\"output\"];\n  /** The HTTP URL for this enterprise. */\n  url: Scalars[\"URI\"][\"output\"];\n  /**\n   * A list of user accounts on this enterprise.\n   * @deprecated The `Enterprise.userAccounts` field is being removed. Use the `Enterprise.members` field instead. Removal on 2022-07-01 UTC.\n   */\n  userAccounts: EnterpriseUserAccountConnection;\n  /** Is the current viewer an admin of this enterprise? */\n  viewerIsAdmin: Scalars[\"Boolean\"][\"output\"];\n  /** The URL of the enterprise website. */\n  websiteUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseMembersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  deployment?: InputMaybe<EnterpriseUserDeployment>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  viewerOrganizationRole?: InputMaybe<RoleInOrganization>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseUserAccountsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for User. */\nexport type EnterpriseAdministratorConnection = {\n  __typename?: \"EnterpriseAdministratorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A User who is an administrator of an enterprise. */\nexport type EnterpriseAdministratorEdge = {\n  __typename?: \"EnterpriseAdministratorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** An invitation for a user to become an owner or billing manager of an enterprise. */\nexport type EnterpriseAdministratorInvitation = Node & {\n  __typename?: \"EnterpriseAdministratorInvitation\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The email of the person who was invited to the enterprise. */\n  email?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise the invitation is for. */\n  enterprise: Enterprise;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The user who was invited to the enterprise. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter?: Maybe<User>;\n  /** The invitee's pending role in the enterprise (owner or billing_manager). */\n  role: EnterpriseAdministratorRole;\n};\n\n/** The connection type for EnterpriseAdministratorInvitation. */\nexport type EnterpriseAdministratorInvitationConnection = {\n  __typename?: \"EnterpriseAdministratorInvitationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseAdministratorInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseAdministratorInvitationEdge = {\n  __typename?: \"EnterpriseAdministratorInvitationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** Ordering options for enterprise administrator invitation connections */\nexport type EnterpriseAdministratorInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise administrator invitations by. */\n  field: EnterpriseAdministratorInvitationOrderField;\n};\n\n/** Properties by which enterprise administrator invitation connections can be ordered. */\nexport enum EnterpriseAdministratorInvitationOrderField {\n  /** Order enterprise administrator member invitations by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** The possible administrator roles in an enterprise account. */\nexport enum EnterpriseAdministratorRole {\n  /** Represents a billing manager of the enterprise account. */\n  BillingManager = \"BILLING_MANAGER\",\n  /** Represents an owner of the enterprise account. */\n  Owner = \"OWNER\",\n}\n\n/** Metadata for an audit entry containing enterprise account information. */\nexport type EnterpriseAuditEntryData = {\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Enterprise billing information visible to enterprise billing managers and owners. */\nexport type EnterpriseBillingInfo = {\n  __typename?: \"EnterpriseBillingInfo\";\n  /** The number of licenseable users/emails across the enterprise. */\n  allLicensableUsersCount: Scalars[\"Int\"][\"output\"];\n  /** The number of data packs used by all organizations owned by the enterprise. */\n  assetPacks: Scalars[\"Int\"][\"output\"];\n  /** The bandwidth quota in GB for all organizations owned by the enterprise. */\n  bandwidthQuota: Scalars[\"Float\"][\"output\"];\n  /** The bandwidth usage in GB for all organizations owned by the enterprise. */\n  bandwidthUsage: Scalars[\"Float\"][\"output\"];\n  /** The bandwidth usage as a percentage of the bandwidth quota. */\n  bandwidthUsagePercentage: Scalars[\"Int\"][\"output\"];\n  /** The storage quota in GB for all organizations owned by the enterprise. */\n  storageQuota: Scalars[\"Float\"][\"output\"];\n  /** The storage usage in GB for all organizations owned by the enterprise. */\n  storageUsage: Scalars[\"Float\"][\"output\"];\n  /** The storage usage as a percentage of the storage quota. */\n  storageUsagePercentage: Scalars[\"Int\"][\"output\"];\n  /** The number of available licenses across all owned organizations based on the unique number of billable users. */\n  totalAvailableLicenses: Scalars[\"Int\"][\"output\"];\n  /** The total number of licenses allocated. */\n  totalLicenses: Scalars[\"Int\"][\"output\"];\n};\n\n/** The possible values for the enterprise base repository permission setting. */\nexport enum EnterpriseDefaultRepositoryPermissionSettingValue {\n  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */\n  Admin = \"ADMIN\",\n  /** Organization members will only be able to clone and pull public repositories. */\n  None = \"NONE\",\n  /** Organizations in the enterprise choose base repository permissions for their members. */\n  NoPolicy = \"NO_POLICY\",\n  /** Organization members will be able to clone and pull all organization repositories. */\n  Read = \"READ\",\n  /** Organization members will be able to clone, pull, and push all organization repositories. */\n  Write = \"WRITE\",\n}\n\n/** The possible values for an enabled/disabled enterprise setting. */\nexport enum EnterpriseEnabledDisabledSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = \"DISABLED\",\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = \"ENABLED\",\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = \"NO_POLICY\",\n}\n\n/** The possible values for an enabled/no policy enterprise setting. */\nexport enum EnterpriseEnabledSettingValue {\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = \"ENABLED\",\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = \"NO_POLICY\",\n}\n\n/** An identity provider configured to provision identities for an enterprise. */\nexport type EnterpriseIdentityProvider = Node & {\n  __typename?: \"EnterpriseIdentityProvider\";\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod?: Maybe<SamlDigestAlgorithm>;\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars[\"X509Certificate\"][\"output\"]>;\n  /** The Issuer Entity ID for the SAML identity provider. */\n  issuer?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */\n  recoveryCodes?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod?: Maybe<SamlSignatureAlgorithm>;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** An identity provider configured to provision identities for an enterprise. */\nexport type EnterpriseIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  login?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  membersOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  userName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An object that is a member of an enterprise. */\nexport type EnterpriseMember = EnterpriseUserAccount | User;\n\n/** The connection type for EnterpriseMember. */\nexport type EnterpriseMemberConnection = {\n  __typename?: \"EnterpriseMemberConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseMember>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A User who is a member of an enterprise through one or more organizations. */\nexport type EnterpriseMemberEdge = {\n  __typename?: \"EnterpriseMemberEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseMember>;\n};\n\n/** Ordering options for enterprise member connections. */\nexport type EnterpriseMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise members by. */\n  field: EnterpriseMemberOrderField;\n};\n\n/** Properties by which enterprise member connections can be ordered. */\nexport enum EnterpriseMemberOrderField {\n  /** Order enterprise members by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order enterprise members by login */\n  Login = \"LOGIN\",\n}\n\n/** The possible values for the enterprise members can create repositories setting. */\nexport enum EnterpriseMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = \"ALL\",\n  /** Members will not be able to create public or private repositories. */\n  Disabled = \"DISABLED\",\n  /** Organization administrators choose whether to allow members to create repositories. */\n  NoPolicy = \"NO_POLICY\",\n  /** Members will be able to create only private repositories. */\n  Private = \"PRIVATE\",\n  /** Members will be able to create only public repositories. */\n  Public = \"PUBLIC\",\n}\n\n/** The possible values for the members can make purchases setting. */\nexport enum EnterpriseMembersCanMakePurchasesSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = \"DISABLED\",\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = \"ENABLED\",\n}\n\n/** The connection type for Organization. */\nexport type EnterpriseOrganizationMembershipConnection = {\n  __typename?: \"EnterpriseOrganizationMembershipConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOrganizationMembershipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An enterprise organization that a user is a member of. */\nexport type EnterpriseOrganizationMembershipEdge = {\n  __typename?: \"EnterpriseOrganizationMembershipEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n  /** The role of the user in the enterprise membership. */\n  role: EnterpriseUserAccountMembershipRole;\n};\n\n/** The connection type for User. */\nexport type EnterpriseOutsideCollaboratorConnection = {\n  __typename?: \"EnterpriseOutsideCollaboratorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOutsideCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdge = {\n  __typename?: \"EnterpriseOutsideCollaboratorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The enterprise organization repositories this user is a member of. */\n  repositories: EnterpriseRepositoryInfoConnection;\n};\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfo = {\n  __typename?: \"EnterpriseOwnerInfo\";\n  /** A list of all of the administrators for this enterprise. */\n  admins: EnterpriseAdministratorConnection;\n  /** A list of users in the enterprise who currently have two-factor authentication disabled. */\n  affiliatedUsersWithTwoFactorDisabled: UserConnection;\n  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */\n  affiliatedUsersWithTwoFactorDisabledExist: Scalars[\"Boolean\"][\"output\"];\n  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */\n  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided private repository forking setting value. */\n  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection;\n  /** The setting value for base repository permissions for organizations in this enterprise. */\n  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;\n  /** A list of enterprise organizations configured with the provided base repository permission. */\n  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection;\n  /** A list of domains owned by the enterprise. */\n  domains: VerifiableDomainConnection;\n  /** Enterprise Server installations owned by the enterprise. */\n  enterpriseServerInstallations: EnterpriseServerInstallationConnection;\n  /** The setting value for whether the enterprise has an IP allow list enabled. */\n  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n  /** The IP addresses that are allowed to access resources owned by the enterprise. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */\n  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n  /** Whether or not the base repository permission is currently being updated. */\n  isUpdatingDefaultRepositoryPermission: Scalars[\"Boolean\"][\"output\"];\n  /** Whether the two-factor authentication requirement is currently being enforced. */\n  isUpdatingTwoFactorRequirement: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * The setting value for whether organization members with admin permissions on a\n   * repository can change repository visibility.\n   */\n  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */\n  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */\n  membersCanCreateInternalRepositoriesSetting?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** The setting value for whether members of organizations in the enterprise can create private repositories. */\n  membersCanCreatePrivateRepositoriesSetting?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** The setting value for whether members of organizations in the enterprise can create public repositories. */\n  membersCanCreatePublicRepositoriesSetting?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** The setting value for whether members of organizations in the enterprise can create repositories. */\n  membersCanCreateRepositoriesSetting?: Maybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n  /** A list of enterprise organizations configured with the provided repository creation setting value. */\n  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete issues. */\n  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */\n  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */\n  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */\n  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */\n  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */\n  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection;\n  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */\n  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;\n  /** The setting value for whether members with admin permissions for repositories can update protected branches. */\n  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */\n  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members can view dependency insights. */\n  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */\n  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection;\n  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */\n  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n  /** The OIDC Identity Provider for the enterprise. */\n  oidcProvider?: Maybe<OidcProvider>;\n  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */\n  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided organization projects setting value. */\n  organizationProjectsSettingOrganizations: OrganizationConnection;\n  /** A list of outside collaborators across the repositories in the enterprise. */\n  outsideCollaborators: EnterpriseOutsideCollaboratorConnection;\n  /** A list of pending administrator invitations for the enterprise. */\n  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection;\n  /** A list of pending collaborator invitations across the repositories in the enterprise. */\n  pendingCollaboratorInvitations: RepositoryInvitationConnection;\n  /** A list of pending member invitations for organizations in the enterprise. */\n  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection;\n  /** The setting value for whether repository projects are enabled in this enterprise. */\n  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided repository projects setting value. */\n  repositoryProjectsSettingOrganizations: OrganizationConnection;\n  /**\n   * The SAML Identity Provider for the enterprise. When used by a GitHub App,\n   * requires an installation token with read and write access to members.\n   */\n  samlIdentityProvider?: Maybe<EnterpriseIdentityProvider>;\n  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */\n  samlIdentityProviderSettingOrganizations: OrganizationConnection;\n  /** A list of members with a support entitlement. */\n  supportEntitlements: EnterpriseMemberConnection;\n  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */\n  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided team discussions setting value. */\n  teamDiscussionsSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */\n  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;\n  /** A list of enterprise organizations configured with the two-factor authentication setting value. */\n  twoFactorRequiredSettingOrganizations: OrganizationConnection;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAdminsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: DefaultRepositoryPermissionField;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoDomainsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isApproved?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isVerified?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  connectedOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseServerInstallationOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: OrganizationMembersCanCreateRepositoriesSettingValue;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoOutsideCollaboratorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  hasTwoFactorEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  login?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingAdminInvitationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseAdministratorInvitationOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryInvitationOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoPendingMemberInvitationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  organizationLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: IdentityProviderConfigurationState;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoSupportEntitlementsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** Enterprise information only visible to enterprise owners. */\nexport type EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars[\"Boolean\"][\"input\"];\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type EnterprisePendingMemberInvitationConnection = {\n  __typename?: \"EnterprisePendingMemberInvitationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterprisePendingMemberInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** Identifies the total count of unique users in the connection. */\n  totalUniqueUserCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An invitation to be a member in an enterprise organization. */\nexport type EnterprisePendingMemberInvitationEdge = {\n  __typename?: \"EnterprisePendingMemberInvitationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** A subset of repository information queryable from an enterprise. */\nexport type EnterpriseRepositoryInfo = Node & {\n  __typename?: \"EnterpriseRepositoryInfo\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars[\"Boolean\"][\"output\"];\n  /** The repository's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars[\"String\"][\"output\"];\n};\n\n/** The connection type for EnterpriseRepositoryInfo. */\nexport type EnterpriseRepositoryInfoConnection = {\n  __typename?: \"EnterpriseRepositoryInfoConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseRepositoryInfoEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseRepositoryInfo>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseRepositoryInfoEdge = {\n  __typename?: \"EnterpriseRepositoryInfoEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseRepositoryInfo>;\n};\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallation = Node & {\n  __typename?: \"EnterpriseServerInstallation\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The customer name to which the Enterprise Server installation belongs. */\n  customerName: Scalars[\"String\"][\"output\"];\n  /** The host name of the Enterprise Server installation. */\n  hostName: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */\n  isConnected: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** User accounts on this Enterprise Server installation. */\n  userAccounts: EnterpriseServerUserAccountConnection;\n  /** User accounts uploads for the Enterprise Server installation. */\n  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection;\n};\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountOrder>;\n};\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsUploadsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountsUploadOrder>;\n};\n\n/** The connection type for EnterpriseServerInstallation. */\nexport type EnterpriseServerInstallationConnection = {\n  __typename?: \"EnterpriseServerInstallationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerInstallationEdge = {\n  __typename?: \"EnterpriseServerInstallationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerInstallation>;\n};\n\n/** Ordering options for Enterprise Server installation connections. */\nexport type EnterpriseServerInstallationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order Enterprise Server installations by. */\n  field: EnterpriseServerInstallationOrderField;\n};\n\n/** Properties by which Enterprise Server installation connections can be ordered. */\nexport enum EnterpriseServerInstallationOrderField {\n  /** Order Enterprise Server installations by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order Enterprise Server installations by customer name */\n  CustomerName = \"CUSTOMER_NAME\",\n  /** Order Enterprise Server installations by host name */\n  HostName = \"HOST_NAME\",\n}\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccount = Node & {\n  __typename?: \"EnterpriseServerUserAccount\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** User emails belonging to this user account. */\n  emails: EnterpriseServerUserAccountEmailConnection;\n  /** The Enterprise Server installation on which this user account exists. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether the user account is a site administrator on the Enterprise Server installation. */\n  isSiteAdmin: Scalars[\"Boolean\"][\"output\"];\n  /** The login of the user account on the Enterprise Server installation. */\n  login: Scalars[\"String\"][\"output\"];\n  /** The profile name of the user account on the Enterprise Server installation. */\n  profileName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The date and time when the user account was created on the Enterprise Server installation. */\n  remoteCreatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The ID of the user account on the Enterprise Server installation. */\n  remoteUserId: Scalars[\"Int\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmailsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountEmailOrder>;\n};\n\n/** The connection type for EnterpriseServerUserAccount. */\nexport type EnterpriseServerUserAccountConnection = {\n  __typename?: \"EnterpriseServerUserAccountConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEdge = {\n  __typename?: \"EnterpriseServerUserAccountEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccount>;\n};\n\n/** An email belonging to a user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmail = Node & {\n  __typename?: \"EnterpriseServerUserAccountEmail\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The email address. */\n  email: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Indicates whether this is the primary email of the associated user account. */\n  isPrimary: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user account to which the email belongs. */\n  userAccount: EnterpriseServerUserAccount;\n};\n\n/** The connection type for EnterpriseServerUserAccountEmail. */\nexport type EnterpriseServerUserAccountEmailConnection = {\n  __typename?: \"EnterpriseServerUserAccountEmailConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEmailEdge = {\n  __typename?: \"EnterpriseServerUserAccountEmailEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountEmail>;\n};\n\n/** Ordering options for Enterprise Server user account email connections. */\nexport type EnterpriseServerUserAccountEmailOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order emails by. */\n  field: EnterpriseServerUserAccountEmailOrderField;\n};\n\n/** Properties by which Enterprise Server user account email connections can be ordered. */\nexport enum EnterpriseServerUserAccountEmailOrderField {\n  /** Order emails by email */\n  Email = \"EMAIL\",\n}\n\n/** Ordering options for Enterprise Server user account connections. */\nexport type EnterpriseServerUserAccountOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts by. */\n  field: EnterpriseServerUserAccountOrderField;\n};\n\n/** Properties by which Enterprise Server user account connections can be ordered. */\nexport enum EnterpriseServerUserAccountOrderField {\n  /** Order user accounts by login */\n  Login = \"LOGIN\",\n  /** Order user accounts by creation time on the Enterprise Server installation */\n  RemoteCreatedAt = \"REMOTE_CREATED_AT\",\n}\n\n/** A user accounts upload from an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountsUpload = Node & {\n  __typename?: \"EnterpriseServerUserAccountsUpload\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The enterprise to which this upload belongs. */\n  enterprise: Enterprise;\n  /** The Enterprise Server installation for which this upload was generated. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The name of the file uploaded. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The synchronization state of the upload */\n  syncState: EnterpriseServerUserAccountsUploadSyncState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** The connection type for EnterpriseServerUserAccountsUpload. */\nexport type EnterpriseServerUserAccountsUploadConnection = {\n  __typename?: \"EnterpriseServerUserAccountsUploadConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUploadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUpload>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountsUploadEdge = {\n  __typename?: \"EnterpriseServerUserAccountsUploadEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountsUpload>;\n};\n\n/** Ordering options for Enterprise Server user accounts upload connections. */\nexport type EnterpriseServerUserAccountsUploadOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts uploads by. */\n  field: EnterpriseServerUserAccountsUploadOrderField;\n};\n\n/** Properties by which Enterprise Server user accounts upload connections can be ordered. */\nexport enum EnterpriseServerUserAccountsUploadOrderField {\n  /** Order user accounts uploads by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Synchronization state of the Enterprise Server user accounts upload */\nexport enum EnterpriseServerUserAccountsUploadSyncState {\n  /** The synchronization of the upload failed. */\n  Failure = \"FAILURE\",\n  /** The synchronization of the upload is pending. */\n  Pending = \"PENDING\",\n  /** The synchronization of the upload succeeded. */\n  Success = \"SUCCESS\",\n}\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccount = Actor &\n  Node & {\n    __typename?: \"EnterpriseUserAccount\";\n    /** A URL pointing to the enterprise user account's public avatar. */\n    avatarUrl: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The enterprise in which this user account exists. */\n    enterprise: Enterprise;\n    id: Scalars[\"ID\"][\"output\"];\n    /** An identifier for the enterprise user account, a login or email address */\n    login: Scalars[\"String\"][\"output\"];\n    /** The name of the enterprise user account */\n    name?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A list of enterprise organizations this user is a member of. */\n    organizations: EnterpriseOrganizationMembershipConnection;\n    /** The HTTP path for this user. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this user. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** The user within the enterprise. */\n    user?: Maybe<User>;\n  };\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n/** The connection type for EnterpriseUserAccount. */\nexport type EnterpriseUserAccountConnection = {\n  __typename?: \"EnterpriseUserAccountConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseUserAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseUserAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseUserAccountEdge = {\n  __typename?: \"EnterpriseUserAccountEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseUserAccount>;\n};\n\n/** The possible roles for enterprise membership. */\nexport enum EnterpriseUserAccountMembershipRole {\n  /** The user is a member of the enterprise membership. */\n  Member = \"MEMBER\",\n  /** The user is an owner of the enterprise membership. */\n  Owner = \"OWNER\",\n}\n\n/** The possible GitHub Enterprise deployments where this user can exist. */\nexport enum EnterpriseUserDeployment {\n  /** The user is part of a GitHub Enterprise Cloud deployment. */\n  Cloud = \"CLOUD\",\n  /** The user is part of a GitHub Enterprise Server deployment. */\n  Server = \"SERVER\",\n}\n\n/** An environment. */\nexport type Environment = Node & {\n  __typename?: \"Environment\";\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The name of the environment */\n  name: Scalars[\"String\"][\"output\"];\n  /** The protection rules defined for this environment */\n  protectionRules: DeploymentProtectionRuleConnection;\n};\n\n/** An environment. */\nexport type EnvironmentProtectionRulesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for Environment. */\nexport type EnvironmentConnection = {\n  __typename?: \"EnvironmentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnvironmentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Environment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type EnvironmentEdge = {\n  __typename?: \"EnvironmentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Environment>;\n};\n\n/** An external identity provisioned by SAML SSO or SCIM. */\nexport type ExternalIdentity = Node & {\n  __typename?: \"ExternalIdentity\";\n  /** The GUID for this identity */\n  guid: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Organization invitation for this SCIM-provisioned external identity */\n  organizationInvitation?: Maybe<OrganizationInvitation>;\n  /** SAML Identity attributes */\n  samlIdentity?: Maybe<ExternalIdentitySamlAttributes>;\n  /** SCIM Identity attributes */\n  scimIdentity?: Maybe<ExternalIdentityScimAttributes>;\n  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */\n  user?: Maybe<User>;\n};\n\n/** The connection type for ExternalIdentity. */\nexport type ExternalIdentityConnection = {\n  __typename?: \"ExternalIdentityConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ExternalIdentityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ExternalIdentity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ExternalIdentityEdge = {\n  __typename?: \"ExternalIdentityEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ExternalIdentity>;\n};\n\n/** SAML attributes for the External Identity */\nexport type ExternalIdentitySamlAttributes = {\n  __typename?: \"ExternalIdentitySamlAttributes\";\n  /** The emails associated with the SAML identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SAML identity */\n  familyName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Given name of the SAML identity */\n  givenName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** The NameID of the SAML identity */\n  nameId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The userName of the SAML identity */\n  username?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** SCIM attributes for the External Identity */\nexport type ExternalIdentityScimAttributes = {\n  __typename?: \"ExternalIdentityScimAttributes\";\n  /** The emails associated with the SCIM identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SCIM identity */\n  familyName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Given name of the SCIM identity */\n  givenName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** The userName of the SCIM identity */\n  username?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/**\n * A command to add a file at the given path with the given contents as part of a\n * commit.  Any existing file at that that path will be replaced.\n */\nexport type FileAddition = {\n  /** The base64 encoded contents of the file */\n  contents: Scalars[\"Base64String\"][\"input\"];\n  /** The path in the repository where the file will be located */\n  path: Scalars[\"String\"][\"input\"];\n};\n\n/**\n * A description of a set of changes to a file tree to be made as part of\n * a git commit, modeled as zero or more file `additions` and zero or more\n * file `deletions`.\n *\n * Both fields are optional; omitting both will produce a commit with no\n * file changes.\n *\n * `deletions` and `additions` describe changes to files identified\n * by their path in the git tree using unix-style path separators, i.e.\n * `/`.  The root of a git tree is an empty string, so paths are not\n * slash-prefixed.\n *\n * `path` values must be unique across all `additions` and `deletions`\n * provided.  Any duplication will result in a validation error.\n *\n * ### Encoding\n *\n * File contents must be provided in full for each `FileAddition`.\n *\n * The `contents` of a `FileAddition` must be encoded using RFC 4648\n * compliant base64, i.e. correct padding is required and no characters\n * outside the standard alphabet may be used.  Invalid base64\n * encoding will be rejected with a validation error.\n *\n * The encoded contents may be binary.\n *\n * For text files, no assumptions are made about the character encoding of\n * the file contents (after base64 decoding).  No charset transcoding or\n * line-ending normalization will be performed; it is the client's\n * responsibility to manage the character encoding of files they provide.\n * However, for maximum compatibility we recommend using UTF-8 encoding\n * and ensuring that all files in a repository use a consistent\n * line-ending convention (`\\n` or `\\r\\n`), and that all files end\n * with a newline.\n *\n * ### Modeling file changes\n *\n * Each of the the five types of conceptual changes that can be made in a\n * git commit can be described using the `FileChanges` type as follows:\n *\n * 1. New file addition: create file `hello world\\n` at path `docs/README.txt`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n * 2. Existing file modification: change existing `docs/README.txt` to have new\n *    content `new content here\\n`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"new content here\\n\")\n *            }\n *          ]\n *        }\n *\n * 3. Existing file deletion: remove existing file `docs/README.txt`.\n *    Note that the path is required to exist -- specifying a\n *    path that does not exist on the given branch will abort the\n *    commit and return an error.\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\"\n *            }\n *          ]\n *        }\n *\n *\n * 4. File rename with no changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to the same content at\n *    `newdocs/README.txt`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n *\n * 5. File rename with changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to a file at path\n *    `newdocs/README.txt` with content `new contents\\n`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"new contents\\n\")\n *            }\n *          ]\n *        }\n */\nexport type FileChanges = {\n  /** File to add or change. */\n  additions?: InputMaybe<Array<FileAddition>>;\n  /** Files to delete. */\n  deletions?: InputMaybe<Array<FileDeletion>>;\n};\n\n/** A command to delete the file at the given path as part of a commit. */\nexport type FileDeletion = {\n  /** The path to delete */\n  path: Scalars[\"String\"][\"input\"];\n};\n\n/** The possible viewed states of a file . */\nexport enum FileViewedState {\n  /** The file has new changes since last viewed. */\n  Dismissed = \"DISMISSED\",\n  /** The file has not been marked as viewed. */\n  Unviewed = \"UNVIEWED\",\n  /** The file has been marked as viewed. */\n  Viewed = \"VIEWED\",\n}\n\n/** Autogenerated input type of FollowOrganization */\nexport type FollowOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the organization to follow. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of FollowOrganization */\nexport type FollowOrganizationPayload = {\n  __typename?: \"FollowOrganizationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organization that was followed. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of FollowUser */\nexport type FollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the user to follow. */\n  userId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of FollowUser */\nexport type FollowUserPayload = {\n  __typename?: \"FollowUserPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The user that was followed. */\n  user?: Maybe<User>;\n};\n\n/** The connection type for User. */\nexport type FollowerConnection = {\n  __typename?: \"FollowerConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** The connection type for User. */\nexport type FollowingConnection = {\n  __typename?: \"FollowingConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A funding platform link for a repository. */\nexport type FundingLink = {\n  __typename?: \"FundingLink\";\n  /** The funding platform this link is for. */\n  platform: FundingPlatform;\n  /** The configured URL for this funding link. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** The possible funding platforms for repository funding links. */\nexport enum FundingPlatform {\n  /** Community Bridge funding platform. */\n  CommunityBridge = \"COMMUNITY_BRIDGE\",\n  /** Custom funding platform. */\n  Custom = \"CUSTOM\",\n  /** GitHub funding platform. */\n  Github = \"GITHUB\",\n  /** IssueHunt funding platform. */\n  Issuehunt = \"ISSUEHUNT\",\n  /** Ko-fi funding platform. */\n  KoFi = \"KO_FI\",\n  /** LFX Crowdfunding funding platform. */\n  LfxCrowdfunding = \"LFX_CROWDFUNDING\",\n  /** Liberapay funding platform. */\n  Liberapay = \"LIBERAPAY\",\n  /** Open Collective funding platform. */\n  OpenCollective = \"OPEN_COLLECTIVE\",\n  /** Otechie funding platform. */\n  Otechie = \"OTECHIE\",\n  /** Patreon funding platform. */\n  Patreon = \"PATREON\",\n  /** Tidelift funding platform. */\n  Tidelift = \"TIDELIFT\",\n}\n\n/** A generic hovercard context with a message and icon */\nexport type GenericHovercardContext = HovercardContext & {\n  __typename?: \"GenericHovercardContext\";\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n};\n\n/** A Gist. */\nexport type Gist = Node &\n  Starrable &\n  UniformResourceLocatable & {\n    __typename?: \"Gist\";\n    /** A list of comments associated with the gist */\n    comments: GistCommentConnection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The gist description. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The files in this gist. */\n    files?: Maybe<Array<Maybe<GistFile>>>;\n    /** A list of forks associated with the gist */\n    forks: GistConnection;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Identifies if the gist is a fork. */\n    isFork: Scalars[\"Boolean\"][\"output\"];\n    /** Whether the gist is public or not. */\n    isPublic: Scalars[\"Boolean\"][\"output\"];\n    /** The gist name. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The gist owner. */\n    owner?: Maybe<RepositoryOwner>;\n    /** Identifies when the gist was last pushed to. */\n    pushedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The HTML path to this resource. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Returns a count of how many stargazers there are on this object */\n    stargazerCount: Scalars[\"Int\"][\"output\"];\n    /** A list of users who have starred this starrable. */\n    stargazers: StargazerConnection;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this Gist. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n    viewerHasStarred: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A Gist. */\nexport type GistCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A Gist. */\nexport type GistFilesArgs = {\n  limit?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  oid?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n};\n\n/** A Gist. */\nexport type GistForksArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<GistOrder>;\n};\n\n/** A Gist. */\nexport type GistStargazersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Represents a comment on an Gist. */\nexport type GistComment = Comment &\n  Deletable &\n  Minimizable &\n  Node &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"GistComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the gist. */\n    authorAssociation: CommentAuthorAssociation;\n    /** Identifies the comment body. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    /** The associated gist. */\n    gist: Gist;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not a comment has been minimized. */\n    isMinimized: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Returns why the comment was minimized. */\n    minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can minimize this object. */\n    viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** Represents a comment on an Gist. */\nexport type GistCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for GistComment. */\nexport type GistCommentConnection = {\n  __typename?: \"GistCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GistComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type GistCommentEdge = {\n  __typename?: \"GistCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<GistComment>;\n};\n\n/** The connection type for Gist. */\nexport type GistConnection = {\n  __typename?: \"GistConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Gist>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type GistEdge = {\n  __typename?: \"GistEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Gist>;\n};\n\n/** A file in a gist. */\nexport type GistFile = {\n  __typename?: \"GistFile\";\n  /** The file name encoded to remove characters that are invalid in URL paths. */\n  encodedName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The gist file encoding. */\n  encoding?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The file extension from the file name. */\n  extension?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Indicates if this file is an image. */\n  isImage: Scalars[\"Boolean\"][\"output\"];\n  /** Whether the file's contents were truncated. */\n  isTruncated: Scalars[\"Boolean\"][\"output\"];\n  /** The programming language this file is written in. */\n  language?: Maybe<Language>;\n  /** The gist file name. */\n  name?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The gist file size in bytes. */\n  size?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** UTF8 text data or null if the file is binary */\n  text?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** A file in a gist. */\nexport type GistFileTextArgs = {\n  truncate?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Ordering options for gist connections */\nexport type GistOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: GistOrderField;\n};\n\n/** Properties by which gist connections can be ordered. */\nexport enum GistOrderField {\n  /** Order gists by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order gists by push time */\n  PushedAt = \"PUSHED_AT\",\n  /** Order gists by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The privacy of a Gist */\nexport enum GistPrivacy {\n  /** Gists that are public and secret */\n  All = \"ALL\",\n  /** Public */\n  Public = \"PUBLIC\",\n  /** Secret */\n  Secret = \"SECRET\",\n}\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActor = {\n  __typename?: \"GitActor\";\n  /** A URL pointing to the author's public avatar. */\n  avatarUrl: Scalars[\"URI\"][\"output\"];\n  /** The timestamp of the Git action (authoring or committing). */\n  date?: Maybe<Scalars[\"GitTimestamp\"][\"output\"]>;\n  /** The email in the Git commit. */\n  email?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The name in the Git commit. */\n  name?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The GitHub user corresponding to the email field. Null if no such user exists. */\n  user?: Maybe<User>;\n};\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for GitActor. */\nexport type GitActorConnection = {\n  __typename?: \"GitActorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GitActorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GitActor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type GitActorEdge = {\n  __typename?: \"GitActorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<GitActor>;\n};\n\n/** Represents information about the GitHub instance. */\nexport type GitHubMetadata = {\n  __typename?: \"GitHubMetadata\";\n  /** Returns a String that's a SHA of `github-services` */\n  gitHubServicesSha: Scalars[\"GitObjectID\"][\"output\"];\n  /** IP addresses that users connect to for git operations */\n  gitIpAddresses?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** IP addresses that service hooks are sent from */\n  hookIpAddresses?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** IP addresses that the importer connects from */\n  importerIpAddresses?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** Whether or not users are verified */\n  isPasswordAuthenticationVerifiable: Scalars[\"Boolean\"][\"output\"];\n  /** IP addresses for GitHub Pages' A records */\n  pagesIpAddresses?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n};\n\n/** Represents a Git object. */\nexport type GitObject = {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars[\"String\"][\"output\"];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars[\"URI\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The Git object ID */\n  oid: Scalars[\"GitObjectID\"][\"output\"];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n};\n\n/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */\nexport type GitSignature = {\n  /** Email used to sign this object. */\n  email: Scalars[\"String\"][\"output\"];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars[\"Boolean\"][\"output\"];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars[\"String\"][\"output\"];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars[\"String\"][\"output\"];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** The state of a Git signature. */\nexport enum GitSignatureState {\n  /** The signing certificate or its chain could not be verified */\n  BadCert = \"BAD_CERT\",\n  /** Invalid email used for signing */\n  BadEmail = \"BAD_EMAIL\",\n  /** Signing key expired */\n  ExpiredKey = \"EXPIRED_KEY\",\n  /** Internal error - the GPG verification service misbehaved */\n  GpgverifyError = \"GPGVERIFY_ERROR\",\n  /** Internal error - the GPG verification service is unavailable at the moment */\n  GpgverifyUnavailable = \"GPGVERIFY_UNAVAILABLE\",\n  /** Invalid signature */\n  Invalid = \"INVALID\",\n  /** Malformed signature */\n  MalformedSig = \"MALFORMED_SIG\",\n  /** The usage flags for the key that signed this don't allow signing */\n  NotSigningKey = \"NOT_SIGNING_KEY\",\n  /** Email used for signing not known to GitHub */\n  NoUser = \"NO_USER\",\n  /** Valid signature, though certificate revocation check failed */\n  OcspError = \"OCSP_ERROR\",\n  /** Valid signature, pending certificate revocation checking */\n  OcspPending = \"OCSP_PENDING\",\n  /** One or more certificates in chain has been revoked */\n  OcspRevoked = \"OCSP_REVOKED\",\n  /** Key used for signing not known to GitHub */\n  UnknownKey = \"UNKNOWN_KEY\",\n  /** Unknown signature type */\n  UnknownSigType = \"UNKNOWN_SIG_TYPE\",\n  /** Unsigned */\n  Unsigned = \"UNSIGNED\",\n  /** Email used for signing unverified on GitHub */\n  UnverifiedEmail = \"UNVERIFIED_EMAIL\",\n  /** Valid signature and verified by GitHub */\n  Valid = \"VALID\",\n}\n\n/** Represents a GPG signature on a Commit or Tag. */\nexport type GpgSignature = GitSignature & {\n  __typename?: \"GpgSignature\";\n  /** Email used to sign this object. */\n  email: Scalars[\"String\"][\"output\"];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars[\"Boolean\"][\"output\"];\n  /** Hex-encoded ID of the key that signed this object. */\n  keyId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars[\"String\"][\"output\"];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars[\"String\"][\"output\"];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of the user to grant the migrator role */\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRolePayload = {\n  __typename?: \"GrantEnterpriseOrganizationsMigratorRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organizations that had the migrator role applied to for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated input type of GrantMigratorRole */\nexport type GrantMigratorRoleInput = {\n  /** The user login or Team slug to grant the migrator role. */\n  actor: Scalars[\"String\"][\"input\"];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of GrantMigratorRole */\nexport type GrantMigratorRolePayload = {\n  __typename?: \"GrantMigratorRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** Represents a 'head_ref_deleted' event on a given pull request. */\nexport type HeadRefDeletedEvent = Node & {\n  __typename?: \"HeadRefDeletedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the Ref associated with the `head_ref_deleted` event. */\n  headRef?: Maybe<Ref>;\n  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */\n  headRefName: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'head_ref_force_pushed' event on a given pull request. */\nexport type HeadRefForcePushedEvent = Node & {\n  __typename?: \"HeadRefForcePushedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a 'head_ref_restored' event on a given pull request. */\nexport type HeadRefRestoredEvent = Node & {\n  __typename?: \"HeadRefRestoredEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Detail needed to display a hovercard for a user */\nexport type Hovercard = {\n  __typename?: \"Hovercard\";\n  /** Each of the contexts for this hovercard */\n  contexts: Array<HovercardContext>;\n};\n\n/** An individual line of a hovercard */\nexport type HovercardContext = {\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n};\n\n/** The possible states in which authentication can be configured with an identity provider. */\nexport enum IdentityProviderConfigurationState {\n  /** Authentication with an identity provider is configured but not enforced. */\n  Configured = \"CONFIGURED\",\n  /** Authentication with an identity provider is configured and enforced. */\n  Enforced = \"ENFORCED\",\n  /** Authentication with an identity provider is not configured. */\n  Unconfigured = \"UNCONFIGURED\",\n}\n\n/** Autogenerated input type of ImportProject */\nexport type ImportProjectInput = {\n  /** The description of Project. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A list of columns containing issues and pull requests. */\n  columnImports: Array<ProjectColumnImport>;\n  /** The name of Project. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The name of the Organization or User to create the Project under. */\n  ownerName: Scalars[\"String\"][\"input\"];\n  /** Whether the Project is public or not. */\n  public?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** Autogenerated return type of ImportProject */\nexport type ImportProjectPayload = {\n  __typename?: \"ImportProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new Project! */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of InviteEnterpriseAdmin */\nexport type InviteEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The email of the person to invite as an administrator. */\n  email?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise to which you want to invite an administrator. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of a user to invite as an administrator. */\n  invitee?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The role of the administrator. */\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n/** Autogenerated return type of InviteEnterpriseAdmin */\nexport type InviteEnterpriseAdminPayload = {\n  __typename?: \"InviteEnterpriseAdminPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The created enterprise administrator invitation. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** The possible values for the IP allow list enabled setting. */\nexport enum IpAllowListEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = \"DISABLED\",\n  /** The setting is enabled for the owner. */\n  Enabled = \"ENABLED\",\n}\n\n/** An IP address or range of addresses that is allowed to access an owner's resources. */\nexport type IpAllowListEntry = Node & {\n  __typename?: \"IpAllowListEntry\";\n  /** A single IP address or range of IP addresses in CIDR notation. */\n  allowListValue: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether the entry is currently active. */\n  isActive: Scalars[\"Boolean\"][\"output\"];\n  /** The name of the IP allow list entry. */\n  name?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The owner of the IP allow list entry. */\n  owner: IpAllowListOwner;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** The connection type for IpAllowListEntry. */\nexport type IpAllowListEntryConnection = {\n  __typename?: \"IpAllowListEntryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IpAllowListEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IpAllowListEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type IpAllowListEntryEdge = {\n  __typename?: \"IpAllowListEntryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<IpAllowListEntry>;\n};\n\n/** Ordering options for IP allow list entry connections. */\nexport type IpAllowListEntryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order IP allow list entries by. */\n  field: IpAllowListEntryOrderField;\n};\n\n/** Properties by which IP allow list entry connections can be ordered. */\nexport enum IpAllowListEntryOrderField {\n  /** Order IP allow list entries by the allow list value. */\n  AllowListValue = \"ALLOW_LIST_VALUE\",\n  /** Order IP allow list entries by creation time. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */\nexport enum IpAllowListForInstalledAppsEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = \"DISABLED\",\n  /** The setting is enabled for the owner. */\n  Enabled = \"ENABLED\",\n}\n\n/** Types that can own an IP allow list. */\nexport type IpAllowListOwner = App | Enterprise | Organization;\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type Issue = Assignable &\n  Closable &\n  Comment &\n  Labelable &\n  Lockable &\n  Node &\n  ProjectNextOwner &\n  ProjectV2Owner &\n  Reactable &\n  RepositoryNode &\n  Subscribable &\n  UniformResourceLocatable &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"Issue\";\n    /** Reason that the conversation was locked. */\n    activeLockReason?: Maybe<LockReason>;\n    /** A list of Users assigned to this object. */\n    assignees: UserConnection;\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** Identifies the body of the issue. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The http path for this issue body */\n    bodyResourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the body of the issue rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** The http URL for this issue body */\n    bodyUrl: Scalars[\"URI\"][\"output\"];\n    /** `true` if the object is closed (definition of closed may depend on type) */\n    closed: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was closed. */\n    closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of comments associated with the Issue. */\n    comments: IssueCommentConnection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    /** The hovercard information for this issue */\n    hovercard: Hovercard;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates whether or not this issue is currently pinned to the repository issues list */\n    isPinned?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** Is this issue read by the viewer */\n    isReadByViewer?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** A list of labels associated with the object. */\n    labels?: Maybe<LabelConnection>;\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** `true` if the object is locked */\n    locked: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the milestone associated with the issue. */\n    milestone?: Maybe<Milestone>;\n    /** Identifies the issue number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** A list of Users that are participating in the Issue conversation. */\n    participants: UserConnection;\n    /** List of project cards associated with this issue. */\n    projectCards: ProjectCardConnection;\n    /** Find a project by project (beta) number. */\n    projectNext?: Maybe<ProjectNext>;\n    /** List of project (beta) items associated with this issue. */\n    projectNextItems: ProjectNextItemConnection;\n    /** A list of projects (beta) under the owner. */\n    projectsNext: ProjectNextConnection;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path for this issue */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the state of the issue. */\n    state: IssueState;\n    /**\n     * A list of events, comments, commits, etc. associated with the issue.\n     * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.\n     */\n    timeline: IssueTimelineConnection;\n    /** A list of events, comments, commits, etc. associated with the issue. */\n    timelineItems: IssueTimelineItemsConnection;\n    /** Identifies the issue title. */\n    title: Scalars[\"String\"][\"output\"];\n    /** Identifies the issue title rendered to HTML. */\n    titleHTML: Scalars[\"String\"][\"output\"];\n    /** A list of issues that track this issue */\n    trackedInIssues: IssueConnection;\n    /** A list of issues tracked inside the current issue */\n    trackedIssues: IssueConnection;\n    /** The number of tracked issues for this issue */\n    trackedIssuesCount: Scalars[\"Int\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this issue */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n  };\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueAssigneesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueLabelsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueParticipantsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectCardsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includeArchived?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  itemTypes?: InputMaybe<Array<IssueTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  skip?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedInIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedIssuesCountArgs = {\n  states?: InputMaybe<Array<InputMaybe<TrackedIssueStates>>>;\n};\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a comment on an Issue. */\nexport type IssueComment = Comment &\n  Deletable &\n  Minimizable &\n  Node &\n  Reactable &\n  RepositoryNode &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"IssueComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The body as Markdown. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not a comment has been minimized. */\n    isMinimized: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the issue associated with the comment. */\n    issue: Issue;\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Returns why the comment was minimized. */\n    minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /**\n     * Returns the pull request associated with the comment, if this comment was made on a\n     * pull request.\n     */\n    pullRequest?: Maybe<PullRequest>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path for this issue comment */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this issue comment */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can minimize this object. */\n    viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for IssueComment. */\nexport type IssueCommentConnection = {\n  __typename?: \"IssueCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type IssueCommentEdge = {\n  __typename?: \"IssueCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueComment>;\n};\n\n/** Ways in which lists of issue comments can be ordered upon return. */\nexport type IssueCommentOrder = {\n  /** The direction in which to order issue comments by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issue comments by. */\n  field: IssueCommentOrderField;\n};\n\n/** Properties by which issue comment connections can be ordered. */\nexport enum IssueCommentOrderField {\n  /** Order issue comments by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The connection type for Issue. */\nexport type IssueConnection = {\n  __typename?: \"IssueConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Issue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepository = {\n  __typename?: \"IssueContributionsByRepository\";\n  /** The issue contributions. */\n  contributions: CreatedIssueContributionConnection;\n  /** The repository in which the issues were opened. */\n  repository: Repository;\n};\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type IssueEdge = {\n  __typename?: \"IssueEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Issue>;\n};\n\n/** Ways in which to filter lists of issues. */\nexport type IssueFilters = {\n  /**\n   * List issues assigned to given name. Pass in `null` for issues with no assigned\n   * user, and `*` for issues assigned to any user.\n   */\n  assignee?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** List issues created by given name. */\n  createdBy?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** List issues where the list of label names exist on the issue. */\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  /** List issues where the given name is mentioned in the issue. */\n  mentioned?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * List issues by given milestone argument. If an string representation of an\n   * integer is passed, it should refer to a milestone by its database ID. Pass in\n   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n   */\n  milestone?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * List issues by given milestone argument. If an string representation of an\n   * integer is passed, it should refer to a milestone by its number field. Pass in\n   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n   */\n  milestoneNumber?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** List issues that have been updated at or after the given date. */\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** List issues filtered by the list of states given. */\n  states?: InputMaybe<Array<IssueState>>;\n  /** List issues subscribed to by viewer. */\n  viewerSubscribed?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** Used for return value of Repository.issueOrPullRequest. */\nexport type IssueOrPullRequest = Issue | PullRequest;\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type IssueOrder = {\n  /** The direction in which to order issues by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issues by. */\n  field: IssueOrderField;\n};\n\n/** Properties by which issue connections can be ordered. */\nexport enum IssueOrderField {\n  /** Order issues by comment count */\n  Comments = \"COMMENTS\",\n  /** Order issues by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order issues by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The possible states of an issue. */\nexport enum IssueState {\n  /** An issue that has been closed */\n  Closed = \"CLOSED\",\n  /** An issue that is still open */\n  Open = \"OPEN\",\n}\n\n/** A repository issue template. */\nexport type IssueTemplate = {\n  __typename?: \"IssueTemplate\";\n  /** The template purpose. */\n  about?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The suggested issue body. */\n  body?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The template name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The suggested issue title. */\n  title?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The connection type for IssueTimelineItem. */\nexport type IssueTimelineConnection = {\n  __typename?: \"IssueTimelineConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItem =\n  | AssignedEvent\n  | ClosedEvent\n  | Commit\n  | CrossReferencedEvent\n  | DemilestonedEvent\n  | IssueComment\n  | LabeledEvent\n  | LockedEvent\n  | MilestonedEvent\n  | ReferencedEvent\n  | RenamedTitleEvent\n  | ReopenedEvent\n  | SubscribedEvent\n  | TransferredEvent\n  | UnassignedEvent\n  | UnlabeledEvent\n  | UnlockedEvent\n  | UnsubscribedEvent\n  | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type IssueTimelineItemEdge = {\n  __typename?: \"IssueTimelineItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItem>;\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItems =\n  | AddedToProjectEvent\n  | AssignedEvent\n  | ClosedEvent\n  | CommentDeletedEvent\n  | ConnectedEvent\n  | ConvertedNoteToIssueEvent\n  | ConvertedToDiscussionEvent\n  | CrossReferencedEvent\n  | DemilestonedEvent\n  | DisconnectedEvent\n  | IssueComment\n  | LabeledEvent\n  | LockedEvent\n  | MarkedAsDuplicateEvent\n  | MentionedEvent\n  | MilestonedEvent\n  | MovedColumnsInProjectEvent\n  | PinnedEvent\n  | ReferencedEvent\n  | RemovedFromProjectEvent\n  | RenamedTitleEvent\n  | ReopenedEvent\n  | SubscribedEvent\n  | TransferredEvent\n  | UnassignedEvent\n  | UnlabeledEvent\n  | UnlockedEvent\n  | UnmarkedAsDuplicateEvent\n  | UnpinnedEvent\n  | UnsubscribedEvent\n  | UserBlockedEvent;\n\n/** The connection type for IssueTimelineItems. */\nexport type IssueTimelineItemsConnection = {\n  __typename?: \"IssueTimelineItemsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars[\"Int\"][\"output\"];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars[\"Int\"][\"output\"];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type IssueTimelineItemsEdge = {\n  __typename?: \"IssueTimelineItemsEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum IssueTimelineItemsItemType {\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = \"ADDED_TO_PROJECT_EVENT\",\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = \"ASSIGNED_EVENT\",\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = \"CLOSED_EVENT\",\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = \"COMMENT_DELETED_EVENT\",\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = \"CONNECTED_EVENT\",\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = \"CONVERTED_NOTE_TO_ISSUE_EVENT\",\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = \"CONVERTED_TO_DISCUSSION_EVENT\",\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = \"CROSS_REFERENCED_EVENT\",\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = \"DEMILESTONED_EVENT\",\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = \"DISCONNECTED_EVENT\",\n  /** Represents a comment on an Issue. */\n  IssueComment = \"ISSUE_COMMENT\",\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = \"LABELED_EVENT\",\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = \"LOCKED_EVENT\",\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = \"MARKED_AS_DUPLICATE_EVENT\",\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = \"MENTIONED_EVENT\",\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = \"MILESTONED_EVENT\",\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = \"MOVED_COLUMNS_IN_PROJECT_EVENT\",\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = \"PINNED_EVENT\",\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = \"REFERENCED_EVENT\",\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = \"REMOVED_FROM_PROJECT_EVENT\",\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = \"RENAMED_TITLE_EVENT\",\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = \"REOPENED_EVENT\",\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = \"SUBSCRIBED_EVENT\",\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = \"TRANSFERRED_EVENT\",\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = \"UNASSIGNED_EVENT\",\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = \"UNLABELED_EVENT\",\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = \"UNLOCKED_EVENT\",\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = \"UNMARKED_AS_DUPLICATE_EVENT\",\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = \"UNPINNED_EVENT\",\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = \"UNSUBSCRIBED_EVENT\",\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = \"USER_BLOCKED_EVENT\",\n}\n\n/** Represents a user signing up for a GitHub account. */\nexport type JoinedGitHubContribution = Contribution & {\n  __typename?: \"JoinedGitHubContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type Label = Node & {\n  __typename?: \"Label\";\n  /** Identifies the label color. */\n  color: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the label was created. */\n  createdAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** A brief description of this label. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Indicates whether or not this is a default label. */\n  isDefault: Scalars[\"Boolean\"][\"output\"];\n  /** A list of issues associated with this label. */\n  issues: IssueConnection;\n  /** Identifies the label name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** A list of pull requests associated with this label. */\n  pullRequests: PullRequestConnection;\n  /** The repository associated with this label. */\n  repository: Repository;\n  /** The HTTP path for this label. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** Identifies the date and time when the label was last updated. */\n  updatedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The HTTP URL for this label. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Label. */\nexport type LabelConnection = {\n  __typename?: \"LabelConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LabelEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Label>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type LabelEdge = {\n  __typename?: \"LabelEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Label>;\n};\n\n/** Ways in which lists of labels can be ordered upon return. */\nexport type LabelOrder = {\n  /** The direction in which to order labels by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order labels by. */\n  field: LabelOrderField;\n};\n\n/** Properties by which label connections can be ordered. */\nexport enum LabelOrderField {\n  /** Order labels by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order labels by name */\n  Name = \"NAME\",\n}\n\n/** An object that can have labels assigned to it. */\nexport type Labelable = {\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n};\n\n/** An object that can have labels assigned to it. */\nexport type LabelableLabelsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** Represents a 'labeled' event on a given issue or pull request. */\nexport type LabeledEvent = Node & {\n  __typename?: \"LabeledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the label associated with the 'labeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Represents a given language found in repositories. */\nexport type Language = Node & {\n  __typename?: \"Language\";\n  /** The color defined for the current language. */\n  color?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The name of the current language. */\n  name: Scalars[\"String\"][\"output\"];\n};\n\n/** A list of languages associated with the parent. */\nexport type LanguageConnection = {\n  __typename?: \"LanguageConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LanguageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Language>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** The total size in bytes of files written in that language. */\n  totalSize: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents the language of a repository. */\nexport type LanguageEdge = {\n  __typename?: \"LanguageEdge\";\n  cursor: Scalars[\"String\"][\"output\"];\n  node: Language;\n  /** The number of bytes of code written in the language. */\n  size: Scalars[\"Int\"][\"output\"];\n};\n\n/** Ordering options for language connections. */\nexport type LanguageOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order languages by. */\n  field: LanguageOrderField;\n};\n\n/** Properties by which language connections can be ordered. */\nexport enum LanguageOrderField {\n  /** Order languages by the size of all files containing the language */\n  Size = \"SIZE\",\n}\n\n/** A repository's open source license */\nexport type License = Node & {\n  __typename?: \"License\";\n  /** The full text of the license */\n  body: Scalars[\"String\"][\"output\"];\n  /** The conditions set by the license */\n  conditions: Array<Maybe<LicenseRule>>;\n  /** A human-readable description of the license */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Whether the license should be featured */\n  featured: Scalars[\"Boolean\"][\"output\"];\n  /** Whether the license should be displayed in license pickers */\n  hidden: Scalars[\"Boolean\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Instructions on how to implement the license */\n  implementation?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The lowercased SPDX ID of the license */\n  key: Scalars[\"String\"][\"output\"];\n  /** The limitations set by the license */\n  limitations: Array<Maybe<LicenseRule>>;\n  /** The license full name specified by <https://spdx.org/licenses> */\n  name: Scalars[\"String\"][\"output\"];\n  /** Customary short name if applicable (e.g, GPLv3) */\n  nickname?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The permissions set by the license */\n  permissions: Array<Maybe<LicenseRule>>;\n  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */\n  pseudoLicense: Scalars[\"Boolean\"][\"output\"];\n  /** Short identifier specified by <https://spdx.org/licenses> */\n  spdxId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** URL to the license on <https://choosealicense.com> */\n  url?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Describes a License's conditions, permissions, and limitations */\nexport type LicenseRule = {\n  __typename?: \"LicenseRule\";\n  /** A description of the rule */\n  description: Scalars[\"String\"][\"output\"];\n  /** The machine-readable rule key */\n  key: Scalars[\"String\"][\"output\"];\n  /** The human-readable rule label */\n  label: Scalars[\"String\"][\"output\"];\n};\n\n/** Autogenerated input type of LinkRepositoryToProject */\nexport type LinkRepositoryToProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Project to link to a Repository */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the Repository to link to a Project. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of LinkRepositoryToProject */\nexport type LinkRepositoryToProjectPayload = {\n  __typename?: \"LinkRepositoryToProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of LockLockable */\nexport type LockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A reason for why the item will be locked. */\n  lockReason?: InputMaybe<LockReason>;\n  /** ID of the item to be locked. */\n  lockableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of LockLockable */\nexport type LockLockablePayload = {\n  __typename?: \"LockLockablePayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The item that was locked. */\n  lockedRecord?: Maybe<Lockable>;\n};\n\n/** The possible reasons that an issue or pull request was locked. */\nexport enum LockReason {\n  /** The issue or pull request was locked because the conversation was off-topic. */\n  OffTopic = \"OFF_TOPIC\",\n  /** The issue or pull request was locked because the conversation was resolved. */\n  Resolved = \"RESOLVED\",\n  /** The issue or pull request was locked because the conversation was spam. */\n  Spam = \"SPAM\",\n  /** The issue or pull request was locked because the conversation was too heated. */\n  TooHeated = \"TOO_HEATED\",\n}\n\n/** An object that can be locked. */\nexport type Lockable = {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** `true` if the object is locked */\n  locked: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a 'locked' event on a given issue or pull request. */\nexport type LockedEvent = Node & {\n  __typename?: \"LockedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Reason that the conversation was locked (optional). */\n  lockReason?: Maybe<LockReason>;\n  /** Object that was locked. */\n  lockable: Lockable;\n};\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type Mannequin = Actor &\n  Node &\n  UniformResourceLocatable & {\n    __typename?: \"Mannequin\";\n    /** A URL pointing to the GitHub App's public avatar. */\n    avatarUrl: Scalars[\"URI\"][\"output\"];\n    /** The user that has claimed the data attributed to this mannequin. */\n    claimant?: Maybe<User>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The mannequin's email on the source instance. */\n    email?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The username of the actor. */\n    login: Scalars[\"String\"][\"output\"];\n    /** The HTML path to this resource. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The URL to this resource. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type MannequinAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated input type of MarkDiscussionCommentAsAnswer */\nexport type MarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion comment to mark as an answer. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MarkDiscussionCommentAsAnswer */\nexport type MarkDiscussionCommentAsAnswerPayload = {\n  __typename?: \"MarkDiscussionCommentAsAnswerPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The discussion that includes the chosen comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of MarkFileAsViewed */\nexport type MarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The path of the file to mark as viewed */\n  path: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MarkFileAsViewed */\nexport type MarkFileAsViewedPayload = {\n  __typename?: \"MarkFileAsViewedPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of MarkPullRequestReadyForReview */\nexport type MarkPullRequestReadyForReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the pull request to be marked as ready for review. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MarkPullRequestReadyForReview */\nexport type MarkPullRequestReadyForReviewPayload = {\n  __typename?: \"MarkPullRequestReadyForReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that is ready for review. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\nexport type MarkedAsDuplicateEvent = Node & {\n  __typename?: \"MarkedAsDuplicateEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** A public description of a Marketplace category. */\nexport type MarketplaceCategory = Node & {\n  __typename?: \"MarketplaceCategory\";\n  /** The category's description. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The technical description of how apps listed in this category work with GitHub. */\n  howItWorks?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The category's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** How many Marketplace listings have this as their primary category. */\n  primaryListingCount: Scalars[\"Int\"][\"output\"];\n  /** The HTTP path for this Marketplace category. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** How many Marketplace listings have this as their secondary category. */\n  secondaryListingCount: Scalars[\"Int\"][\"output\"];\n  /** The short name of the category used in its URL. */\n  slug: Scalars[\"String\"][\"output\"];\n  /** The HTTP URL for this Marketplace category. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListing = Node & {\n  __typename?: \"MarketplaceListing\";\n  /** The GitHub App this listing represents. */\n  app?: Maybe<App>;\n  /** URL to the listing owner's company site. */\n  companyUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP path for configuring access to the listing's integration or OAuth app */\n  configurationResourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for configuring access to the listing's integration or OAuth app */\n  configurationUrl: Scalars[\"URI\"][\"output\"];\n  /** URL to the listing's documentation. */\n  documentationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The listing's detailed description. */\n  extendedDescription?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The listing's detailed description rendered to HTML. */\n  extendedDescriptionHTML: Scalars[\"HTML\"][\"output\"];\n  /** The listing's introductory description. */\n  fullDescription: Scalars[\"String\"][\"output\"];\n  /** The listing's introductory description rendered to HTML. */\n  fullDescriptionHTML: Scalars[\"HTML\"][\"output\"];\n  /** Does this listing have any plans with a free trial? */\n  hasPublishedFreeTrialPlans: Scalars[\"Boolean\"][\"output\"];\n  /** Does this listing have a terms of service link? */\n  hasTermsOfService: Scalars[\"Boolean\"][\"output\"];\n  /** Whether the creator of the app is a verified org */\n  hasVerifiedOwner: Scalars[\"Boolean\"][\"output\"];\n  /** A technical description of how this app works with GitHub. */\n  howItWorks?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The listing's technical description rendered to HTML. */\n  howItWorksHTML: Scalars[\"HTML\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** URL to install the product to the viewer's account or organization. */\n  installationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** Whether this listing's app has been installed for the current viewer */\n  installedForViewer: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this listing has been removed from the Marketplace. */\n  isArchived: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Whether this listing is still an editable draft that has not been submitted\n   * for review and is not publicly visible in the Marketplace.\n   */\n  isDraft: Scalars[\"Boolean\"][\"output\"];\n  /** Whether the product this listing represents is available as part of a paid plan. */\n  isPaid: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this listing has been approved for display in the Marketplace. */\n  isPublic: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */\n  isRejected: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this listing has been approved for unverified display in the Marketplace. */\n  isUnverified: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */\n  isUnverifiedPending: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromDraft: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromUnverified: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this listing has been approved for verified display in the Marketplace. */\n  isVerified: Scalars[\"Boolean\"][\"output\"];\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars[\"String\"][\"output\"];\n  /** URL for the listing's logo image. */\n  logoUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The listing's full name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The listing's very short description without a trailing period or ampersands. */\n  normalizedShortDescription: Scalars[\"String\"][\"output\"];\n  /** URL to the listing's detailed pricing. */\n  pricingUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The category that best describes the listing. */\n  primaryCategory: MarketplaceCategory;\n  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */\n  privacyPolicyUrl: Scalars[\"URI\"][\"output\"];\n  /** The HTTP path for the Marketplace listing. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The URLs for the listing's screenshots. */\n  screenshotUrls: Array<Maybe<Scalars[\"String\"][\"output\"]>>;\n  /** An alternate category that describes the listing. */\n  secondaryCategory?: Maybe<MarketplaceCategory>;\n  /** The listing's very short description. */\n  shortDescription: Scalars[\"String\"][\"output\"];\n  /** The short name of the listing used in its URL. */\n  slug: Scalars[\"String\"][\"output\"];\n  /** URL to the listing's status page. */\n  statusUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** An email address for support for this listing's app. */\n  supportEmail?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /**\n   * Either a URL or an email address for support for this listing's app, may\n   * return an empty string for listings that do not require a support URL.\n   */\n  supportUrl: Scalars[\"URI\"][\"output\"];\n  /** URL to the listing's terms of service. */\n  termsOfServiceUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the Marketplace listing. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** Can the current viewer add plans for this Marketplace listing. */\n  viewerCanAddPlans: Scalars[\"Boolean\"][\"output\"];\n  /** Can the current viewer approve this Marketplace listing. */\n  viewerCanApprove: Scalars[\"Boolean\"][\"output\"];\n  /** Can the current viewer delist this Marketplace listing. */\n  viewerCanDelist: Scalars[\"Boolean\"][\"output\"];\n  /** Can the current viewer edit this Marketplace listing. */\n  viewerCanEdit: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Can the current viewer edit the primary and secondary category of this\n   * Marketplace listing.\n   */\n  viewerCanEditCategories: Scalars[\"Boolean\"][\"output\"];\n  /** Can the current viewer edit the plans for this Marketplace listing. */\n  viewerCanEditPlans: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Can the current viewer return this Marketplace listing to draft state\n   * so it becomes editable again.\n   */\n  viewerCanRedraft: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Can the current viewer reject this Marketplace listing by returning it to\n   * an editable draft state or rejecting it entirely.\n   */\n  viewerCanReject: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Can the current viewer request this listing be reviewed for display in\n   * the Marketplace as verified.\n   */\n  viewerCanRequestApproval: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates whether the current user has an active subscription to this Marketplace listing. */\n  viewerHasPurchased: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Indicates if the current user has purchased a subscription to this Marketplace listing\n   * for all of the organizations the user owns.\n   */\n  viewerHasPurchasedForAllOrganizations: Scalars[\"Boolean\"][\"output\"];\n  /** Does the current viewer role allow them to administer this Marketplace listing. */\n  viewerIsListingAdmin: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListingLogoUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Look up Marketplace Listings */\nexport type MarketplaceListingConnection = {\n  __typename?: \"MarketplaceListingConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MarketplaceListingEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MarketplaceListing>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type MarketplaceListingEdge = {\n  __typename?: \"MarketplaceListingEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<MarketplaceListing>;\n};\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusable = {\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n};\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusableMemberStatusesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n/** Audit log entry for a members_can_delete_repos.clear event. */\nexport type MembersCanDeleteReposClearAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"MembersCanDeleteReposClearAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a members_can_delete_repos.disable event. */\nexport type MembersCanDeleteReposDisableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"MembersCanDeleteReposDisableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a members_can_delete_repos.enable event. */\nexport type MembersCanDeleteReposEnableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"MembersCanDeleteReposEnableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Represents a 'mentioned' event on a given issue or pull request. */\nexport type MentionedEvent = Node & {\n  __typename?: \"MentionedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Autogenerated input type of MergeBranch */\nexport type MergeBranchInput = {\n  /** The email address to associate with this commit. */\n  authorEmail?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the base branch that the provided head will be merged into. */\n  base: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Message to use for the merge commit. If omitted, a default will be used. */\n  commitMessage?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */\n  head: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the Repository containing the base branch that will be modified. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MergeBranch */\nexport type MergeBranchPayload = {\n  __typename?: \"MergeBranchPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The resulting merge Commit. */\n  mergeCommit?: Maybe<Commit>;\n};\n\n/** Autogenerated input type of MergePullRequest */\nexport type MergePullRequestInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Commit body to use for the merge commit; if omitted, a default message will be used */\n  commitBody?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */\n  commitHeadline?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */\n  expectedHeadOid?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n  /** The merge method to use. If omitted, defaults to 'MERGE' */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to be merged. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MergePullRequest */\nexport type MergePullRequestPayload = {\n  __typename?: \"MergePullRequestPayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that was merged. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Detailed status information about a pull request merge. */\nexport enum MergeStateStatus {\n  /** The head ref is out of date. */\n  Behind = \"BEHIND\",\n  /** The merge is blocked. */\n  Blocked = \"BLOCKED\",\n  /** Mergeable and passing commit status. */\n  Clean = \"CLEAN\",\n  /** The merge commit cannot be cleanly created. */\n  Dirty = \"DIRTY\",\n  /**\n   * The merge is blocked due to the pull request being a draft.\n   * @deprecated DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC.\n   */\n  Draft = \"DRAFT\",\n  /** Mergeable with passing commit status and pre-receive hooks. */\n  HasHooks = \"HAS_HOOKS\",\n  /** The state cannot currently be determined. */\n  Unknown = \"UNKNOWN\",\n  /** Mergeable with non-passing commit status. */\n  Unstable = \"UNSTABLE\",\n}\n\n/** Whether or not a PullRequest can be merged. */\nexport enum MergeableState {\n  /** The pull request cannot be merged due to merge conflicts. */\n  Conflicting = \"CONFLICTING\",\n  /** The pull request can be merged. */\n  Mergeable = \"MERGEABLE\",\n  /** The mergeability of the pull request is still being calculated. */\n  Unknown = \"UNKNOWN\",\n}\n\n/** Represents a 'merged' event on a given pull request. */\nexport type MergedEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"MergedEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Identifies the commit associated with the `merge` event. */\n    commit?: Maybe<Commit>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Identifies the Ref associated with the `merge` event. */\n    mergeRef?: Maybe<Ref>;\n    /** Identifies the name of the Ref associated with the `merge` event. */\n    mergeRefName: Scalars[\"String\"][\"output\"];\n    /** PullRequest referenced by event. */\n    pullRequest: PullRequest;\n    /** The HTTP path for this merged event. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this merged event. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents an Octoshift migration. */\nexport type Migration = {\n  /** The Octoshift migration flag to continue on error. */\n  continueOnError: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The reason the migration failed. */\n  failureReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The URL for the migration log (expires 1 day after migration completes). */\n  migrationLogUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The Octoshift migration source. */\n  migrationSource: MigrationSource;\n  /** The target repository name. */\n  repositoryName: Scalars[\"String\"][\"output\"];\n  /** The Octoshift migration source URL. */\n  sourceUrl: Scalars[\"URI\"][\"output\"];\n  /** The Octoshift migration state. */\n  state: MigrationState;\n};\n\n/** An Octoshift migration source. */\nexport type MigrationSource = Node & {\n  __typename?: \"MigrationSource\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** The Octoshift migration source name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The Octoshift migration source type. */\n  type: MigrationSourceType;\n  /** The Octoshift migration source URL. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** Represents the different Octoshift migration sources. */\nexport enum MigrationSourceType {\n  /** An Azure DevOps migration source. */\n  AzureDevops = \"AZURE_DEVOPS\",\n  /** A Bitbucket Server migration source. */\n  BitbucketServer = \"BITBUCKET_SERVER\",\n  /** A GitHub migration source. */\n  Github = \"GITHUB\",\n  /** A GitHub Migration API source. */\n  GithubArchive = \"GITHUB_ARCHIVE\",\n  /** A GitLab migration source. */\n  Gitlab = \"GITLAB\",\n}\n\n/** The Octoshift migration state. */\nexport enum MigrationState {\n  /** The Octoshift migration has failed. */\n  Failed = \"FAILED\",\n  /** The Octoshift migration is in progress. */\n  InProgress = \"IN_PROGRESS\",\n  /** The Octoshift migration has not started. */\n  NotStarted = \"NOT_STARTED\",\n  /** The Octoshift migration has been queued. */\n  Queued = \"QUEUED\",\n  /** The Octoshift migration has succeeded. */\n  Succeeded = \"SUCCEEDED\",\n}\n\n/** Represents a Milestone object on a given repository. */\nexport type Milestone = Closable &\n  Node &\n  UniformResourceLocatable & {\n    __typename?: \"Milestone\";\n    /** `true` if the object is closed (definition of closed may depend on type) */\n    closed: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was closed. */\n    closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the actor who created the milestone. */\n    creator?: Maybe<Actor>;\n    /** Identifies the description of the milestone. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the due date of the milestone. */\n    dueOn?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** A list of issues associated with the milestone. */\n    issues: IssueConnection;\n    /** Identifies the number of the milestone. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** Identifies the percentage complete for the milestone */\n    progressPercentage: Scalars[\"Float\"][\"output\"];\n    /** A list of pull requests associated with the milestone. */\n    pullRequests: PullRequestConnection;\n    /** The repository associated with this milestone. */\n    repository: Repository;\n    /** The HTTP path for this milestone */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the state of the milestone. */\n    state: MilestoneState;\n    /** Identifies the title of the milestone. */\n    title: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this milestone */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestoneIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestonePullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Milestone. */\nexport type MilestoneConnection = {\n  __typename?: \"MilestoneConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MilestoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Milestone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type MilestoneEdge = {\n  __typename?: \"MilestoneEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Milestone>;\n};\n\n/** Types that can be inside a Milestone. */\nexport type MilestoneItem = Issue | PullRequest;\n\n/** Ordering options for milestone connections. */\nexport type MilestoneOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order milestones by. */\n  field: MilestoneOrderField;\n};\n\n/** Properties by which milestone connections can be ordered. */\nexport enum MilestoneOrderField {\n  /** Order milestones by when they were created. */\n  CreatedAt = \"CREATED_AT\",\n  /** Order milestones by when they are due. */\n  DueDate = \"DUE_DATE\",\n  /** Order milestones by their number. */\n  Number = \"NUMBER\",\n  /** Order milestones by when they were last updated. */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The possible states of a milestone. */\nexport enum MilestoneState {\n  /** A milestone that has been closed. */\n  Closed = \"CLOSED\",\n  /** A milestone that is still open. */\n  Open = \"OPEN\",\n}\n\n/** Represents a 'milestoned' event on a given issue or pull request. */\nexport type MilestonedEvent = Node & {\n  __typename?: \"MilestonedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the milestone title associated with the 'milestoned' event. */\n  milestoneTitle: Scalars[\"String\"][\"output\"];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** Entities that can be minimized. */\nexport type Minimizable = {\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars[\"Boolean\"][\"output\"];\n  /** Returns why the comment was minimized. */\n  minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Autogenerated input type of MinimizeComment */\nexport type MinimizeCommentInput = {\n  /** The classification of comment */\n  classifier: ReportedContentClassifiers;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MinimizeComment */\nexport type MinimizeCommentPayload = {\n  __typename?: \"MinimizeCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The comment that was minimized. */\n  minimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of MoveProjectCard */\nexport type MoveProjectCardInput = {\n  /** Place the new card after the card with this id. Pass null to place it at the top. */\n  afterCardId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The id of the card to move. */\n  cardId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the column to move it into. */\n  columnId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MoveProjectCard */\nexport type MoveProjectCardPayload = {\n  __typename?: \"MoveProjectCardPayload\";\n  /** The new edge of the moved card. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of MoveProjectColumn */\nexport type MoveProjectColumnInput = {\n  /** Place the new column after the column with this id. Pass null to place it at the front. */\n  afterColumnId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the column to move. */\n  columnId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of MoveProjectColumn */\nexport type MoveProjectColumnPayload = {\n  __typename?: \"MoveProjectColumnPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new edge of the moved column. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n};\n\n/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\nexport type MovedColumnsInProjectEvent = Node & {\n  __typename?: \"MovedColumnsInProjectEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Column name the issue or pull request was moved from. */\n  previousProjectColumnName: Scalars[\"String\"][\"output\"];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name the issue or pull request was moved to. */\n  projectColumnName: Scalars[\"String\"][\"output\"];\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type Mutation = {\n  __typename?: \"Mutation\";\n  /** Clear all of a customer's queued migrations */\n  abortQueuedMigrations?: Maybe<AbortQueuedMigrationsPayload>;\n  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */\n  acceptEnterpriseAdministratorInvitation?: Maybe<AcceptEnterpriseAdministratorInvitationPayload>;\n  /** Applies a suggested topic to the repository. */\n  acceptTopicSuggestion?: Maybe<AcceptTopicSuggestionPayload>;\n  /** Adds assignees to an assignable object. */\n  addAssigneesToAssignable?: Maybe<AddAssigneesToAssignablePayload>;\n  /** Adds a comment to an Issue or Pull Request. */\n  addComment?: Maybe<AddCommentPayload>;\n  /** Adds a comment to a Discussion, possibly as a reply to another comment. */\n  addDiscussionComment?: Maybe<AddDiscussionCommentPayload>;\n  /** Adds a support entitlement to an enterprise member. */\n  addEnterpriseSupportEntitlement?: Maybe<AddEnterpriseSupportEntitlementPayload>;\n  /** Adds labels to a labelable object. */\n  addLabelsToLabelable?: Maybe<AddLabelsToLabelablePayload>;\n  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */\n  addProjectCard?: Maybe<AddProjectCardPayload>;\n  /** Adds a column to a Project. */\n  addProjectColumn?: Maybe<AddProjectColumnPayload>;\n  /** Creates a new draft issue and add it to a Project. */\n  addProjectDraftIssue?: Maybe<AddProjectDraftIssuePayload>;\n  /** Adds an existing item (Issue or PullRequest) to a Project. */\n  addProjectNextItem?: Maybe<AddProjectNextItemPayload>;\n  /** Adds a review to a Pull Request. */\n  addPullRequestReview?: Maybe<AddPullRequestReviewPayload>;\n  /** Adds a comment to a review. */\n  addPullRequestReviewComment?: Maybe<AddPullRequestReviewCommentPayload>;\n  /** Adds a new thread to a pending Pull Request Review. */\n  addPullRequestReviewThread?: Maybe<AddPullRequestReviewThreadPayload>;\n  /** Adds a reaction to a subject. */\n  addReaction?: Maybe<AddReactionPayload>;\n  /** Adds a star to a Starrable. */\n  addStar?: Maybe<AddStarPayload>;\n  /** Add an upvote to a discussion or discussion comment. */\n  addUpvote?: Maybe<AddUpvotePayload>;\n  /** Adds a verifiable domain to an owning account. */\n  addVerifiableDomain?: Maybe<AddVerifiableDomainPayload>;\n  /** Approve all pending deployments under one or more environments */\n  approveDeployments?: Maybe<ApproveDeploymentsPayload>;\n  /** Approve a verifiable domain for notification delivery. */\n  approveVerifiableDomain?: Maybe<ApproveVerifiableDomainPayload>;\n  /** Marks a repository as archived. */\n  archiveRepository?: Maybe<ArchiveRepositoryPayload>;\n  /** Cancels a pending invitation for an administrator to join an enterprise. */\n  cancelEnterpriseAdminInvitation?: Maybe<CancelEnterpriseAdminInvitationPayload>;\n  /** Cancel an active sponsorship. */\n  cancelSponsorship?: Maybe<CancelSponsorshipPayload>;\n  /** Update your status on GitHub. */\n  changeUserStatus?: Maybe<ChangeUserStatusPayload>;\n  /** Clears all labels from a labelable object. */\n  clearLabelsFromLabelable?: Maybe<ClearLabelsFromLabelablePayload>;\n  /** Creates a new project by cloning configuration from an existing project. */\n  cloneProject?: Maybe<CloneProjectPayload>;\n  /** Create a new repository with the same files and directory structure as a template repository. */\n  cloneTemplateRepository?: Maybe<CloneTemplateRepositoryPayload>;\n  /** Close an issue. */\n  closeIssue?: Maybe<CloseIssuePayload>;\n  /** Close a pull request. */\n  closePullRequest?: Maybe<ClosePullRequestPayload>;\n  /** Convert a project note card to one associated with a newly created issue. */\n  convertProjectCardNoteToIssue?: Maybe<ConvertProjectCardNoteToIssuePayload>;\n  /** Converts a pull request to draft */\n  convertPullRequestToDraft?: Maybe<ConvertPullRequestToDraftPayload>;\n  /** Create a new branch protection rule */\n  createBranchProtectionRule?: Maybe<CreateBranchProtectionRulePayload>;\n  /** Create a check run. */\n  createCheckRun?: Maybe<CreateCheckRunPayload>;\n  /** Create a check suite */\n  createCheckSuite?: Maybe<CreateCheckSuitePayload>;\n  /**\n   * Appends a commit to the given branch as the authenticated user.\n   *\n   * This mutation creates a commit whose parent is the HEAD of the provided\n   * branch and also updates that branch to point to the new commit.\n   * It can be thought of as similar to `git commit`.\n   *\n   * ### Locating a Branch\n   *\n   * Commits are appended to a `branch` of type `Ref`.\n   * This must refer to a git branch (i.e.  the fully qualified path must\n   * begin with `refs/heads/`, although including this prefix is optional.\n   *\n   * Callers may specify the `branch` to commit to either by its global node\n   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For\n   * more details see the documentation for `CommittableBranch`.\n   *\n   * ### Describing Changes\n   *\n   * `fileChanges` are specified as a `FilesChanges` object describing\n   * `FileAdditions` and `FileDeletions`.\n   *\n   * Please see the documentation for `FileChanges` for more information on\n   * how to use this argument to describe any set of file changes.\n   *\n   * ### Authorship\n   *\n   * Similar to the web commit interface, this mutation does not support\n   * specifying the author or committer of the commit and will not add\n   * support for this in the future.\n   *\n   * A commit created by a successful execution of this mutation will be\n   * authored by the owner of the credential which authenticates the API\n   * request.  The committer will be identical to that of commits authored\n   * using the web interface.\n   *\n   * If you need full control over author and committer information, please\n   * use the Git Database REST API instead.\n   *\n   * ### Commit Signing\n   *\n   * Commits made using this mutation are automatically signed by GitHub if\n   * supported and will be marked as verified in the user interface.\n   */\n  createCommitOnBranch?: Maybe<CreateCommitOnBranchPayload>;\n  /** Creates a new deployment event. */\n  createDeployment?: Maybe<CreateDeploymentPayload>;\n  /** Create a deployment status. */\n  createDeploymentStatus?: Maybe<CreateDeploymentStatusPayload>;\n  /** Create a discussion. */\n  createDiscussion?: Maybe<CreateDiscussionPayload>;\n  /** Creates an organization as part of an enterprise account. */\n  createEnterpriseOrganization?: Maybe<CreateEnterpriseOrganizationPayload>;\n  /** Creates an environment or simply returns it if already exists. */\n  createEnvironment?: Maybe<CreateEnvironmentPayload>;\n  /** Creates a new IP allow list entry. */\n  createIpAllowListEntry?: Maybe<CreateIpAllowListEntryPayload>;\n  /** Creates a new issue. */\n  createIssue?: Maybe<CreateIssuePayload>;\n  /** Creates a new label. */\n  createLabel?: Maybe<CreateLabelPayload>;\n  /** Creates an Octoshift migration source. */\n  createMigrationSource?: Maybe<CreateMigrationSourcePayload>;\n  /** Creates a new project. */\n  createProject?: Maybe<CreateProjectPayload>;\n  /** Create a new pull request */\n  createPullRequest?: Maybe<CreatePullRequestPayload>;\n  /** Create a new Git Ref. */\n  createRef?: Maybe<CreateRefPayload>;\n  /** Create a new repository. */\n  createRepository?: Maybe<CreateRepositoryPayload>;\n  /** Create a new payment tier for your GitHub Sponsors profile. */\n  createSponsorsTier?: Maybe<CreateSponsorsTierPayload>;\n  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */\n  createSponsorship?: Maybe<CreateSponsorshipPayload>;\n  /** Creates a new team discussion. */\n  createTeamDiscussion?: Maybe<CreateTeamDiscussionPayload>;\n  /** Creates a new team discussion comment. */\n  createTeamDiscussionComment?: Maybe<CreateTeamDiscussionCommentPayload>;\n  /** Rejects a suggested topic for the repository. */\n  declineTopicSuggestion?: Maybe<DeclineTopicSuggestionPayload>;\n  /** Delete a branch protection rule */\n  deleteBranchProtectionRule?: Maybe<DeleteBranchProtectionRulePayload>;\n  /** Deletes a deployment. */\n  deleteDeployment?: Maybe<DeleteDeploymentPayload>;\n  /** Delete a discussion and all of its replies. */\n  deleteDiscussion?: Maybe<DeleteDiscussionPayload>;\n  /** Delete a discussion comment. If it has replies, wipe it instead. */\n  deleteDiscussionComment?: Maybe<DeleteDiscussionCommentPayload>;\n  /** Deletes an environment */\n  deleteEnvironment?: Maybe<DeleteEnvironmentPayload>;\n  /** Deletes an IP allow list entry. */\n  deleteIpAllowListEntry?: Maybe<DeleteIpAllowListEntryPayload>;\n  /** Deletes an Issue object. */\n  deleteIssue?: Maybe<DeleteIssuePayload>;\n  /** Deletes an IssueComment object. */\n  deleteIssueComment?: Maybe<DeleteIssueCommentPayload>;\n  /** Deletes a label. */\n  deleteLabel?: Maybe<DeleteLabelPayload>;\n  /** Delete a package version. */\n  deletePackageVersion?: Maybe<DeletePackageVersionPayload>;\n  /** Deletes a project. */\n  deleteProject?: Maybe<DeleteProjectPayload>;\n  /** Deletes a project card. */\n  deleteProjectCard?: Maybe<DeleteProjectCardPayload>;\n  /** Deletes a project column. */\n  deleteProjectColumn?: Maybe<DeleteProjectColumnPayload>;\n  /** Deletes an item from a Project. */\n  deleteProjectNextItem?: Maybe<DeleteProjectNextItemPayload>;\n  /** Deletes a pull request review. */\n  deletePullRequestReview?: Maybe<DeletePullRequestReviewPayload>;\n  /** Deletes a pull request review comment. */\n  deletePullRequestReviewComment?: Maybe<DeletePullRequestReviewCommentPayload>;\n  /** Delete a Git Ref. */\n  deleteRef?: Maybe<DeleteRefPayload>;\n  /** Deletes a team discussion. */\n  deleteTeamDiscussion?: Maybe<DeleteTeamDiscussionPayload>;\n  /** Deletes a team discussion comment. */\n  deleteTeamDiscussionComment?: Maybe<DeleteTeamDiscussionCommentPayload>;\n  /** Deletes a verifiable domain. */\n  deleteVerifiableDomain?: Maybe<DeleteVerifiableDomainPayload>;\n  /** Disable auto merge on the given pull request */\n  disablePullRequestAutoMerge?: Maybe<DisablePullRequestAutoMergePayload>;\n  /** Dismisses an approved or rejected pull request review. */\n  dismissPullRequestReview?: Maybe<DismissPullRequestReviewPayload>;\n  /** Dismisses the Dependabot alert. */\n  dismissRepositoryVulnerabilityAlert?: Maybe<DismissRepositoryVulnerabilityAlertPayload>;\n  /** Enable the default auto-merge on a pull request. */\n  enablePullRequestAutoMerge?: Maybe<EnablePullRequestAutoMergePayload>;\n  /** Follow an organization. */\n  followOrganization?: Maybe<FollowOrganizationPayload>;\n  /** Follow a user. */\n  followUser?: Maybe<FollowUserPayload>;\n  /** Grant the migrator role to a user for all organizations under an enterprise account. */\n  grantEnterpriseOrganizationsMigratorRole?: Maybe<GrantEnterpriseOrganizationsMigratorRolePayload>;\n  /** Grant the migrator role to a user or a team. */\n  grantMigratorRole?: Maybe<GrantMigratorRolePayload>;\n  /** Creates a new project by importing columns and a list of issues/PRs. */\n  importProject?: Maybe<ImportProjectPayload>;\n  /** Invite someone to become an administrator of the enterprise. */\n  inviteEnterpriseAdmin?: Maybe<InviteEnterpriseAdminPayload>;\n  /** Creates a repository link for a project. */\n  linkRepositoryToProject?: Maybe<LinkRepositoryToProjectPayload>;\n  /** Lock a lockable object */\n  lockLockable?: Maybe<LockLockablePayload>;\n  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */\n  markDiscussionCommentAsAnswer?: Maybe<MarkDiscussionCommentAsAnswerPayload>;\n  /** Mark a pull request file as viewed */\n  markFileAsViewed?: Maybe<MarkFileAsViewedPayload>;\n  /** Marks a pull request ready for review. */\n  markPullRequestReadyForReview?: Maybe<MarkPullRequestReadyForReviewPayload>;\n  /** Merge a head into a branch. */\n  mergeBranch?: Maybe<MergeBranchPayload>;\n  /** Merge a pull request. */\n  mergePullRequest?: Maybe<MergePullRequestPayload>;\n  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  minimizeComment?: Maybe<MinimizeCommentPayload>;\n  /** Moves a project card to another place. */\n  moveProjectCard?: Maybe<MoveProjectCardPayload>;\n  /** Moves a project column to another place. */\n  moveProjectColumn?: Maybe<MoveProjectColumnPayload>;\n  /** Pin an issue to a repository */\n  pinIssue?: Maybe<PinIssuePayload>;\n  /** Regenerates the identity provider recovery codes for an enterprise */\n  regenerateEnterpriseIdentityProviderRecoveryCodes?: Maybe<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;\n  /** Regenerates a verifiable domain's verification token. */\n  regenerateVerifiableDomainToken?: Maybe<RegenerateVerifiableDomainTokenPayload>;\n  /** Reject all pending deployments under one or more environments */\n  rejectDeployments?: Maybe<RejectDeploymentsPayload>;\n  /** Removes assignees from an assignable object. */\n  removeAssigneesFromAssignable?: Maybe<RemoveAssigneesFromAssignablePayload>;\n  /** Removes an administrator from the enterprise. */\n  removeEnterpriseAdmin?: Maybe<RemoveEnterpriseAdminPayload>;\n  /** Removes the identity provider from an enterprise */\n  removeEnterpriseIdentityProvider?: Maybe<RemoveEnterpriseIdentityProviderPayload>;\n  /** Removes an organization from the enterprise */\n  removeEnterpriseOrganization?: Maybe<RemoveEnterpriseOrganizationPayload>;\n  /** Removes a support entitlement from an enterprise member. */\n  removeEnterpriseSupportEntitlement?: Maybe<RemoveEnterpriseSupportEntitlementPayload>;\n  /** Removes labels from a Labelable object. */\n  removeLabelsFromLabelable?: Maybe<RemoveLabelsFromLabelablePayload>;\n  /** Removes outside collaborator from all repositories in an organization. */\n  removeOutsideCollaborator?: Maybe<RemoveOutsideCollaboratorPayload>;\n  /** Removes a reaction from a subject. */\n  removeReaction?: Maybe<RemoveReactionPayload>;\n  /** Removes a star from a Starrable. */\n  removeStar?: Maybe<RemoveStarPayload>;\n  /** Remove an upvote to a discussion or discussion comment. */\n  removeUpvote?: Maybe<RemoveUpvotePayload>;\n  /** Reopen a issue. */\n  reopenIssue?: Maybe<ReopenIssuePayload>;\n  /** Reopen a pull request. */\n  reopenPullRequest?: Maybe<ReopenPullRequestPayload>;\n  /** Set review requests on a pull request. */\n  requestReviews?: Maybe<RequestReviewsPayload>;\n  /** Rerequests an existing check suite. */\n  rerequestCheckSuite?: Maybe<RerequestCheckSuitePayload>;\n  /** Marks a review thread as resolved. */\n  resolveReviewThread?: Maybe<ResolveReviewThreadPayload>;\n  /** Revoke the migrator role to a user for all organizations under an enterprise account. */\n  revokeEnterpriseOrganizationsMigratorRole?: Maybe<RevokeEnterpriseOrganizationsMigratorRolePayload>;\n  /** Revoke the migrator role from a user or a team. */\n  revokeMigratorRole?: Maybe<RevokeMigratorRolePayload>;\n  /** Creates or updates the identity provider for an enterprise. */\n  setEnterpriseIdentityProvider?: Maybe<SetEnterpriseIdentityProviderPayload>;\n  /** Set an organization level interaction limit for an organization's public repositories. */\n  setOrganizationInteractionLimit?: Maybe<SetOrganizationInteractionLimitPayload>;\n  /** Sets an interaction limit setting for a repository. */\n  setRepositoryInteractionLimit?: Maybe<SetRepositoryInteractionLimitPayload>;\n  /** Set a user level interaction limit for an user's public repositories. */\n  setUserInteractionLimit?: Maybe<SetUserInteractionLimitPayload>;\n  /** Start a repository migration. */\n  startRepositoryMigration?: Maybe<StartRepositoryMigrationPayload>;\n  /** Submits a pending pull request review. */\n  submitPullRequestReview?: Maybe<SubmitPullRequestReviewPayload>;\n  /** Transfer an issue to a different repository */\n  transferIssue?: Maybe<TransferIssuePayload>;\n  /** Unarchives a repository. */\n  unarchiveRepository?: Maybe<UnarchiveRepositoryPayload>;\n  /** Unfollow an organization. */\n  unfollowOrganization?: Maybe<UnfollowOrganizationPayload>;\n  /** Unfollow a user. */\n  unfollowUser?: Maybe<UnfollowUserPayload>;\n  /** Deletes a repository link from a project. */\n  unlinkRepositoryFromProject?: Maybe<UnlinkRepositoryFromProjectPayload>;\n  /** Unlock a lockable object */\n  unlockLockable?: Maybe<UnlockLockablePayload>;\n  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */\n  unmarkDiscussionCommentAsAnswer?: Maybe<UnmarkDiscussionCommentAsAnswerPayload>;\n  /** Unmark a pull request file as viewed */\n  unmarkFileAsViewed?: Maybe<UnmarkFileAsViewedPayload>;\n  /** Unmark an issue as a duplicate of another issue. */\n  unmarkIssueAsDuplicate?: Maybe<UnmarkIssueAsDuplicatePayload>;\n  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  unminimizeComment?: Maybe<UnminimizeCommentPayload>;\n  /** Unpin a pinned issue from a repository */\n  unpinIssue?: Maybe<UnpinIssuePayload>;\n  /** Marks a review thread as unresolved. */\n  unresolveReviewThread?: Maybe<UnresolveReviewThreadPayload>;\n  /** Create a new branch protection rule */\n  updateBranchProtectionRule?: Maybe<UpdateBranchProtectionRulePayload>;\n  /** Update a check run */\n  updateCheckRun?: Maybe<UpdateCheckRunPayload>;\n  /** Modifies the settings of an existing check suite */\n  updateCheckSuitePreferences?: Maybe<UpdateCheckSuitePreferencesPayload>;\n  /** Update a discussion */\n  updateDiscussion?: Maybe<UpdateDiscussionPayload>;\n  /** Update the contents of a comment on a Discussion */\n  updateDiscussionComment?: Maybe<UpdateDiscussionCommentPayload>;\n  /** Updates the role of an enterprise administrator. */\n  updateEnterpriseAdministratorRole?: Maybe<UpdateEnterpriseAdministratorRolePayload>;\n  /** Sets whether private repository forks are enabled for an enterprise. */\n  updateEnterpriseAllowPrivateRepositoryForkingSetting?: Maybe<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;\n  /** Sets the base repository permission for organizations in an enterprise. */\n  updateEnterpriseDefaultRepositoryPermissionSetting?: Maybe<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;\n  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */\n  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: Maybe<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;\n  /** Sets the members can create repositories setting for an enterprise. */\n  updateEnterpriseMembersCanCreateRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;\n  /** Sets the members can delete issues setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteIssuesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;\n  /** Sets the members can delete repositories setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;\n  /** Sets whether members can invite collaborators are enabled for an enterprise. */\n  updateEnterpriseMembersCanInviteCollaboratorsSetting?: Maybe<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;\n  /** Sets whether or not an organization admin can make purchases. */\n  updateEnterpriseMembersCanMakePurchasesSetting?: Maybe<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;\n  /** Sets the members can update protected branches setting for an enterprise. */\n  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: Maybe<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;\n  /** Sets the members can view dependency insights for an enterprise. */\n  updateEnterpriseMembersCanViewDependencyInsightsSetting?: Maybe<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;\n  /** Sets whether organization projects are enabled for an enterprise. */\n  updateEnterpriseOrganizationProjectsSetting?: Maybe<UpdateEnterpriseOrganizationProjectsSettingPayload>;\n  /** Updates the role of an enterprise owner with an organization. */\n  updateEnterpriseOwnerOrganizationRole?: Maybe<UpdateEnterpriseOwnerOrganizationRolePayload>;\n  /** Updates an enterprise's profile. */\n  updateEnterpriseProfile?: Maybe<UpdateEnterpriseProfilePayload>;\n  /** Sets whether repository projects are enabled for a enterprise. */\n  updateEnterpriseRepositoryProjectsSetting?: Maybe<UpdateEnterpriseRepositoryProjectsSettingPayload>;\n  /** Sets whether team discussions are enabled for an enterprise. */\n  updateEnterpriseTeamDiscussionsSetting?: Maybe<UpdateEnterpriseTeamDiscussionsSettingPayload>;\n  /** Sets whether two factor authentication is required for all users in an enterprise. */\n  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: Maybe<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;\n  /** Updates an environment. */\n  updateEnvironment?: Maybe<UpdateEnvironmentPayload>;\n  /** Sets whether an IP allow list is enabled on an owner. */\n  updateIpAllowListEnabledSetting?: Maybe<UpdateIpAllowListEnabledSettingPayload>;\n  /** Updates an IP allow list entry. */\n  updateIpAllowListEntry?: Maybe<UpdateIpAllowListEntryPayload>;\n  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */\n  updateIpAllowListForInstalledAppsEnabledSetting?: Maybe<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;\n  /** Updates an Issue. */\n  updateIssue?: Maybe<UpdateIssuePayload>;\n  /** Updates an IssueComment object. */\n  updateIssueComment?: Maybe<UpdateIssueCommentPayload>;\n  /** Updates an existing label. */\n  updateLabel?: Maybe<UpdateLabelPayload>;\n  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */\n  updateNotificationRestrictionSetting?: Maybe<UpdateNotificationRestrictionSettingPayload>;\n  /** Sets whether private repository forks are enabled for an organization. */\n  updateOrganizationAllowPrivateRepositoryForkingSetting?: Maybe<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;\n  /** Updates an existing project. */\n  updateProject?: Maybe<UpdateProjectPayload>;\n  /** Updates an existing project card. */\n  updateProjectCard?: Maybe<UpdateProjectCardPayload>;\n  /** Updates an existing project column. */\n  updateProjectColumn?: Maybe<UpdateProjectColumnPayload>;\n  /** Updates a draft issue within a Project. */\n  updateProjectDraftIssue?: Maybe<UpdateProjectDraftIssuePayload>;\n  /** Updates an existing project (beta). */\n  updateProjectNext?: Maybe<UpdateProjectNextPayload>;\n  /** Updates a field of an item from a Project. */\n  updateProjectNextItemField?: Maybe<UpdateProjectNextItemFieldPayload>;\n  /** Update a pull request */\n  updatePullRequest?: Maybe<UpdatePullRequestPayload>;\n  /** Merge HEAD from upstream branch into pull request branch */\n  updatePullRequestBranch?: Maybe<UpdatePullRequestBranchPayload>;\n  /** Updates the body of a pull request review. */\n  updatePullRequestReview?: Maybe<UpdatePullRequestReviewPayload>;\n  /** Updates a pull request review comment. */\n  updatePullRequestReviewComment?: Maybe<UpdatePullRequestReviewCommentPayload>;\n  /** Update a Git Ref. */\n  updateRef?: Maybe<UpdateRefPayload>;\n  /**\n   * Creates, updates and/or deletes multiple refs in a repository.\n   *\n   * This mutation takes a list of `RefUpdate`s and performs these updates\n   * on the repository. All updates are performed atomically, meaning that\n   * if one of them is rejected, no other ref will be modified.\n   *\n   * `RefUpdate.beforeOid` specifies that the given reference needs to point\n   * to the given value before performing any updates. A value of\n   * `0000000000000000000000000000000000000000` can be used to verify that\n   * the references should not exist.\n   *\n   * `RefUpdate.afterOid` specifies the value that the given reference\n   * will point to after performing all updates. A value of\n   * `0000000000000000000000000000000000000000` can be used to delete a\n   * reference.\n   *\n   * If `RefUpdate.force` is set to `true`, a non-fast-forward updates\n   * for the given reference will be allowed.\n   */\n  updateRefs?: Maybe<UpdateRefsPayload>;\n  /** Update information about a repository. */\n  updateRepository?: Maybe<UpdateRepositoryPayload>;\n  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */\n  updateSponsorshipPreferences?: Maybe<UpdateSponsorshipPreferencesPayload>;\n  /** Updates the state for subscribable subjects. */\n  updateSubscription?: Maybe<UpdateSubscriptionPayload>;\n  /** Updates a team discussion. */\n  updateTeamDiscussion?: Maybe<UpdateTeamDiscussionPayload>;\n  /** Updates a discussion comment. */\n  updateTeamDiscussionComment?: Maybe<UpdateTeamDiscussionCommentPayload>;\n  /** Updates team review assignment. */\n  updateTeamReviewAssignment?: Maybe<UpdateTeamReviewAssignmentPayload>;\n  /** Update team repository. */\n  updateTeamsRepository?: Maybe<UpdateTeamsRepositoryPayload>;\n  /** Replaces the repository's topics with the given topics. */\n  updateTopics?: Maybe<UpdateTopicsPayload>;\n  /** Verify that a verifiable domain has the expected DNS record. */\n  verifyVerifiableDomain?: Maybe<VerifyVerifiableDomainPayload>;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAbortQueuedMigrationsArgs = {\n  input: AbortQueuedMigrationsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptEnterpriseAdministratorInvitationArgs = {\n  input: AcceptEnterpriseAdministratorInvitationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptTopicSuggestionArgs = {\n  input: AcceptTopicSuggestionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddAssigneesToAssignableArgs = {\n  input: AddAssigneesToAssignableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddCommentArgs = {\n  input: AddCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddDiscussionCommentArgs = {\n  input: AddDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddEnterpriseSupportEntitlementArgs = {\n  input: AddEnterpriseSupportEntitlementInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddLabelsToLabelableArgs = {\n  input: AddLabelsToLabelableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectCardArgs = {\n  input: AddProjectCardInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectColumnArgs = {\n  input: AddProjectColumnInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectDraftIssueArgs = {\n  input: AddProjectDraftIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectNextItemArgs = {\n  input: AddProjectNextItemInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewArgs = {\n  input: AddPullRequestReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewCommentArgs = {\n  input: AddPullRequestReviewCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewThreadArgs = {\n  input: AddPullRequestReviewThreadInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddReactionArgs = {\n  input: AddReactionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddStarArgs = {\n  input: AddStarInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddUpvoteArgs = {\n  input: AddUpvoteInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddVerifiableDomainArgs = {\n  input: AddVerifiableDomainInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveDeploymentsArgs = {\n  input: ApproveDeploymentsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveVerifiableDomainArgs = {\n  input: ApproveVerifiableDomainInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationArchiveRepositoryArgs = {\n  input: ArchiveRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelEnterpriseAdminInvitationArgs = {\n  input: CancelEnterpriseAdminInvitationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelSponsorshipArgs = {\n  input: CancelSponsorshipInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClearLabelsFromLabelableArgs = {\n  input: ClearLabelsFromLabelableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneProjectArgs = {\n  input: CloneProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneTemplateRepositoryArgs = {\n  input: CloneTemplateRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloseIssueArgs = {\n  input: CloseIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClosePullRequestArgs = {\n  input: ClosePullRequestInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertProjectCardNoteToIssueArgs = {\n  input: ConvertProjectCardNoteToIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertPullRequestToDraftArgs = {\n  input: ConvertPullRequestToDraftInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateBranchProtectionRuleArgs = {\n  input: CreateBranchProtectionRuleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckRunArgs = {\n  input: CreateCheckRunInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckSuiteArgs = {\n  input: CreateCheckSuiteInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCommitOnBranchArgs = {\n  input: CreateCommitOnBranchInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDeploymentArgs = {\n  input: CreateDeploymentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDeploymentStatusArgs = {\n  input: CreateDeploymentStatusInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDiscussionArgs = {\n  input: CreateDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnterpriseOrganizationArgs = {\n  input: CreateEnterpriseOrganizationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnvironmentArgs = {\n  input: CreateEnvironmentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIpAllowListEntryArgs = {\n  input: CreateIpAllowListEntryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIssueArgs = {\n  input: CreateIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateLabelArgs = {\n  input: CreateLabelInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateMigrationSourceArgs = {\n  input: CreateMigrationSourceInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectArgs = {\n  input: CreateProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreatePullRequestArgs = {\n  input: CreatePullRequestInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRefArgs = {\n  input: CreateRefInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRepositoryArgs = {\n  input: CreateRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorsTierArgs = {\n  input: CreateSponsorsTierInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorshipArgs = {\n  input: CreateSponsorshipInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionArgs = {\n  input: CreateTeamDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionCommentArgs = {\n  input: CreateTeamDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeclineTopicSuggestionArgs = {\n  input: DeclineTopicSuggestionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteBranchProtectionRuleArgs = {\n  input: DeleteBranchProtectionRuleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDeploymentArgs = {\n  input: DeleteDeploymentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionArgs = {\n  input: DeleteDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionCommentArgs = {\n  input: DeleteDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteEnvironmentArgs = {\n  input: DeleteEnvironmentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIpAllowListEntryArgs = {\n  input: DeleteIpAllowListEntryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueArgs = {\n  input: DeleteIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueCommentArgs = {\n  input: DeleteIssueCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteLabelArgs = {\n  input: DeleteLabelInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePackageVersionArgs = {\n  input: DeletePackageVersionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectArgs = {\n  input: DeleteProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectCardArgs = {\n  input: DeleteProjectCardInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectColumnArgs = {\n  input: DeleteProjectColumnInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectNextItemArgs = {\n  input: DeleteProjectNextItemInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewArgs = {\n  input: DeletePullRequestReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewCommentArgs = {\n  input: DeletePullRequestReviewCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteRefArgs = {\n  input: DeleteRefInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionArgs = {\n  input: DeleteTeamDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionCommentArgs = {\n  input: DeleteTeamDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteVerifiableDomainArgs = {\n  input: DeleteVerifiableDomainInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDisablePullRequestAutoMergeArgs = {\n  input: DisablePullRequestAutoMergeInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissPullRequestReviewArgs = {\n  input: DismissPullRequestReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissRepositoryVulnerabilityAlertArgs = {\n  input: DismissRepositoryVulnerabilityAlertInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationEnablePullRequestAutoMergeArgs = {\n  input: EnablePullRequestAutoMergeInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationFollowOrganizationArgs = {\n  input: FollowOrganizationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationFollowUserArgs = {\n  input: FollowUserInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantEnterpriseOrganizationsMigratorRoleArgs = {\n  input: GrantEnterpriseOrganizationsMigratorRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantMigratorRoleArgs = {\n  input: GrantMigratorRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationImportProjectArgs = {\n  input: ImportProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationInviteEnterpriseAdminArgs = {\n  input: InviteEnterpriseAdminInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLinkRepositoryToProjectArgs = {\n  input: LinkRepositoryToProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLockLockableArgs = {\n  input: LockLockableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkDiscussionCommentAsAnswerArgs = {\n  input: MarkDiscussionCommentAsAnswerInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkFileAsViewedArgs = {\n  input: MarkFileAsViewedInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkPullRequestReadyForReviewArgs = {\n  input: MarkPullRequestReadyForReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergeBranchArgs = {\n  input: MergeBranchInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergePullRequestArgs = {\n  input: MergePullRequestInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMinimizeCommentArgs = {\n  input: MinimizeCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectCardArgs = {\n  input: MoveProjectCardInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectColumnArgs = {\n  input: MoveProjectColumnInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationPinIssueArgs = {\n  input: PinIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {\n  input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateVerifiableDomainTokenArgs = {\n  input: RegenerateVerifiableDomainTokenInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRejectDeploymentsArgs = {\n  input: RejectDeploymentsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveAssigneesFromAssignableArgs = {\n  input: RemoveAssigneesFromAssignableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseAdminArgs = {\n  input: RemoveEnterpriseAdminInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseIdentityProviderArgs = {\n  input: RemoveEnterpriseIdentityProviderInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseOrganizationArgs = {\n  input: RemoveEnterpriseOrganizationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseSupportEntitlementArgs = {\n  input: RemoveEnterpriseSupportEntitlementInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveLabelsFromLabelableArgs = {\n  input: RemoveLabelsFromLabelableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveOutsideCollaboratorArgs = {\n  input: RemoveOutsideCollaboratorInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveReactionArgs = {\n  input: RemoveReactionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveStarArgs = {\n  input: RemoveStarInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveUpvoteArgs = {\n  input: RemoveUpvoteInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenIssueArgs = {\n  input: ReopenIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenPullRequestArgs = {\n  input: ReopenPullRequestInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRequestReviewsArgs = {\n  input: RequestReviewsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRerequestCheckSuiteArgs = {\n  input: RerequestCheckSuiteInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationResolveReviewThreadArgs = {\n  input: ResolveReviewThreadInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {\n  input: RevokeEnterpriseOrganizationsMigratorRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeMigratorRoleArgs = {\n  input: RevokeMigratorRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetEnterpriseIdentityProviderArgs = {\n  input: SetEnterpriseIdentityProviderInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetOrganizationInteractionLimitArgs = {\n  input: SetOrganizationInteractionLimitInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetRepositoryInteractionLimitArgs = {\n  input: SetRepositoryInteractionLimitInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetUserInteractionLimitArgs = {\n  input: SetUserInteractionLimitInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationStartRepositoryMigrationArgs = {\n  input: StartRepositoryMigrationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSubmitPullRequestReviewArgs = {\n  input: SubmitPullRequestReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationTransferIssueArgs = {\n  input: TransferIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnarchiveRepositoryArgs = {\n  input: UnarchiveRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnfollowOrganizationArgs = {\n  input: UnfollowOrganizationInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnfollowUserArgs = {\n  input: UnfollowUserInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlinkRepositoryFromProjectArgs = {\n  input: UnlinkRepositoryFromProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlockLockableArgs = {\n  input: UnlockLockableInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkDiscussionCommentAsAnswerArgs = {\n  input: UnmarkDiscussionCommentAsAnswerInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkFileAsViewedArgs = {\n  input: UnmarkFileAsViewedInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkIssueAsDuplicateArgs = {\n  input: UnmarkIssueAsDuplicateInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnminimizeCommentArgs = {\n  input: UnminimizeCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnpinIssueArgs = {\n  input: UnpinIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnresolveReviewThreadArgs = {\n  input: UnresolveReviewThreadInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateBranchProtectionRuleArgs = {\n  input: UpdateBranchProtectionRuleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckRunArgs = {\n  input: UpdateCheckRunInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckSuitePreferencesArgs = {\n  input: UpdateCheckSuitePreferencesInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionArgs = {\n  input: UpdateDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionCommentArgs = {\n  input: UpdateDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAdministratorRoleArgs = {\n  input: UpdateEnterpriseAdministratorRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {\n  input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs = {\n  input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {\n  input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {\n  input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs = {\n  input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs = {\n  input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOrganizationProjectsSettingArgs = {\n  input: UpdateEnterpriseOrganizationProjectsSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOwnerOrganizationRoleArgs = {\n  input: UpdateEnterpriseOwnerOrganizationRoleInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseProfileArgs = {\n  input: UpdateEnterpriseProfileInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseRepositoryProjectsSettingArgs = {\n  input: UpdateEnterpriseRepositoryProjectsSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTeamDiscussionsSettingArgs = {\n  input: UpdateEnterpriseTeamDiscussionsSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs = {\n  input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnvironmentArgs = {\n  input: UpdateEnvironmentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEnabledSettingArgs = {\n  input: UpdateIpAllowListEnabledSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEntryArgs = {\n  input: UpdateIpAllowListEntryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {\n  input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueArgs = {\n  input: UpdateIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueCommentArgs = {\n  input: UpdateIssueCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateLabelArgs = {\n  input: UpdateLabelInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateNotificationRestrictionSettingArgs = {\n  input: UpdateNotificationRestrictionSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectArgs = {\n  input: UpdateProjectInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectCardArgs = {\n  input: UpdateProjectCardInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectColumnArgs = {\n  input: UpdateProjectColumnInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectDraftIssueArgs = {\n  input: UpdateProjectDraftIssueInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectNextArgs = {\n  input: UpdateProjectNextInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectNextItemFieldArgs = {\n  input: UpdateProjectNextItemFieldInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestArgs = {\n  input: UpdatePullRequestInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestBranchArgs = {\n  input: UpdatePullRequestBranchInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewArgs = {\n  input: UpdatePullRequestReviewInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewCommentArgs = {\n  input: UpdatePullRequestReviewCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRefArgs = {\n  input: UpdateRefInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRefsArgs = {\n  input: UpdateRefsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRepositoryArgs = {\n  input: UpdateRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSponsorshipPreferencesArgs = {\n  input: UpdateSponsorshipPreferencesInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSubscriptionArgs = {\n  input: UpdateSubscriptionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionArgs = {\n  input: UpdateTeamDiscussionInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionCommentArgs = {\n  input: UpdateTeamDiscussionCommentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamReviewAssignmentArgs = {\n  input: UpdateTeamReviewAssignmentInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamsRepositoryArgs = {\n  input: UpdateTeamsRepositoryInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTopicsArgs = {\n  input: UpdateTopicsInput;\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationVerifyVerifiableDomainArgs = {\n  input: VerifyVerifiableDomainInput;\n};\n\n/** An object with an ID. */\nexport type Node = {\n  /** ID of the object. */\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** The possible values for the notification restriction setting. */\nexport enum NotificationRestrictionSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = \"DISABLED\",\n  /** The setting is enabled for the owner. */\n  Enabled = \"ENABLED\",\n}\n\n/** An OIDC identity provider configured to provision identities for an enterprise. */\nexport type OidcProvider = Node & {\n  __typename?: \"OIDCProvider\";\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The OIDC identity provider type */\n  providerType: OidcProviderType;\n  /** The id of the tenant this provider is attached to */\n  tenantId: Scalars[\"String\"][\"output\"];\n};\n\n/** An OIDC identity provider configured to provision identities for an enterprise. */\nexport type OidcProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  login?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  membersOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  userName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** The OIDC identity provider type */\nexport enum OidcProviderType {\n  /** Azure Active Directory */\n  Aad = \"AAD\",\n}\n\n/** Metadata for an audit entry with action oauth_application.* */\nexport type OauthApplicationAuditEntryData = {\n  /** The name of the OAuth Application. */\n  oauthApplicationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the OAuth Application */\n  oauthApplicationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the OAuth Application */\n  oauthApplicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Audit log entry for a oauth_application.create event. */\nexport type OauthApplicationCreateAuditEntry = AuditEntry &\n  Node &\n  OauthApplicationAuditEntryData &\n  OrganizationAuditEntryData & {\n    __typename?: \"OauthApplicationCreateAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The application URL of the OAuth Application. */\n    applicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The callback URL of the OAuth Application. */\n    callbackUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The name of the OAuth Application. */\n    oauthApplicationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the OAuth Application */\n    oauthApplicationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the OAuth Application */\n    oauthApplicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The rate limit of the OAuth Application. */\n    rateLimit?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The state of the OAuth Application. */\n    state?: Maybe<OauthApplicationCreateAuditEntryState>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The state of an OAuth Application when it was created. */\nexport enum OauthApplicationCreateAuditEntryState {\n  /** The OAuth Application was active and allowed to have OAuth Accesses. */\n  Active = \"ACTIVE\",\n  /** The OAuth Application was in the process of being deleted. */\n  PendingDeletion = \"PENDING_DELETION\",\n  /** The OAuth Application was suspended from generating OAuth Accesses due to abuse or security concerns. */\n  Suspended = \"SUSPENDED\",\n}\n\n/** The corresponding operation type for the action */\nexport enum OperationType {\n  /** An existing resource was accessed */\n  Access = \"ACCESS\",\n  /** A resource performed an authentication event */\n  Authentication = \"AUTHENTICATION\",\n  /** A new resource was created */\n  Create = \"CREATE\",\n  /** An existing resource was modified */\n  Modify = \"MODIFY\",\n  /** An existing resource was removed */\n  Remove = \"REMOVE\",\n  /** An existing resource was restored */\n  Restore = \"RESTORE\",\n  /** An existing resource was transferred between multiple resources */\n  Transfer = \"TRANSFER\",\n}\n\n/** Possible directions in which to order a list of items when provided an `orderBy` argument. */\nexport enum OrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = \"ASC\",\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = \"DESC\",\n}\n\n/** Audit log entry for a org.add_billing_manager */\nexport type OrgAddBillingManagerAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgAddBillingManagerAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The email address used to invite a billing manager for the organization. */\n    invitationEmail?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.add_member */\nexport type OrgAddMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgAddMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The permission level of the member added to the organization. */\n    permission?: Maybe<OrgAddMemberAuditEntryPermission>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The permissions available to members on an Organization. */\nexport enum OrgAddMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = \"ADMIN\",\n  /** Can read and clone repositories. */\n  Read = \"READ\",\n}\n\n/** Audit log entry for a org.block_user */\nexport type OrgBlockUserAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgBlockUserAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The blocked user. */\n    blockedUser?: Maybe<User>;\n    /** The username of the blocked user. */\n    blockedUserName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the blocked user. */\n    blockedUserResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the blocked user. */\n    blockedUserUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.config.disable_collaborators_only event. */\nexport type OrgConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgConfigDisableCollaboratorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.config.enable_collaborators_only event. */\nexport type OrgConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgConfigEnableCollaboratorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.create event. */\nexport type OrgCreateAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgCreateAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The billing plan for the Organization. */\n    billingPlan?: Maybe<OrgCreateAuditEntryBillingPlan>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The billing plans available for organizations. */\nexport enum OrgCreateAuditEntryBillingPlan {\n  /** Team Plan */\n  Business = \"BUSINESS\",\n  /** Enterprise Cloud Plan */\n  BusinessPlus = \"BUSINESS_PLUS\",\n  /** Free Plan */\n  Free = \"FREE\",\n  /** Tiered Per Seat Plan */\n  TieredPerSeat = \"TIERED_PER_SEAT\",\n  /** Legacy Unlimited Plan */\n  Unlimited = \"UNLIMITED\",\n}\n\n/** Audit log entry for a org.disable_oauth_app_restrictions event. */\nexport type OrgDisableOauthAppRestrictionsAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgDisableOauthAppRestrictionsAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.disable_saml event. */\nexport type OrgDisableSamlAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgDisableSamlAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The SAML provider's digest algorithm URL. */\n    digestMethodUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The SAML provider's issuer URL. */\n    issuerUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The SAML provider's signature algorithm URL. */\n    signatureMethodUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The SAML provider's single sign-on URL. */\n    singleSignOnUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.disable_two_factor_requirement event. */\nexport type OrgDisableTwoFactorRequirementAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgDisableTwoFactorRequirementAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.enable_oauth_app_restrictions event. */\nexport type OrgEnableOauthAppRestrictionsAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgEnableOauthAppRestrictionsAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.enable_saml event. */\nexport type OrgEnableSamlAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgEnableSamlAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The SAML provider's digest algorithm URL. */\n    digestMethodUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The SAML provider's issuer URL. */\n    issuerUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The SAML provider's signature algorithm URL. */\n    signatureMethodUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The SAML provider's single sign-on URL. */\n    singleSignOnUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.enable_two_factor_requirement event. */\nexport type OrgEnableTwoFactorRequirementAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgEnableTwoFactorRequirementAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Ordering options for an organization's enterprise owner connections. */\nexport type OrgEnterpriseOwnerOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise owners by. */\n  field: OrgEnterpriseOwnerOrderField;\n};\n\n/** Properties by which enterprise owners can be ordered. */\nexport enum OrgEnterpriseOwnerOrderField {\n  /** Order enterprise owners by login. */\n  Login = \"LOGIN\",\n}\n\n/** Audit log entry for a org.invite_member event. */\nexport type OrgInviteMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgInviteMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The email address of the organization invitation. */\n    email?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The organization invitation. */\n    organizationInvitation?: Maybe<OrganizationInvitation>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.invite_to_business event. */\nexport type OrgInviteToBusinessAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgInviteToBusinessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.oauth_app_access_approved event. */\nexport type OrgOauthAppAccessApprovedAuditEntry = AuditEntry &\n  Node &\n  OauthApplicationAuditEntryData &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgOauthAppAccessApprovedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The name of the OAuth Application. */\n    oauthApplicationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the OAuth Application */\n    oauthApplicationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the OAuth Application */\n    oauthApplicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.oauth_app_access_denied event. */\nexport type OrgOauthAppAccessDeniedAuditEntry = AuditEntry &\n  Node &\n  OauthApplicationAuditEntryData &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgOauthAppAccessDeniedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The name of the OAuth Application. */\n    oauthApplicationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the OAuth Application */\n    oauthApplicationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the OAuth Application */\n    oauthApplicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.oauth_app_access_requested event. */\nexport type OrgOauthAppAccessRequestedAuditEntry = AuditEntry &\n  Node &\n  OauthApplicationAuditEntryData &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgOauthAppAccessRequestedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The name of the OAuth Application. */\n    oauthApplicationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the OAuth Application */\n    oauthApplicationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the OAuth Application */\n    oauthApplicationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.remove_billing_manager event. */\nexport type OrgRemoveBillingManagerAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgRemoveBillingManagerAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The reason for the billing manager being removed. */\n    reason?: Maybe<OrgRemoveBillingManagerAuditEntryReason>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The reason a billing manager was removed from an Organization. */\nexport enum OrgRemoveBillingManagerAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = \"SAML_EXTERNAL_IDENTITY_MISSING\",\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\",\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n}\n\n/** Audit log entry for a org.remove_member event. */\nexport type OrgRemoveMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgRemoveMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The types of membership the member has with the organization. */\n    membershipTypes?: Maybe<Array<OrgRemoveMemberAuditEntryMembershipType>>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The reason for the member being removed. */\n    reason?: Maybe<OrgRemoveMemberAuditEntryReason>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveMemberAuditEntryMembershipType {\n  /**\n   * Organization administrators have full access and can change several settings,\n   * including the names of repositories that belong to the Organization and Owners\n   * team membership. In addition, organization admins can delete the organization\n   * and all of its repositories.\n   */\n  Admin = \"ADMIN\",\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = \"BILLING_MANAGER\",\n  /** A direct member is a user that is a member of the Organization. */\n  DirectMember = \"DIRECT_MEMBER\",\n  /**\n   * An outside collaborator is a person who isn't explicitly a member of the\n   * Organization, but who has Read, Write, or Admin permissions to one or more\n   * repositories in the organization.\n   */\n  OutsideCollaborator = \"OUTSIDE_COLLABORATOR\",\n  /**\n   * An unaffiliated collaborator is a person who is not a member of the\n   * Organization and does not have access to any repositories in the Organization.\n   */\n  Unaffiliated = \"UNAFFILIATED\",\n}\n\n/** The reason a member was removed from an Organization. */\nexport enum OrgRemoveMemberAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = \"SAML_EXTERNAL_IDENTITY_MISSING\",\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = \"SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY\",\n  /** User was removed from organization during account recovery */\n  TwoFactorAccountRecovery = \"TWO_FACTOR_ACCOUNT_RECOVERY\",\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n  /** User account has been deleted */\n  UserAccountDeleted = \"USER_ACCOUNT_DELETED\",\n}\n\n/** Audit log entry for a org.remove_outside_collaborator event. */\nexport type OrgRemoveOutsideCollaboratorAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgRemoveOutsideCollaboratorAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The types of membership the outside collaborator has with the organization. */\n    membershipTypes?: Maybe<Array<OrgRemoveOutsideCollaboratorAuditEntryMembershipType>>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The reason for the outside collaborator being removed from the Organization. */\n    reason?: Maybe<OrgRemoveOutsideCollaboratorAuditEntryReason>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = \"BILLING_MANAGER\",\n  /**\n   * An outside collaborator is a person who isn't explicitly a member of the\n   * Organization, but who has Read, Write, or Admin permissions to one or more\n   * repositories in the organization.\n   */\n  OutsideCollaborator = \"OUTSIDE_COLLABORATOR\",\n  /**\n   * An unaffiliated collaborator is a person who is not a member of the\n   * Organization and does not have access to any repositories in the organization.\n   */\n  Unaffiliated = \"UNAFFILIATED\",\n}\n\n/** The reason an outside collaborator was removed from an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = \"SAML_EXTERNAL_IDENTITY_MISSING\",\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = \"TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE\",\n}\n\n/** Audit log entry for a org.restore_member event. */\nexport type OrgRestoreMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgRestoreMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The number of custom email routings for the restored member. */\n    restoredCustomEmailRoutingsCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The number of issue assignments for the restored member. */\n    restoredIssueAssignmentsCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** Restored organization membership objects. */\n    restoredMemberships?: Maybe<Array<OrgRestoreMemberAuditEntryMembership>>;\n    /** The number of restored memberships. */\n    restoredMembershipsCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The number of repositories of the restored member. */\n    restoredRepositoriesCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The number of starred repositories for the restored member. */\n    restoredRepositoryStarsCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The number of watched repositories for the restored member. */\n    restoredRepositoryWatchesCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Types of memberships that can be restored for an Organization member. */\nexport type OrgRestoreMemberAuditEntryMembership =\n  | OrgRestoreMemberMembershipOrganizationAuditEntryData\n  | OrgRestoreMemberMembershipRepositoryAuditEntryData\n  | OrgRestoreMemberMembershipTeamAuditEntryData;\n\n/** Metadata for an organization membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipOrganizationAuditEntryData = OrganizationAuditEntryData & {\n  __typename?: \"OrgRestoreMemberMembershipOrganizationAuditEntryData\";\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Metadata for a repository membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipRepositoryAuditEntryData = RepositoryAuditEntryData & {\n  __typename?: \"OrgRestoreMemberMembershipRepositoryAuditEntryData\";\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Metadata for a team membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipTeamAuditEntryData = TeamAuditEntryData & {\n  __typename?: \"OrgRestoreMemberMembershipTeamAuditEntryData\";\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Audit log entry for a org.unblock_user */\nexport type OrgUnblockUserAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgUnblockUserAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user being unblocked by the organization. */\n    blockedUser?: Maybe<User>;\n    /** The username of the blocked user. */\n    blockedUserName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the blocked user. */\n    blockedUserResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the blocked user. */\n    blockedUserUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a org.update_default_repository_permission */\nexport type OrgUpdateDefaultRepositoryPermissionAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgUpdateDefaultRepositoryPermissionAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The new base repository permission level for the organization. */\n    permission?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n    /** The former base repository permission level for the organization. */\n    permissionWas?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The default permission a repository can have in an Organization. */\nexport enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = \"ADMIN\",\n  /** No default permission value. */\n  None = \"NONE\",\n  /** Can read and clone repositories. */\n  Read = \"READ\",\n  /** Can read, clone and push to repositories. */\n  Write = \"WRITE\",\n}\n\n/** Audit log entry for a org.update_member event. */\nexport type OrgUpdateMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgUpdateMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The new member permission level for the organization. */\n    permission?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n    /** The former member permission level for the organization. */\n    permissionWas?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The permissions available to members on an Organization. */\nexport enum OrgUpdateMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = \"ADMIN\",\n  /** Can read and clone repositories. */\n  Read = \"READ\",\n}\n\n/** Audit log entry for a org.update_member_repository_creation_permission event. */\nexport type OrgUpdateMemberRepositoryCreationPermissionAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgUpdateMemberRepositoryCreationPermissionAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** Can members create repositories in the organization. */\n    canCreateRepositories?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The permission for visibility level of repositories for this organization. */\n    visibility?: Maybe<OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;\n  };\n\n/** The permissions available for repository creation on an Organization. */\nexport enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {\n  /** All organization members are restricted from creating any repositories. */\n  All = \"ALL\",\n  /** All organization members are restricted from creating internal repositories. */\n  Internal = \"INTERNAL\",\n  /** All organization members are allowed to create any repositories. */\n  None = \"NONE\",\n  /** All organization members are restricted from creating private repositories. */\n  Private = \"PRIVATE\",\n  /** All organization members are restricted from creating private or internal repositories. */\n  PrivateInternal = \"PRIVATE_INTERNAL\",\n  /** All organization members are restricted from creating public repositories. */\n  Public = \"PUBLIC\",\n  /** All organization members are restricted from creating public or internal repositories. */\n  PublicInternal = \"PUBLIC_INTERNAL\",\n  /** All organization members are restricted from creating public or private repositories. */\n  PublicPrivate = \"PUBLIC_PRIVATE\",\n}\n\n/** Audit log entry for a org.update_member_repository_invitation_permission event. */\nexport type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"OrgUpdateMemberRepositoryInvitationPermissionAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** Can outside collaborators be invited to repositories in the organization. */\n    canInviteOutsideCollaboratorsToRepositories?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type Organization = Actor &\n  MemberStatusable &\n  Node &\n  PackageOwner &\n  ProfileOwner &\n  ProjectNextOwner &\n  ProjectOwner &\n  ProjectV2Owner &\n  RepositoryDiscussionAuthor &\n  RepositoryDiscussionCommentAuthor &\n  RepositoryOwner &\n  Sponsorable &\n  UniformResourceLocatable & {\n    __typename?: \"Organization\";\n    /** Determine if this repository owner has any items that can be pinned to their profile. */\n    anyPinnableItems: Scalars[\"Boolean\"][\"output\"];\n    /** Audit log entries of the organization */\n    auditLog: OrganizationAuditEntryConnection;\n    /** A URL pointing to the organization's public avatar. */\n    avatarUrl: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The organization's public profile description. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The organization's public profile description rendered to HTML. */\n    descriptionHTML?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A list of domains owned by the organization. */\n    domains?: Maybe<VerifiableDomainConnection>;\n    /** The organization's public email. */\n    email?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A list of owners of the organization's enterprise account. */\n    enterpriseOwners: OrganizationEnterpriseOwnerConnection;\n    /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n    estimatedNextSponsorsPayoutInCents: Scalars[\"Int\"][\"output\"];\n    /** True if this user/organization has a GitHub Sponsors listing. */\n    hasSponsorsListing: Scalars[\"Boolean\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The interaction ability settings for this organization. */\n    interactionAbility?: Maybe<RepositoryInteractionAbility>;\n    /** The setting value for whether the organization has an IP allow list enabled. */\n    ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n    /** The IP addresses that are allowed to access resources owned by the organization. */\n    ipAllowListEntries: IpAllowListEntryConnection;\n    /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */\n    ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n    /** Check if the given account is sponsoring this user/organization. */\n    isSponsoredBy: Scalars[\"Boolean\"][\"output\"];\n    /** True if the viewer is sponsored by this user/organization. */\n    isSponsoringViewer: Scalars[\"Boolean\"][\"output\"];\n    /** Whether the organization has verified its profile email and website. */\n    isVerified: Scalars[\"Boolean\"][\"output\"];\n    /**\n     * Showcases a selection of repositories and gists that the profile owner has\n     * either curated or that have been selected automatically based on popularity.\n     */\n    itemShowcase: ProfileItemShowcase;\n    /** The organization's public profile location. */\n    location?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The organization's login name. */\n    login: Scalars[\"String\"][\"output\"];\n    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n    memberStatuses: UserStatusConnection;\n    /** Members can fork private repositories in this organization */\n    membersCanForkPrivateRepositories: Scalars[\"Boolean\"][\"output\"];\n    /** A list of users who are members of this organization. */\n    membersWithRole: OrganizationMemberConnection;\n    /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n    monthlyEstimatedSponsorsIncomeInCents: Scalars[\"Int\"][\"output\"];\n    /** The organization's public profile name. */\n    name?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path creating a new team */\n    newTeamResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL creating a new team */\n    newTeamUrl: Scalars[\"URI\"][\"output\"];\n    /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */\n    notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n    /** The billing email for the organization. */\n    organizationBillingEmail?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A list of packages under the owner. */\n    packages: PackageConnection;\n    /** A list of users who have been invited to join this organization. */\n    pendingMembers: UserConnection;\n    /** A list of repositories and gists this profile owner can pin to their profile. */\n    pinnableItems: PinnableItemConnection;\n    /** A list of repositories and gists this profile owner has pinned to their profile */\n    pinnedItems: PinnableItemConnection;\n    /** Returns how many more items this profile owner can pin to their profile. */\n    pinnedItemsRemaining: Scalars[\"Int\"][\"output\"];\n    /** Find project by number. */\n    project?: Maybe<Project>;\n    /** Find a project by project (beta) number. */\n    projectNext?: Maybe<ProjectNext>;\n    /** A list of projects under the owner. */\n    projects: ProjectConnection;\n    /** A list of projects (beta) under the owner. */\n    projectsNext: ProjectNextConnection;\n    /** The HTTP path listing organization's projects */\n    projectsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL listing organization's projects */\n    projectsUrl: Scalars[\"URI\"][\"output\"];\n    /** A list of repositories that the user owns. */\n    repositories: RepositoryConnection;\n    /** Find Repository. */\n    repository?: Maybe<Repository>;\n    /** Discussion comments this user has authored. */\n    repositoryDiscussionComments: DiscussionCommentConnection;\n    /** Discussions this user has started. */\n    repositoryDiscussions: DiscussionConnection;\n    /** A list of all repository migrations for this organization. */\n    repositoryMigrations: RepositoryMigrationConnection;\n    /**\n     * When true the organization requires all members, billing managers, and outside\n     * collaborators to enable two-factor authentication.\n     */\n    requiresTwoFactorAuthentication?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The HTTP path for this organization. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The Organization's SAML identity providers */\n    samlIdentityProvider?: Maybe<OrganizationIdentityProvider>;\n    /** List of users and organizations this entity is sponsoring. */\n    sponsoring: SponsorConnection;\n    /** List of sponsors for this user or organization. */\n    sponsors: SponsorConnection;\n    /** Events involving this sponsorable, such as new sponsorships. */\n    sponsorsActivities: SponsorsActivityConnection;\n    /** The GitHub Sponsors listing for this user or organization. */\n    sponsorsListing?: Maybe<SponsorsListing>;\n    /**\n     * The sponsorship from the viewer to this user/organization; that is, the\n     * sponsorship where you're the sponsor. Only returns a sponsorship if it is active.\n     */\n    sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n    /**\n     * The sponsorship from this user/organization to the viewer; that is, the\n     * sponsorship you're receiving. Only returns a sponsorship if it is active.\n     */\n    sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n    /** List of sponsorship updates sent from this sponsorable to sponsors. */\n    sponsorshipNewsletters: SponsorshipNewsletterConnection;\n    /** This object's sponsorships as the maintainer. */\n    sponsorshipsAsMaintainer: SponsorshipConnection;\n    /** This object's sponsorships as the sponsor. */\n    sponsorshipsAsSponsor: SponsorshipConnection;\n    /** Find an organization's team by its slug. */\n    team?: Maybe<Team>;\n    /** A list of teams in this organization. */\n    teams: TeamConnection;\n    /** The HTTP path listing organization's teams */\n    teamsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL listing organization's teams */\n    teamsUrl: Scalars[\"URI\"][\"output\"];\n    /** The organization's Twitter username. */\n    twitterUsername?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this organization. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Organization is adminable by the viewer. */\n    viewerCanAdminister: Scalars[\"Boolean\"][\"output\"];\n    /** Can the viewer pin repositories and gists to the profile? */\n    viewerCanChangePinnedItems: Scalars[\"Boolean\"][\"output\"];\n    /** Can the current viewer create new projects on this owner. */\n    viewerCanCreateProjects: Scalars[\"Boolean\"][\"output\"];\n    /** Viewer can create repositories on this organization */\n    viewerCanCreateRepositories: Scalars[\"Boolean\"][\"output\"];\n    /** Viewer can create teams on this organization. */\n    viewerCanCreateTeams: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the viewer is able to sponsor this user/organization. */\n    viewerCanSponsor: Scalars[\"Boolean\"][\"output\"];\n    /** Viewer is an active member of this organization. */\n    viewerIsAMember: Scalars[\"Boolean\"][\"output\"];\n    /** True if the viewer is sponsoring this user/organization. */\n    viewerIsSponsoring: Scalars[\"Boolean\"][\"output\"];\n    /** The organization's public profile URL. */\n    websiteUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAuditLogArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<AuditLogOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationDomainsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isApproved?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isVerified?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationEnterpriseOwnersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<OrgEnterpriseOwnerOrder>;\n  organizationRole?: InputMaybe<RoleInOrganization>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIsSponsoredByArgs = {\n  accountLogin: Scalars[\"String\"][\"input\"];\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMemberStatusesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMembersWithRoleArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPackagesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  names?: InputMaybe<Array<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPendingMembersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnableItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnedItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isFork?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  onlyAnswers?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  answered?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryMigrationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryMigrationOrder>;\n  repositoryName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  state?: InputMaybe<MigrationState>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsoringArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includePrivate?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamArgs = {\n  slug: Scalars[\"String\"][\"input\"];\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  ldapMapped?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  orderBy?: InputMaybe<TeamOrder>;\n  privacy?: InputMaybe<TeamPrivacy>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<TeamRole>;\n  rootTeamsOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  userLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n};\n\n/** An audit entry in an organization audit log. */\nexport type OrganizationAuditEntry =\n  | MembersCanDeleteReposClearAuditEntry\n  | MembersCanDeleteReposDisableAuditEntry\n  | MembersCanDeleteReposEnableAuditEntry\n  | OauthApplicationCreateAuditEntry\n  | OrgAddBillingManagerAuditEntry\n  | OrgAddMemberAuditEntry\n  | OrgBlockUserAuditEntry\n  | OrgConfigDisableCollaboratorsOnlyAuditEntry\n  | OrgConfigEnableCollaboratorsOnlyAuditEntry\n  | OrgCreateAuditEntry\n  | OrgDisableOauthAppRestrictionsAuditEntry\n  | OrgDisableSamlAuditEntry\n  | OrgDisableTwoFactorRequirementAuditEntry\n  | OrgEnableOauthAppRestrictionsAuditEntry\n  | OrgEnableSamlAuditEntry\n  | OrgEnableTwoFactorRequirementAuditEntry\n  | OrgInviteMemberAuditEntry\n  | OrgInviteToBusinessAuditEntry\n  | OrgOauthAppAccessApprovedAuditEntry\n  | OrgOauthAppAccessDeniedAuditEntry\n  | OrgOauthAppAccessRequestedAuditEntry\n  | OrgRemoveBillingManagerAuditEntry\n  | OrgRemoveMemberAuditEntry\n  | OrgRemoveOutsideCollaboratorAuditEntry\n  | OrgRestoreMemberAuditEntry\n  | OrgUnblockUserAuditEntry\n  | OrgUpdateDefaultRepositoryPermissionAuditEntry\n  | OrgUpdateMemberAuditEntry\n  | OrgUpdateMemberRepositoryCreationPermissionAuditEntry\n  | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry\n  | PrivateRepositoryForkingDisableAuditEntry\n  | PrivateRepositoryForkingEnableAuditEntry\n  | RepoAccessAuditEntry\n  | RepoAddMemberAuditEntry\n  | RepoAddTopicAuditEntry\n  | RepoArchivedAuditEntry\n  | RepoChangeMergeSettingAuditEntry\n  | RepoConfigDisableAnonymousGitAccessAuditEntry\n  | RepoConfigDisableCollaboratorsOnlyAuditEntry\n  | RepoConfigDisableContributorsOnlyAuditEntry\n  | RepoConfigDisableSockpuppetDisallowedAuditEntry\n  | RepoConfigEnableAnonymousGitAccessAuditEntry\n  | RepoConfigEnableCollaboratorsOnlyAuditEntry\n  | RepoConfigEnableContributorsOnlyAuditEntry\n  | RepoConfigEnableSockpuppetDisallowedAuditEntry\n  | RepoConfigLockAnonymousGitAccessAuditEntry\n  | RepoConfigUnlockAnonymousGitAccessAuditEntry\n  | RepoCreateAuditEntry\n  | RepoDestroyAuditEntry\n  | RepoRemoveMemberAuditEntry\n  | RepoRemoveTopicAuditEntry\n  | RepositoryVisibilityChangeDisableAuditEntry\n  | RepositoryVisibilityChangeEnableAuditEntry\n  | TeamAddMemberAuditEntry\n  | TeamAddRepositoryAuditEntry\n  | TeamChangeParentTeamAuditEntry\n  | TeamRemoveMemberAuditEntry\n  | TeamRemoveRepositoryAuditEntry;\n\n/** The connection type for OrganizationAuditEntry. */\nexport type OrganizationAuditEntryConnection = {\n  __typename?: \"OrganizationAuditEntryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationAuditEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationAuditEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Metadata for an audit entry with action org.* */\nexport type OrganizationAuditEntryData = {\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** An edge in a connection. */\nexport type OrganizationAuditEntryEdge = {\n  __typename?: \"OrganizationAuditEntryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationAuditEntry>;\n};\n\n/** A list of organizations managed by an enterprise. */\nexport type OrganizationConnection = {\n  __typename?: \"OrganizationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type OrganizationEdge = {\n  __typename?: \"OrganizationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n};\n\n/** The connection type for User. */\nexport type OrganizationEnterpriseOwnerConnection = {\n  __typename?: \"OrganizationEnterpriseOwnerConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEnterpriseOwnerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An enterprise owner in the context of an organization that is part of the enterprise. */\nexport type OrganizationEnterpriseOwnerEdge = {\n  __typename?: \"OrganizationEnterpriseOwnerEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the owner with respect to the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */\nexport type OrganizationIdentityProvider = Node & {\n  __typename?: \"OrganizationIdentityProvider\";\n  /** The digest algorithm used to sign SAML requests for the Identity Provider. */\n  digestMethod?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** External Identities provisioned by this Identity Provider */\n  externalIdentities: ExternalIdentityConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars[\"X509Certificate\"][\"output\"]>;\n  /** The Issuer Entity ID for the SAML Identity Provider */\n  issuer?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Organization this Identity Provider belongs to */\n  organization?: Maybe<Organization>;\n  /** The signature algorithm used to sign SAML requests for the Identity Provider. */\n  signatureMethod?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The URL endpoint for the Identity Provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** An Identity Provider configured to provision SAML and SCIM identities for Organizations */\nexport type OrganizationIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  login?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  membersOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  userName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** An Invitation for a user to an organization. */\nexport type OrganizationInvitation = Node & {\n  __typename?: \"OrganizationInvitation\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The email address of the user invited to the organization. */\n  email?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The type of invitation that was sent (e.g. email, user). */\n  invitationType: OrganizationInvitationType;\n  /** The user who was invited to the organization. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter: User;\n  /** The organization the invite is for */\n  organization: Organization;\n  /** The user's pending role in the organization (e.g. member, owner). */\n  role: OrganizationInvitationRole;\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type OrganizationInvitationConnection = {\n  __typename?: \"OrganizationInvitationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type OrganizationInvitationEdge = {\n  __typename?: \"OrganizationInvitationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** The possible organization invitation roles. */\nexport enum OrganizationInvitationRole {\n  /** The user is invited to be an admin of the organization. */\n  Admin = \"ADMIN\",\n  /** The user is invited to be a billing manager of the organization. */\n  BillingManager = \"BILLING_MANAGER\",\n  /** The user is invited to be a direct member of the organization. */\n  DirectMember = \"DIRECT_MEMBER\",\n  /** The user's previous role will be reinstated. */\n  Reinstate = \"REINSTATE\",\n}\n\n/** The possible organization invitation types. */\nexport enum OrganizationInvitationType {\n  /** The invitation was to an email address. */\n  Email = \"EMAIL\",\n  /** The invitation was to an existing user. */\n  User = \"USER\",\n}\n\n/** The connection type for User. */\nexport type OrganizationMemberConnection = {\n  __typename?: \"OrganizationMemberConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user within an organization. */\nexport type OrganizationMemberEdge = {\n  __typename?: \"OrganizationMemberEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */\n  hasTwoFactorEnabled?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role this user has in the organization. */\n  role?: Maybe<OrganizationMemberRole>;\n};\n\n/** The possible roles within an organization for its members. */\nexport enum OrganizationMemberRole {\n  /** The user is an administrator of the organization. */\n  Admin = \"ADMIN\",\n  /** The user is a member of the organization. */\n  Member = \"MEMBER\",\n}\n\n/** The possible values for the members can create repositories setting on an organization. */\nexport enum OrganizationMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = \"ALL\",\n  /** Members will not be able to create public or private repositories. */\n  Disabled = \"DISABLED\",\n  /** Members will be able to create only internal repositories. */\n  Internal = \"INTERNAL\",\n  /** Members will be able to create only private repositories. */\n  Private = \"PRIVATE\",\n}\n\n/** Ordering options for organization connections. */\nexport type OrganizationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order organizations by. */\n  field: OrganizationOrderField;\n};\n\n/** Properties by which organization connections can be ordered. */\nexport enum OrganizationOrderField {\n  /** Order organizations by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order organizations by login */\n  Login = \"LOGIN\",\n}\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContext = HovercardContext & {\n  __typename?: \"OrganizationTeamsHovercardContext\";\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n  /** Teams in this organization the user is a member of that are relevant */\n  relevantTeams: TeamConnection;\n  /** The path for the full team list for this user */\n  teamsResourcePath: Scalars[\"URI\"][\"output\"];\n  /** The URL for the full team list for this user */\n  teamsUrl: Scalars[\"URI\"][\"output\"];\n  /** The total number of teams the user is on in the organization */\n  totalTeamCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContextRelevantTeamsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContext = HovercardContext & {\n  __typename?: \"OrganizationsHovercardContext\";\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n  /** Organizations this user is a member of that are relevant */\n  relevantOrganizations: OrganizationConnection;\n  /** The total number of organizations this user is in */\n  totalOrganizationCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContextRelevantOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Information for an uploaded package. */\nexport type Package = Node & {\n  __typename?: \"Package\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** Find the latest version for the package. */\n  latestVersion?: Maybe<PackageVersion>;\n  /** Identifies the name of the package. */\n  name: Scalars[\"String\"][\"output\"];\n  /** Identifies the type of the package. */\n  packageType: PackageType;\n  /** The repository this package belongs to. */\n  repository?: Maybe<Repository>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageStatistics>;\n  /** Find package version by version string. */\n  version?: Maybe<PackageVersion>;\n  /** list of versions for this package */\n  versions: PackageVersionConnection;\n};\n\n/** Information for an uploaded package. */\nexport type PackageVersionArgs = {\n  version: Scalars[\"String\"][\"input\"];\n};\n\n/** Information for an uploaded package. */\nexport type PackageVersionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<PackageVersionOrder>;\n};\n\n/** The connection type for Package. */\nexport type PackageConnection = {\n  __typename?: \"PackageConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Package>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PackageEdge = {\n  __typename?: \"PackageEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Package>;\n};\n\n/** A file in a package version. */\nexport type PackageFile = Node & {\n  __typename?: \"PackageFile\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** MD5 hash of the file. */\n  md5?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Name of the file. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The package version this file belongs to. */\n  packageVersion?: Maybe<PackageVersion>;\n  /** SHA1 hash of the file. */\n  sha1?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** SHA256 hash of the file. */\n  sha256?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Size of the file in bytes. */\n  size?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** URL to download the asset. */\n  url?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** The connection type for PackageFile. */\nexport type PackageFileConnection = {\n  __typename?: \"PackageFileConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PackageFileEdge = {\n  __typename?: \"PackageFileEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageFile>;\n};\n\n/** Ways in which lists of package files can be ordered upon return. */\nexport type PackageFileOrder = {\n  /** The direction in which to order package files by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package files by. */\n  field?: InputMaybe<PackageFileOrderField>;\n};\n\n/** Properties by which package file connections can be ordered. */\nexport enum PackageFileOrderField {\n  /** Order package files by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Ways in which lists of packages can be ordered upon return. */\nexport type PackageOrder = {\n  /** The direction in which to order packages by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order packages by. */\n  field?: InputMaybe<PackageOrderField>;\n};\n\n/** Properties by which package connections can be ordered. */\nexport enum PackageOrderField {\n  /** Order packages by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Represents an owner of a package. */\nexport type PackageOwner = {\n  id: Scalars[\"ID\"][\"output\"];\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n};\n\n/** Represents an owner of a package. */\nexport type PackageOwnerPackagesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  names?: InputMaybe<Array<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Represents a object that contains package activity statistics such as downloads. */\nexport type PackageStatistics = {\n  __typename?: \"PackageStatistics\";\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A version tag contains the mapping between a tag name and a version. */\nexport type PackageTag = Node & {\n  __typename?: \"PackageTag\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the tag name of the version. */\n  name: Scalars[\"String\"][\"output\"];\n  /** Version that the tag is associated with. */\n  version?: Maybe<PackageVersion>;\n};\n\n/** The possible types of a package. */\nexport enum PackageType {\n  /** A debian package. */\n  Debian = \"DEBIAN\",\n  /**\n   * A docker image.\n   * @deprecated DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC.\n   */\n  Docker = \"DOCKER\",\n  /** A maven package. */\n  Maven = \"MAVEN\",\n  /** An npm package. */\n  Npm = \"NPM\",\n  /** A nuget package. */\n  Nuget = \"NUGET\",\n  /** A python package. */\n  Pypi = \"PYPI\",\n  /** A rubygems package. */\n  Rubygems = \"RUBYGEMS\",\n}\n\n/** Information about a specific package version. */\nexport type PackageVersion = Node & {\n  __typename?: \"PackageVersion\";\n  /** List of files associated with this package version */\n  files: PackageFileConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The package associated with this version. */\n  package?: Maybe<Package>;\n  /** The platform this version was built for. */\n  platform?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Whether or not this version is a pre-release. */\n  preRelease: Scalars[\"Boolean\"][\"output\"];\n  /** The README of this package version. */\n  readme?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The release associated with this package version. */\n  release?: Maybe<Release>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageVersionStatistics>;\n  /** The package version summary. */\n  summary?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The version string. */\n  version: Scalars[\"String\"][\"output\"];\n};\n\n/** Information about a specific package version. */\nexport type PackageVersionFilesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<PackageFileOrder>;\n};\n\n/** The connection type for PackageVersion. */\nexport type PackageVersionConnection = {\n  __typename?: \"PackageVersionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageVersionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageVersion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PackageVersionEdge = {\n  __typename?: \"PackageVersionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageVersion>;\n};\n\n/** Ways in which lists of package versions can be ordered upon return. */\nexport type PackageVersionOrder = {\n  /** The direction in which to order package versions by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package versions by. */\n  field?: InputMaybe<PackageVersionOrderField>;\n};\n\n/** Properties by which package version connections can be ordered. */\nexport enum PackageVersionOrderField {\n  /** Order package versions by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Represents a object that contains package version activity statistics such as downloads. */\nexport type PackageVersionStatistics = {\n  __typename?: \"PackageVersionStatistics\";\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: \"PageInfo\";\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars[\"Boolean\"][\"output\"];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars[\"Boolean\"][\"output\"];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The possible types of patch statuses. */\nexport enum PatchStatus {\n  /** The file was added. Git status 'A'. */\n  Added = \"ADDED\",\n  /** The file's type was changed. Git status 'T'. */\n  Changed = \"CHANGED\",\n  /** The file was copied. Git status 'C'. */\n  Copied = \"COPIED\",\n  /** The file was deleted. Git status 'D'. */\n  Deleted = \"DELETED\",\n  /** The file's contents were changed. Git status 'M'. */\n  Modified = \"MODIFIED\",\n  /** The file was renamed. Git status 'R'. */\n  Renamed = \"RENAMED\",\n}\n\n/** Types that can grant permissions on a repository to a user */\nexport type PermissionGranter = Organization | Repository | Team;\n\n/** A level of permission and source for a user's access to a repository. */\nexport type PermissionSource = {\n  __typename?: \"PermissionSource\";\n  /** The organization the repository belongs to. */\n  organization: Organization;\n  /** The level of access this source has granted to the user. */\n  permission: DefaultRepositoryPermissionField;\n  /** The source of this permission. */\n  source: PermissionGranter;\n};\n\n/** Autogenerated input type of PinIssue */\nexport type PinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the issue to be pinned */\n  issueId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of PinIssue */\nexport type PinIssuePayload = {\n  __typename?: \"PinIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue that was pinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Types that can be pinned to a profile page. */\nexport type PinnableItem = Gist | Repository;\n\n/** The connection type for PinnableItem. */\nexport type PinnableItemConnection = {\n  __typename?: \"PinnableItemConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PinnableItemEdge = {\n  __typename?: \"PinnableItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnableItem>;\n};\n\n/** Represents items that can be pinned to a profile page or dashboard. */\nexport enum PinnableItemType {\n  /** A gist. */\n  Gist = \"GIST\",\n  /** An issue. */\n  Issue = \"ISSUE\",\n  /** An organization. */\n  Organization = \"ORGANIZATION\",\n  /** A project. */\n  Project = \"PROJECT\",\n  /** A pull request. */\n  PullRequest = \"PULL_REQUEST\",\n  /** A repository. */\n  Repository = \"REPOSITORY\",\n  /** A team. */\n  Team = \"TEAM\",\n  /** A user. */\n  User = \"USER\",\n}\n\n/** A Pinned Discussion is a discussion pinned to a repository's index page. */\nexport type PinnedDiscussion = Node &\n  RepositoryNode & {\n    __typename?: \"PinnedDiscussion\";\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The discussion that was pinned. */\n    discussion: Discussion;\n    /** Color stops of the chosen gradient */\n    gradientStopColors: Array<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Background texture pattern */\n    pattern: PinnedDiscussionPattern;\n    /** The actor that pinned this discussion. */\n    pinnedBy: Actor;\n    /** Preconfigured background gradient option */\n    preconfiguredGradient?: Maybe<PinnedDiscussionGradient>;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n  };\n\n/** The connection type for PinnedDiscussion. */\nexport type PinnedDiscussionConnection = {\n  __typename?: \"PinnedDiscussionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PinnedDiscussionEdge = {\n  __typename?: \"PinnedDiscussionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedDiscussion>;\n};\n\n/** Preconfigured gradients that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionGradient {\n  /** A gradient of blue to mint */\n  BlueMint = \"BLUE_MINT\",\n  /** A gradient of blue to purple */\n  BluePurple = \"BLUE_PURPLE\",\n  /** A gradient of pink to blue */\n  PinkBlue = \"PINK_BLUE\",\n  /** A gradient of purple to coral */\n  PurpleCoral = \"PURPLE_CORAL\",\n  /** A gradient of red to orange */\n  RedOrange = \"RED_ORANGE\",\n}\n\n/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionPattern {\n  /** An upward-facing chevron pattern */\n  ChevronUp = \"CHEVRON_UP\",\n  /** A hollow dot pattern */\n  Dot = \"DOT\",\n  /** A solid dot pattern */\n  DotFill = \"DOT_FILL\",\n  /** A heart pattern */\n  HeartFill = \"HEART_FILL\",\n  /** A plus sign pattern */\n  Plus = \"PLUS\",\n  /** A lightning bolt pattern */\n  Zap = \"ZAP\",\n}\n\n/** Represents a 'pinned' event on a given issue or pull request. */\nexport type PinnedEvent = Node & {\n  __typename?: \"PinnedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** A Pinned Issue is a issue pinned to a repository's index page. */\nexport type PinnedIssue = Node & {\n  __typename?: \"PinnedIssue\";\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The issue that was pinned. */\n  issue: Issue;\n  /** The actor that pinned this issue. */\n  pinnedBy: Actor;\n  /** The repository that this issue was pinned to. */\n  repository: Repository;\n};\n\n/** The connection type for PinnedIssue. */\nexport type PinnedIssueConnection = {\n  __typename?: \"PinnedIssueConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedIssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedIssue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PinnedIssueEdge = {\n  __typename?: \"PinnedIssueEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedIssue>;\n};\n\n/** Audit log entry for a private_repository_forking.disable event. */\nexport type PrivateRepositoryForkingDisableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"PrivateRepositoryForkingDisableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a private_repository_forking.enable event. */\nexport type PrivateRepositoryForkingEnableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"PrivateRepositoryForkingEnableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/**\n * A curatable list of repositories relating to a repository owner, which defaults\n * to showing the most popular repositories they own.\n */\nexport type ProfileItemShowcase = {\n  __typename?: \"ProfileItemShowcase\";\n  /** Whether or not the owner has pinned any repositories or gists. */\n  hasPinnedItems: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * The repositories and gists in the showcase. If the profile owner has any\n   * pinned items, those will be returned. Otherwise, the profile owner's popular\n   * repositories will be returned.\n   */\n  items: PinnableItemConnection;\n};\n\n/**\n * A curatable list of repositories relating to a repository owner, which defaults\n * to showing the most popular repositories they own.\n */\nexport type ProfileItemShowcaseItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwner = {\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars[\"Boolean\"][\"output\"];\n  /** The public profile email. */\n  email?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /**\n   * Showcases a selection of repositories and gists that the profile owner has\n   * either curated or that have been selected automatically based on popularity.\n   */\n  itemShowcase: ProfileItemShowcase;\n  /** The public profile location. */\n  location?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The username used to login. */\n  login: Scalars[\"String\"][\"output\"];\n  /** The public profile name. */\n  name?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars[\"Int\"][\"output\"];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars[\"Boolean\"][\"output\"];\n  /** The public profile website URL. */\n  websiteUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnableItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnedItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type Project = Closable &\n  Node &\n  Updatable & {\n    __typename?: \"Project\";\n    /** The project's description body. */\n    body?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The projects description body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** `true` if the object is closed (definition of closed may depend on type) */\n    closed: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was closed. */\n    closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** List of columns in the project */\n    columns: ProjectColumnConnection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The actor who originally created the project. */\n    creator?: Maybe<Actor>;\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The project's name. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The project's number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** The project's owner. Currently limited to repositories, organizations, and users. */\n    owner: ProjectOwner;\n    /** List of pending cards in this project */\n    pendingCards: ProjectCardConnection;\n    /** Project progress details. */\n    progress: ProjectProgress;\n    /** The HTTP path for this project */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Whether the project is open or closed. */\n    state: ProjectState;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this project */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectColumnsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectPendingCardsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A card in a project. */\nexport type ProjectCard = Node & {\n  __typename?: \"ProjectCard\";\n  /**\n   * The project column this card is associated under. A card may only belong to one\n   * project column at a time. The column field will be null if the card is created\n   * in a pending state and has yet to be associated with a column. Once cards are\n   * associated with a column, they will not become pending in the future.\n   */\n  column?: Maybe<ProjectColumn>;\n  /** The card content item */\n  content?: Maybe<ProjectCardItem>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The actor who created this card */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether the card is archived */\n  isArchived: Scalars[\"Boolean\"][\"output\"];\n  /** The card note */\n  note?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The project that contains this card. */\n  project: Project;\n  /** The HTTP path for this card */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The state of ProjectCard */\n  state?: Maybe<ProjectCardState>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP URL for this card */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** The possible archived states of a project card. */\nexport enum ProjectCardArchivedState {\n  /** A project card that is archived */\n  Archived = \"ARCHIVED\",\n  /** A project card that is not archived */\n  NotArchived = \"NOT_ARCHIVED\",\n}\n\n/** The connection type for ProjectCard. */\nexport type ProjectCardConnection = {\n  __typename?: \"ProjectCardConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectCardEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectCard>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectCardEdge = {\n  __typename?: \"ProjectCardEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectCard>;\n};\n\n/** An issue or PR and its owning repository to be used in a project card. */\nexport type ProjectCardImport = {\n  /** The issue or pull request number. */\n  number: Scalars[\"Int\"][\"input\"];\n  /** Repository name with owner (owner/repository). */\n  repository: Scalars[\"String\"][\"input\"];\n};\n\n/** Types that can be inside Project Cards. */\nexport type ProjectCardItem = Issue | PullRequest;\n\n/** Various content states of a ProjectCard */\nexport enum ProjectCardState {\n  /** The card has content only. */\n  ContentOnly = \"CONTENT_ONLY\",\n  /** The card has a note only. */\n  NoteOnly = \"NOTE_ONLY\",\n  /** The card is redacted. */\n  Redacted = \"REDACTED\",\n}\n\n/** A column inside a project. */\nexport type ProjectColumn = Node & {\n  __typename?: \"ProjectColumn\";\n  /** List of cards in the column */\n  cards: ProjectCardConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The project column's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The project that contains this column. */\n  project: Project;\n  /** The semantic purpose of the column */\n  purpose?: Maybe<ProjectColumnPurpose>;\n  /** The HTTP path for this project column */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP URL for this project column */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** A column inside a project. */\nexport type ProjectColumnCardsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for ProjectColumn. */\nexport type ProjectColumnConnection = {\n  __typename?: \"ProjectColumnConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectColumnEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectColumn>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectColumnEdge = {\n  __typename?: \"ProjectColumnEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectColumn>;\n};\n\n/** A project column and a list of its issues and PRs. */\nexport type ProjectColumnImport = {\n  /** The name of the column. */\n  columnName: Scalars[\"String\"][\"input\"];\n  /** A list of issues and pull requests in the column. */\n  issues?: InputMaybe<Array<ProjectCardImport>>;\n  /** The position of the column, starting from 0. */\n  position: Scalars[\"Int\"][\"input\"];\n};\n\n/** The semantic purpose of the column - todo, in progress, or done. */\nexport enum ProjectColumnPurpose {\n  /** The column contains cards which are complete */\n  Done = \"DONE\",\n  /** The column contains cards which are currently being worked on */\n  InProgress = \"IN_PROGRESS\",\n  /** The column contains cards still to be worked on */\n  Todo = \"TODO\",\n}\n\n/** A list of projects associated with the owner. */\nexport type ProjectConnection = {\n  __typename?: \"ProjectConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Project>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectEdge = {\n  __typename?: \"ProjectEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Project>;\n};\n\n/** The type of a project item. */\nexport enum ProjectItemType {\n  /** Draft Issue */\n  DraftIssue = \"DRAFT_ISSUE\",\n  /** Issue */\n  Issue = \"ISSUE\",\n  /** Pull Request */\n  PullRequest = \"PULL_REQUEST\",\n  /** Redacted Item */\n  Redacted = \"REDACTED\",\n}\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNext = Closable &\n  Node &\n  Updatable & {\n    __typename?: \"ProjectNext\";\n    /** Returns true if the project is closed. */\n    closed: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was closed. */\n    closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The actor who originally created the project. */\n    creator?: Maybe<Actor>;\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The project's description. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** List of fields in the project */\n    fields: ProjectNextFieldConnection;\n    id: Scalars[\"ID\"][\"output\"];\n    /** List of items in the project */\n    items: ProjectNextItemConnection;\n    /** The project's number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** The project's owner. Currently limited to organizations and users. */\n    owner: ProjectNextOwner;\n    /** Returns true if the project is public. */\n    public: Scalars[\"Boolean\"][\"output\"];\n    /** The repositories the project is linked to. */\n    repositories: RepositoryConnection;\n    /** The HTTP path for this project */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The project's short description. */\n    shortDescription?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The project's name. */\n    title?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this project */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** List of views in the project */\n    views: ProjectViewConnection;\n  };\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextFieldsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextRepositoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectNextViewsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for ProjectNext. */\nexport type ProjectNextConnection = {\n  __typename?: \"ProjectNextConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNext>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextEdge = {\n  __typename?: \"ProjectNextEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNext>;\n};\n\n/** A field inside a project. */\nexport type ProjectNextField = Node &\n  ProjectNextFieldCommon & {\n    __typename?: \"ProjectNextField\";\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The field's type. */\n    dataType: ProjectNextFieldType;\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The project field's name. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The project that contains this field. */\n    project: ProjectNext;\n    /** The field's settings. */\n    settings?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n  };\n\n/** Common fields across different field types */\nexport type ProjectNextFieldCommon = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The field's type. */\n  dataType: ProjectNextFieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The project field's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The project that contains this field. */\n  project: ProjectNext;\n  /** The field's settings. */\n  settings?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** The connection type for ProjectNextField. */\nexport type ProjectNextFieldConnection = {\n  __typename?: \"ProjectNextFieldConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextFieldEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextField>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextFieldEdge = {\n  __typename?: \"ProjectNextFieldEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextField>;\n};\n\n/** The type of a project next field. */\nexport enum ProjectNextFieldType {\n  /** Assignees */\n  Assignees = \"ASSIGNEES\",\n  /** Date */\n  Date = \"DATE\",\n  /** Iteration */\n  Iteration = \"ITERATION\",\n  /** Labels */\n  Labels = \"LABELS\",\n  /** Linked Pull Requests */\n  LinkedPullRequests = \"LINKED_PULL_REQUESTS\",\n  /** Milestone */\n  Milestone = \"MILESTONE\",\n  /** Number */\n  Number = \"NUMBER\",\n  /** Repository */\n  Repository = \"REPOSITORY\",\n  /** Reviewers */\n  Reviewers = \"REVIEWERS\",\n  /** Single Select */\n  SingleSelect = \"SINGLE_SELECT\",\n  /** Text */\n  Text = \"TEXT\",\n  /** Title */\n  Title = \"TITLE\",\n  /** Tracks */\n  Tracks = \"TRACKS\",\n}\n\n/** An item within a new Project. */\nexport type ProjectNextItem = Node & {\n  __typename?: \"ProjectNextItem\";\n  /** The content of the referenced draft issue, issue, or pull request */\n  content?: Maybe<ProjectNextItemContent>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** List of field values */\n  fieldValues: ProjectNextItemFieldValueConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether the item is archived. */\n  isArchived: Scalars[\"Boolean\"][\"output\"];\n  /** The project that contains this item. */\n  project: ProjectNext;\n  /** The title of the item */\n  title?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The type of the item. */\n  type: ProjectItemType;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** An item within a new Project. */\nexport type ProjectNextItemFieldValuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for ProjectNextItem. */\nexport type ProjectNextItemConnection = {\n  __typename?: \"ProjectNextItemConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Types that can be inside Project Items. */\nexport type ProjectNextItemContent = DraftIssue | Issue | PullRequest;\n\n/** An edge in a connection. */\nexport type ProjectNextItemEdge = {\n  __typename?: \"ProjectNextItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextItem>;\n};\n\n/** An value of a field in an item of a new Project. */\nexport type ProjectNextItemFieldValue = Node & {\n  __typename?: \"ProjectNextItemFieldValue\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The project field that contains this value. */\n  projectField: ProjectNextField;\n  /** The project item that contains this value. */\n  projectItem: ProjectNextItem;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The value of a field */\n  value?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The connection type for ProjectNextItemFieldValue. */\nexport type ProjectNextItemFieldValueConnection = {\n  __typename?: \"ProjectNextItemFieldValueConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectNextItemFieldValueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectNextItemFieldValue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectNextItemFieldValueEdge = {\n  __typename?: \"ProjectNextItemFieldValueEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectNextItemFieldValue>;\n};\n\n/** Properties by which the return project can be ordered. */\nexport enum ProjectNextOrderField {\n  /** The project's date and time of creation */\n  CreatedAt = \"CREATED_AT\",\n  /** The project's number */\n  Number = \"NUMBER\",\n  /** The project's title */\n  Title = \"TITLE\",\n  /** The project's date and time of update */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwner = {\n  id: Scalars[\"ID\"][\"output\"];\n  /** Find a project by project (beta) number. */\n  projectNext?: Maybe<ProjectNext>;\n  /** A list of projects (beta) under the owner. */\n  projectsNext: ProjectNextConnection;\n};\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwnerProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** Represents an owner of a project (beta). */\nexport type ProjectNextOwnerProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** Ways in which lists of projects can be ordered upon return. */\nexport type ProjectOrder = {\n  /** The direction in which to order projects by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order projects by. */\n  field: ProjectOrderField;\n};\n\n/** Properties by which project connections can be ordered. */\nexport enum ProjectOrderField {\n  /** Order projects by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order projects by name */\n  Name = \"NAME\",\n  /** Order projects by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** Represents an owner of a Project. */\nexport type ProjectOwner = {\n  id: Scalars[\"ID\"][\"output\"];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing owners projects */\n  projectsResourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL listing owners projects */\n  projectsUrl: Scalars[\"URI\"][\"output\"];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** Project progress stats. */\nexport type ProjectProgress = {\n  __typename?: \"ProjectProgress\";\n  /** The number of done cards. */\n  doneCount: Scalars[\"Int\"][\"output\"];\n  /** The percentage of done cards. */\n  donePercentage: Scalars[\"Float\"][\"output\"];\n  /** Whether progress tracking is enabled and cards with purpose exist for this project */\n  enabled: Scalars[\"Boolean\"][\"output\"];\n  /** The number of in-progress cards. */\n  inProgressCount: Scalars[\"Int\"][\"output\"];\n  /** The percentage of in-progress cards. */\n  inProgressPercentage: Scalars[\"Float\"][\"output\"];\n  /** The number of to do cards. */\n  todoCount: Scalars[\"Int\"][\"output\"];\n  /** The percentage of to do cards. */\n  todoPercentage: Scalars[\"Float\"][\"output\"];\n};\n\n/** State of the project; either 'open' or 'closed' */\nexport enum ProjectState {\n  /** The project is closed. */\n  Closed = \"CLOSED\",\n  /** The project is open. */\n  Open = \"OPEN\",\n}\n\n/** GitHub-provided templates for Projects */\nexport enum ProjectTemplate {\n  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */\n  AutomatedKanbanV2 = \"AUTOMATED_KANBAN_V2\",\n  /** Create a board with triggers to automatically move cards across columns with review automation. */\n  AutomatedReviewsKanban = \"AUTOMATED_REVIEWS_KANBAN\",\n  /** Create a board with columns for To do, In progress and Done. */\n  BasicKanban = \"BASIC_KANBAN\",\n  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */\n  BugTriage = \"BUG_TRIAGE\",\n}\n\n/** Represents an owner of a project (beta). */\nexport type ProjectV2Owner = {\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** A view within a Project. */\nexport type ProjectView = Node & {\n  __typename?: \"ProjectView\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The project view's filter. */\n  filter?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The view's group-by field. */\n  groupBy?: Maybe<Array<Scalars[\"Int\"][\"output\"]>>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The view's filtered items. */\n  items: ProjectNextItemConnection;\n  /** The project view's layout. */\n  layout: ProjectViewLayout;\n  /** The project view's name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The project view's number. */\n  number: Scalars[\"Int\"][\"output\"];\n  /** The project that contains this view. */\n  project: ProjectNext;\n  /** The view's sort-by config. */\n  sortBy?: Maybe<Array<SortBy>>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The view's vertical-group-by field. */\n  verticalGroupBy?: Maybe<Array<Scalars[\"Int\"][\"output\"]>>;\n  /** The view's visible fields. */\n  visibleFields?: Maybe<Array<Scalars[\"Int\"][\"output\"]>>;\n};\n\n/** A view within a Project. */\nexport type ProjectViewItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for ProjectView. */\nexport type ProjectViewConnection = {\n  __typename?: \"ProjectViewConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectViewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectView>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ProjectViewEdge = {\n  __typename?: \"ProjectViewEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectView>;\n};\n\n/** The layout of a project view. */\nexport enum ProjectViewLayout {\n  /** Board layout */\n  BoardLayout = \"BOARD_LAYOUT\",\n  /** Table layout */\n  TableLayout = \"TABLE_LAYOUT\",\n}\n\n/** A user's public key. */\nexport type PublicKey = Node & {\n  __typename?: \"PublicKey\";\n  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */\n  accessedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /**\n   * Identifies the date and time when the key was created. Keys created before\n   * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.\n   */\n  createdAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The fingerprint for this PublicKey. */\n  fingerprint: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */\n  isReadOnly?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** The public key string. */\n  key: Scalars[\"String\"][\"output\"];\n  /**\n   * Identifies the date and time when the key was updated. Keys created before\n   * March 5th, 2014 may have inaccurate values. Values will be null for keys not\n   * owned by the user.\n   */\n  updatedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** The connection type for PublicKey. */\nexport type PublicKeyConnection = {\n  __typename?: \"PublicKeyConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PublicKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PublicKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PublicKeyEdge = {\n  __typename?: \"PublicKeyEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PublicKey>;\n};\n\n/** A repository pull request. */\nexport type PullRequest = Assignable &\n  Closable &\n  Comment &\n  Labelable &\n  Lockable &\n  Node &\n  ProjectNextOwner &\n  ProjectV2Owner &\n  Reactable &\n  RepositoryNode &\n  Subscribable &\n  UniformResourceLocatable &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"PullRequest\";\n    /** Reason that the conversation was locked. */\n    activeLockReason?: Maybe<LockReason>;\n    /** The number of additions in this pull request. */\n    additions: Scalars[\"Int\"][\"output\"];\n    /** A list of Users assigned to this object. */\n    assignees: UserConnection;\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** Returns the auto-merge request object if one exists for this pull request. */\n    autoMergeRequest?: Maybe<AutoMergeRequest>;\n    /** Identifies the base Ref associated with the pull request. */\n    baseRef?: Maybe<Ref>;\n    /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */\n    baseRefName: Scalars[\"String\"][\"output\"];\n    /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */\n    baseRefOid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The repository associated with this pull request's base Ref. */\n    baseRepository?: Maybe<Repository>;\n    /** The body as Markdown. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Whether or not the pull request is rebaseable. */\n    canBeRebased: Scalars[\"Boolean\"][\"output\"];\n    /** The number of changed files in this pull request. */\n    changedFiles: Scalars[\"Int\"][\"output\"];\n    /** The HTTP path for the checks of this pull request. */\n    checksResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for the checks of this pull request. */\n    checksUrl: Scalars[\"URI\"][\"output\"];\n    /** `true` if the pull request is closed */\n    closed: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was closed. */\n    closedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** List of issues that were may be closed by this pull request */\n    closingIssuesReferences?: Maybe<IssueConnection>;\n    /** A list of comments associated with the pull request. */\n    comments: IssueCommentConnection;\n    /** A list of commits present in this pull request's head branch not present in the base branch. */\n    commits: PullRequestCommitConnection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The number of deletions in this pull request. */\n    deletions: Scalars[\"Int\"][\"output\"];\n    /** The actor who edited this pull request's body. */\n    editor?: Maybe<Actor>;\n    /** Lists the files changed within this pull request. */\n    files?: Maybe<PullRequestChangedFileConnection>;\n    /** Identifies the head Ref associated with the pull request. */\n    headRef?: Maybe<Ref>;\n    /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */\n    headRefName: Scalars[\"String\"][\"output\"];\n    /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */\n    headRefOid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The repository associated with this pull request's head Ref. */\n    headRepository?: Maybe<Repository>;\n    /** The owner of the repository associated with this pull request's head Ref. */\n    headRepositoryOwner?: Maybe<RepositoryOwner>;\n    /** The hovercard information for this issue */\n    hovercard: Hovercard;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** The head and base repositories are different. */\n    isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the pull request is a draft. */\n    isDraft: Scalars[\"Boolean\"][\"output\"];\n    /** Is this pull request read by the viewer */\n    isReadByViewer?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** A list of labels associated with the object. */\n    labels?: Maybe<LabelConnection>;\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of latest reviews per user associated with the pull request. */\n    latestOpinionatedReviews?: Maybe<PullRequestReviewConnection>;\n    /** A list of latest reviews per user associated with the pull request that are not also pending review. */\n    latestReviews?: Maybe<PullRequestReviewConnection>;\n    /** `true` if the pull request is locked */\n    locked: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates whether maintainers can modify the pull request. */\n    maintainerCanModify: Scalars[\"Boolean\"][\"output\"];\n    /** The commit that was created when this pull request was merged. */\n    mergeCommit?: Maybe<Commit>;\n    /** Detailed information about the current pull request merge state status. */\n    mergeStateStatus: MergeStateStatus;\n    /** Whether or not the pull request can be merged based on the existence of merge conflicts. */\n    mergeable: MergeableState;\n    /** Whether or not the pull request was merged. */\n    merged: Scalars[\"Boolean\"][\"output\"];\n    /** The date and time that the pull request was merged. */\n    mergedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The actor who merged the pull request. */\n    mergedBy?: Maybe<Actor>;\n    /** Identifies the milestone associated with the pull request. */\n    milestone?: Maybe<Milestone>;\n    /** Identifies the pull request number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** A list of Users that are participating in the Pull Request conversation. */\n    participants: UserConnection;\n    /** The permalink to the pull request. */\n    permalink: Scalars[\"URI\"][\"output\"];\n    /**\n     * The commit that GitHub automatically generated to test if this pull request\n     * could be merged. This field will not return a value if the pull request is\n     * merged, or if the test merge commit is still being generated. See the\n     * `mergeable` field for more details on the mergeability of the pull request.\n     */\n    potentialMergeCommit?: Maybe<Commit>;\n    /** List of project cards associated with this pull request. */\n    projectCards: ProjectCardConnection;\n    /** Find a project by project (beta) number. */\n    projectNext?: Maybe<ProjectNext>;\n    /** List of project (beta) items associated with this pull request. */\n    projectNextItems: ProjectNextItemConnection;\n    /** A list of projects (beta) under the owner. */\n    projectsNext: ProjectNextConnection;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path for this pull request. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP path for reverting this pull request. */\n    revertResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for reverting this pull request. */\n    revertUrl: Scalars[\"URI\"][\"output\"];\n    /** The current status of this pull request with respect to code review. */\n    reviewDecision?: Maybe<PullRequestReviewDecision>;\n    /** A list of review requests associated with the pull request. */\n    reviewRequests?: Maybe<ReviewRequestConnection>;\n    /** The list of all review threads for this pull request. */\n    reviewThreads: PullRequestReviewThreadConnection;\n    /** A list of reviews associated with the pull request. */\n    reviews?: Maybe<PullRequestReviewConnection>;\n    /** Identifies the state of the pull request. */\n    state: PullRequestState;\n    /** A list of reviewer suggestions based on commit history and past review comments. */\n    suggestedReviewers: Array<Maybe<SuggestedReviewer>>;\n    /**\n     * A list of events, comments, commits, etc. associated with the pull request.\n     * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.\n     */\n    timeline: PullRequestTimelineConnection;\n    /** A list of events, comments, commits, etc. associated with the pull request. */\n    timelineItems: PullRequestTimelineItemsConnection;\n    /** Identifies the pull request title. */\n    title: Scalars[\"String\"][\"output\"];\n    /** Identifies the pull request title rendered to HTML. */\n    titleHTML: Scalars[\"HTML\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this pull request. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Whether or not the viewer can apply suggestion. */\n    viewerCanApplySuggestion: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer can restore the deleted head ref. */\n    viewerCanDeleteHeadRef: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the viewer can disable auto-merge */\n    viewerCanDisableAutoMerge: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the viewer can enable auto-merge */\n    viewerCanEnableAutoMerge: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */\n    viewerCanMergeAsAdmin: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n    /** The latest review given from the viewer. */\n    viewerLatestReview?: Maybe<PullRequestReview>;\n    /** The person who has requested the viewer for review on this pull request. */\n    viewerLatestReviewRequest?: Maybe<ReviewRequest>;\n    /** The merge body text for the viewer and method. */\n    viewerMergeBodyText: Scalars[\"String\"][\"output\"];\n    /** The merge headline text for the viewer and method. */\n    viewerMergeHeadlineText: Scalars[\"String\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n  };\n\n/** A repository pull request. */\nexport type PullRequestAssigneesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestClosingIssuesReferencesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  userLinkedOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n/** A repository pull request. */\nexport type PullRequestCommitsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestFilesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestLabelsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** A repository pull request. */\nexport type PullRequestLatestOpinionatedReviewsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  writersOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestLatestReviewsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestParticipantsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestProjectCardsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository pull request. */\nexport type PullRequestProjectNextItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includeArchived?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** A repository pull request. */\nexport type PullRequestReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A repository pull request. */\nexport type PullRequestReviewRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestReviewThreadsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestReviewsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  author?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  states?: InputMaybe<Array<PullRequestReviewState>>;\n};\n\n/** A repository pull request. */\nexport type PullRequestTimelineArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestTimelineItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  itemTypes?: InputMaybe<Array<PullRequestTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  skip?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeBodyTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeHeadlineTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n/** A file changed in a pull request. */\nexport type PullRequestChangedFile = {\n  __typename?: \"PullRequestChangedFile\";\n  /** The number of additions to the file. */\n  additions: Scalars[\"Int\"][\"output\"];\n  /** How the file was changed in this PullRequest */\n  changeType: PatchStatus;\n  /** The number of deletions to the file. */\n  deletions: Scalars[\"Int\"][\"output\"];\n  /** The path of the file. */\n  path: Scalars[\"String\"][\"output\"];\n  /** The state of the file for the viewer. */\n  viewerViewedState: FileViewedState;\n};\n\n/** The connection type for PullRequestChangedFile. */\nexport type PullRequestChangedFileConnection = {\n  __typename?: \"PullRequestChangedFileConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestChangedFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestChangedFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PullRequestChangedFileEdge = {\n  __typename?: \"PullRequestChangedFileEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestChangedFile>;\n};\n\n/** Represents a Git commit part of a pull request. */\nexport type PullRequestCommit = Node &\n  UniformResourceLocatable & {\n    __typename?: \"PullRequestCommit\";\n    /** The Git commit object */\n    commit: Commit;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The pull request this commit belongs to */\n    pullRequest: PullRequest;\n    /** The HTTP path for this pull request commit */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this pull request commit */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThread = Node &\n  RepositoryNode & {\n    __typename?: \"PullRequestCommitCommentThread\";\n    /** The comments that exist in this thread. */\n    comments: CommitCommentConnection;\n    /** The commit the comments were made on. */\n    commit: Commit;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The file the comments were made on. */\n    path?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The position in the diff for the commit that the comment was made on. */\n    position?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The pull request this commit comment thread belongs to */\n    pullRequest: PullRequest;\n    /** The repository associated with this node. */\n    repository: Repository;\n  };\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for PullRequestCommit. */\nexport type PullRequestCommitConnection = {\n  __typename?: \"PullRequestCommitConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestCommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestCommit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PullRequestCommitEdge = {\n  __typename?: \"PullRequestCommitEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestCommit>;\n};\n\n/** The connection type for PullRequest. */\nexport type PullRequestConnection = {\n  __typename?: \"PullRequestConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepository = {\n  __typename?: \"PullRequestContributionsByRepository\";\n  /** The pull request contributions. */\n  contributions: CreatedPullRequestContributionConnection;\n  /** The repository in which the pull requests were opened. */\n  repository: Repository;\n};\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type PullRequestEdge = {\n  __typename?: \"PullRequestEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequest>;\n};\n\n/** Represents available types of methods to use when merging a pull request. */\nexport enum PullRequestMergeMethod {\n  /** Add all commits from the head branch to the base branch with a merge commit. */\n  Merge = \"MERGE\",\n  /** Add all commits from the head branch onto the base branch individually. */\n  Rebase = \"REBASE\",\n  /** Combine all commits from the head branch into a single commit in the base branch. */\n  Squash = \"SQUASH\",\n}\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type PullRequestOrder = {\n  /** The direction in which to order pull requests by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order pull requests by. */\n  field: PullRequestOrderField;\n};\n\n/** Properties by which pull_requests connections can be ordered. */\nexport enum PullRequestOrderField {\n  /** Order pull_requests by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order pull_requests by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** A review object for a given pull request. */\nexport type PullRequestReview = Comment &\n  Deletable &\n  Node &\n  Reactable &\n  RepositoryNode &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"PullRequestReview\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** Indicates whether the author of this review has push access to the repository. */\n    authorCanPushToRepository: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the pull request review body. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body of this review rendered as plain text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** A list of review comments for the current pull request review. */\n    comments: PullRequestReviewCommentConnection;\n    /** Identifies the commit associated with this pull request review. */\n    commit?: Maybe<Commit>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of teams that this review was made on behalf of. */\n    onBehalfOf: TeamConnection;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the pull request associated with this pull request review. */\n    pullRequest: PullRequest;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path permalink for this PullRequestReview. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the current state of the pull request review. */\n    state: PullRequestReviewState;\n    /** Identifies when the Pull Request Review was submitted */\n    submittedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL permalink for this PullRequestReview. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewOnBehalfOfArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewComment = Comment &\n  Deletable &\n  Minimizable &\n  Node &\n  Reactable &\n  RepositoryNode &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"PullRequestReviewComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the subject of the comment. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The comment body of this review comment. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The comment body of this review comment rendered as plain text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the commit associated with the comment. */\n    commit?: Maybe<Commit>;\n    /** Identifies when the comment was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The diff hunk to which the comment applies. */\n    diffHunk: Scalars[\"String\"][\"output\"];\n    /** Identifies when the comment was created in a draft state. */\n    draftedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not a comment has been minimized. */\n    isMinimized: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Returns why the comment was minimized. */\n    minimizedReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the original commit associated with the comment. */\n    originalCommit?: Maybe<Commit>;\n    /** The original line index in the diff to which the comment applies. */\n    originalPosition: Scalars[\"Int\"][\"output\"];\n    /** Identifies when the comment body is outdated */\n    outdated: Scalars[\"Boolean\"][\"output\"];\n    /** The path to which the comment applies. */\n    path: Scalars[\"String\"][\"output\"];\n    /** The line index in the diff to which the comment applies. */\n    position?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The pull request associated with this review comment. */\n    pullRequest: PullRequest;\n    /** The pull request review associated with this review comment. */\n    pullRequestReview?: Maybe<PullRequestReview>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The comment this is a reply to. */\n    replyTo?: Maybe<PullRequestReviewComment>;\n    /** The repository associated with this node. */\n    repository: Repository;\n    /** The HTTP path permalink for this review comment. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the state of the comment. */\n    state: PullRequestReviewCommentState;\n    /** Identifies when the comment was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL permalink for this review comment. */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can minimize this object. */\n    viewerCanMinimize: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for PullRequestReviewComment. */\nexport type PullRequestReviewCommentConnection = {\n  __typename?: \"PullRequestReviewCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewCommentEdge = {\n  __typename?: \"PullRequestReviewCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewComment>;\n};\n\n/** The possible states of a pull request review comment. */\nexport enum PullRequestReviewCommentState {\n  /** A comment that is part of a pending review */\n  Pending = \"PENDING\",\n  /** A comment that is part of a submitted review */\n  Submitted = \"SUBMITTED\",\n}\n\n/** The connection type for PullRequestReview. */\nexport type PullRequestReviewConnection = {\n  __typename?: \"PullRequestReviewConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepository = {\n  __typename?: \"PullRequestReviewContributionsByRepository\";\n  /** The pull request review contributions. */\n  contributions: CreatedPullRequestReviewContributionConnection;\n  /** The repository in which the pull request reviews were made. */\n  repository: Repository;\n};\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** The review status of a pull request. */\nexport enum PullRequestReviewDecision {\n  /** The pull request has received an approving review. */\n  Approved = \"APPROVED\",\n  /** Changes have been requested on the pull request. */\n  ChangesRequested = \"CHANGES_REQUESTED\",\n  /** A review is required before the pull request can be merged. */\n  ReviewRequired = \"REVIEW_REQUIRED\",\n}\n\n/** An edge in a connection. */\nexport type PullRequestReviewEdge = {\n  __typename?: \"PullRequestReviewEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReview>;\n};\n\n/** The possible events to perform on a pull request review. */\nexport enum PullRequestReviewEvent {\n  /** Submit feedback and approve merging these changes. */\n  Approve = \"APPROVE\",\n  /** Submit general feedback without explicit approval. */\n  Comment = \"COMMENT\",\n  /** Dismiss review so it now longer effects merging. */\n  Dismiss = \"DISMISS\",\n  /** Submit feedback that must be addressed before merging. */\n  RequestChanges = \"REQUEST_CHANGES\",\n}\n\n/** The possible states of a pull request review. */\nexport enum PullRequestReviewState {\n  /** A review allowing the pull request to merge. */\n  Approved = \"APPROVED\",\n  /** A review blocking the pull request from merging. */\n  ChangesRequested = \"CHANGES_REQUESTED\",\n  /** An informational review. */\n  Commented = \"COMMENTED\",\n  /** A review that has been dismissed. */\n  Dismissed = \"DISMISSED\",\n  /** A review that has not yet been submitted. */\n  Pending = \"PENDING\",\n}\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThread = Node & {\n  __typename?: \"PullRequestReviewThread\";\n  /** A list of pull request comments associated with the thread. */\n  comments: PullRequestReviewCommentConnection;\n  /** The side of the diff on which this thread was placed. */\n  diffSide: DiffSide;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether or not the thread has been collapsed (resolved) */\n  isCollapsed: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates whether this thread was outdated by newer changes. */\n  isOutdated: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this thread has been resolved */\n  isResolved: Scalars[\"Boolean\"][\"output\"];\n  /** The line in the file to which this thread refers */\n  line?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The original line in the file to which this thread refers. */\n  originalLine?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The original start line in the file to which this thread refers (multi-line only). */\n  originalStartLine?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Identifies the file path of this thread. */\n  path: Scalars[\"String\"][\"output\"];\n  /** Identifies the pull request associated with this thread. */\n  pullRequest: PullRequest;\n  /** Identifies the repository associated with this thread. */\n  repository: Repository;\n  /** The user who resolved this thread */\n  resolvedBy?: Maybe<User>;\n  /** The side of the diff that the first line of the thread starts on (multi-line only) */\n  startDiffSide?: Maybe<DiffSide>;\n  /** The start line in the file to which this thread refers (multi-line only) */\n  startLine?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Indicates whether the current viewer can reply to this thread. */\n  viewerCanReply: Scalars[\"Boolean\"][\"output\"];\n  /** Whether or not the viewer can resolve this thread */\n  viewerCanResolve: Scalars[\"Boolean\"][\"output\"];\n  /** Whether or not the viewer can unresolve this thread */\n  viewerCanUnresolve: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThreadCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  skip?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Review comment threads for a pull request review. */\nexport type PullRequestReviewThreadConnection = {\n  __typename?: \"PullRequestReviewThreadConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewThreadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewThread>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewThreadEdge = {\n  __typename?: \"PullRequestReviewThreadEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\nexport type PullRequestRevisionMarker = {\n  __typename?: \"PullRequestRevisionMarker\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The last commit the viewer has seen. */\n  lastSeenCommit: Commit;\n  /** The pull request to which the marker belongs. */\n  pullRequest: PullRequest;\n};\n\n/** The possible states of a pull request. */\nexport enum PullRequestState {\n  /** A pull request that has been closed without being merged. */\n  Closed = \"CLOSED\",\n  /** A pull request that has been closed by being merged. */\n  Merged = \"MERGED\",\n  /** A pull request that is still open. */\n  Open = \"OPEN\",\n}\n\n/** A repository pull request template. */\nexport type PullRequestTemplate = {\n  __typename?: \"PullRequestTemplate\";\n  /** The body of the template */\n  body?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The filename of the template */\n  filename?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository the template belongs to */\n  repository: Repository;\n};\n\n/** The connection type for PullRequestTimelineItem. */\nexport type PullRequestTimelineConnection = {\n  __typename?: \"PullRequestTimelineConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItem =\n  | AssignedEvent\n  | BaseRefDeletedEvent\n  | BaseRefForcePushedEvent\n  | ClosedEvent\n  | Commit\n  | CommitCommentThread\n  | CrossReferencedEvent\n  | DemilestonedEvent\n  | DeployedEvent\n  | DeploymentEnvironmentChangedEvent\n  | HeadRefDeletedEvent\n  | HeadRefForcePushedEvent\n  | HeadRefRestoredEvent\n  | IssueComment\n  | LabeledEvent\n  | LockedEvent\n  | MergedEvent\n  | MilestonedEvent\n  | PullRequestReview\n  | PullRequestReviewComment\n  | PullRequestReviewThread\n  | ReferencedEvent\n  | RenamedTitleEvent\n  | ReopenedEvent\n  | ReviewDismissedEvent\n  | ReviewRequestRemovedEvent\n  | ReviewRequestedEvent\n  | SubscribedEvent\n  | UnassignedEvent\n  | UnlabeledEvent\n  | UnlockedEvent\n  | UnsubscribedEvent\n  | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemEdge = {\n  __typename?: \"PullRequestTimelineItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItem>;\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItems =\n  | AddedToProjectEvent\n  | AssignedEvent\n  | AutoMergeDisabledEvent\n  | AutoMergeEnabledEvent\n  | AutoRebaseEnabledEvent\n  | AutoSquashEnabledEvent\n  | AutomaticBaseChangeFailedEvent\n  | AutomaticBaseChangeSucceededEvent\n  | BaseRefChangedEvent\n  | BaseRefDeletedEvent\n  | BaseRefForcePushedEvent\n  | ClosedEvent\n  | CommentDeletedEvent\n  | ConnectedEvent\n  | ConvertToDraftEvent\n  | ConvertedNoteToIssueEvent\n  | ConvertedToDiscussionEvent\n  | CrossReferencedEvent\n  | DemilestonedEvent\n  | DeployedEvent\n  | DeploymentEnvironmentChangedEvent\n  | DisconnectedEvent\n  | HeadRefDeletedEvent\n  | HeadRefForcePushedEvent\n  | HeadRefRestoredEvent\n  | IssueComment\n  | LabeledEvent\n  | LockedEvent\n  | MarkedAsDuplicateEvent\n  | MentionedEvent\n  | MergedEvent\n  | MilestonedEvent\n  | MovedColumnsInProjectEvent\n  | PinnedEvent\n  | PullRequestCommit\n  | PullRequestCommitCommentThread\n  | PullRequestReview\n  | PullRequestReviewThread\n  | PullRequestRevisionMarker\n  | ReadyForReviewEvent\n  | ReferencedEvent\n  | RemovedFromProjectEvent\n  | RenamedTitleEvent\n  | ReopenedEvent\n  | ReviewDismissedEvent\n  | ReviewRequestRemovedEvent\n  | ReviewRequestedEvent\n  | SubscribedEvent\n  | TransferredEvent\n  | UnassignedEvent\n  | UnlabeledEvent\n  | UnlockedEvent\n  | UnmarkedAsDuplicateEvent\n  | UnpinnedEvent\n  | UnsubscribedEvent\n  | UserBlockedEvent;\n\n/** The connection type for PullRequestTimelineItems. */\nexport type PullRequestTimelineItemsConnection = {\n  __typename?: \"PullRequestTimelineItemsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars[\"Int\"][\"output\"];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars[\"Int\"][\"output\"];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemsEdge = {\n  __typename?: \"PullRequestTimelineItemsEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum PullRequestTimelineItemsItemType {\n  /** Represents an 'added_to_merge_queue' event on a given pull request. */\n  AddedToMergeQueueEvent = \"ADDED_TO_MERGE_QUEUE_EVENT\",\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = \"ADDED_TO_PROJECT_EVENT\",\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = \"ASSIGNED_EVENT\",\n  /** Represents a 'automatic_base_change_failed' event on a given pull request. */\n  AutomaticBaseChangeFailedEvent = \"AUTOMATIC_BASE_CHANGE_FAILED_EVENT\",\n  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\n  AutomaticBaseChangeSucceededEvent = \"AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT\",\n  /** Represents a 'auto_merge_disabled' event on a given pull request. */\n  AutoMergeDisabledEvent = \"AUTO_MERGE_DISABLED_EVENT\",\n  /** Represents a 'auto_merge_enabled' event on a given pull request. */\n  AutoMergeEnabledEvent = \"AUTO_MERGE_ENABLED_EVENT\",\n  /** Represents a 'auto_rebase_enabled' event on a given pull request. */\n  AutoRebaseEnabledEvent = \"AUTO_REBASE_ENABLED_EVENT\",\n  /** Represents a 'auto_squash_enabled' event on a given pull request. */\n  AutoSquashEnabledEvent = \"AUTO_SQUASH_ENABLED_EVENT\",\n  /** Represents a 'base_ref_changed' event on a given issue or pull request. */\n  BaseRefChangedEvent = \"BASE_REF_CHANGED_EVENT\",\n  /** Represents a 'base_ref_deleted' event on a given pull request. */\n  BaseRefDeletedEvent = \"BASE_REF_DELETED_EVENT\",\n  /** Represents a 'base_ref_force_pushed' event on a given pull request. */\n  BaseRefForcePushedEvent = \"BASE_REF_FORCE_PUSHED_EVENT\",\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = \"CLOSED_EVENT\",\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = \"COMMENT_DELETED_EVENT\",\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = \"CONNECTED_EVENT\",\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = \"CONVERTED_NOTE_TO_ISSUE_EVENT\",\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = \"CONVERTED_TO_DISCUSSION_EVENT\",\n  /** Represents a 'convert_to_draft' event on a given pull request. */\n  ConvertToDraftEvent = \"CONVERT_TO_DRAFT_EVENT\",\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = \"CROSS_REFERENCED_EVENT\",\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = \"DEMILESTONED_EVENT\",\n  /** Represents a 'deployed' event on a given pull request. */\n  DeployedEvent = \"DEPLOYED_EVENT\",\n  /** Represents a 'deployment_environment_changed' event on a given pull request. */\n  DeploymentEnvironmentChangedEvent = \"DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT\",\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = \"DISCONNECTED_EVENT\",\n  /** Represents a 'head_ref_deleted' event on a given pull request. */\n  HeadRefDeletedEvent = \"HEAD_REF_DELETED_EVENT\",\n  /** Represents a 'head_ref_force_pushed' event on a given pull request. */\n  HeadRefForcePushedEvent = \"HEAD_REF_FORCE_PUSHED_EVENT\",\n  /** Represents a 'head_ref_restored' event on a given pull request. */\n  HeadRefRestoredEvent = \"HEAD_REF_RESTORED_EVENT\",\n  /** Represents a comment on an Issue. */\n  IssueComment = \"ISSUE_COMMENT\",\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = \"LABELED_EVENT\",\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = \"LOCKED_EVENT\",\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = \"MARKED_AS_DUPLICATE_EVENT\",\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = \"MENTIONED_EVENT\",\n  /** Represents a 'merged' event on a given pull request. */\n  MergedEvent = \"MERGED_EVENT\",\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = \"MILESTONED_EVENT\",\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = \"MOVED_COLUMNS_IN_PROJECT_EVENT\",\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = \"PINNED_EVENT\",\n  /** Represents a Git commit part of a pull request. */\n  PullRequestCommit = \"PULL_REQUEST_COMMIT\",\n  /** Represents a commit comment thread part of a pull request. */\n  PullRequestCommitCommentThread = \"PULL_REQUEST_COMMIT_COMMENT_THREAD\",\n  /** A review object for a given pull request. */\n  PullRequestReview = \"PULL_REQUEST_REVIEW\",\n  /** A threaded list of comments for a given pull request. */\n  PullRequestReviewThread = \"PULL_REQUEST_REVIEW_THREAD\",\n  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\n  PullRequestRevisionMarker = \"PULL_REQUEST_REVISION_MARKER\",\n  /** Represents a 'ready_for_review' event on a given pull request. */\n  ReadyForReviewEvent = \"READY_FOR_REVIEW_EVENT\",\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = \"REFERENCED_EVENT\",\n  /** Represents a 'removed_from_merge_queue' event on a given pull request. */\n  RemovedFromMergeQueueEvent = \"REMOVED_FROM_MERGE_QUEUE_EVENT\",\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = \"REMOVED_FROM_PROJECT_EVENT\",\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = \"RENAMED_TITLE_EVENT\",\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = \"REOPENED_EVENT\",\n  /** Represents a 'review_dismissed' event on a given issue or pull request. */\n  ReviewDismissedEvent = \"REVIEW_DISMISSED_EVENT\",\n  /** Represents an 'review_requested' event on a given pull request. */\n  ReviewRequestedEvent = \"REVIEW_REQUESTED_EVENT\",\n  /** Represents an 'review_request_removed' event on a given pull request. */\n  ReviewRequestRemovedEvent = \"REVIEW_REQUEST_REMOVED_EVENT\",\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = \"SUBSCRIBED_EVENT\",\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = \"TRANSFERRED_EVENT\",\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = \"UNASSIGNED_EVENT\",\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = \"UNLABELED_EVENT\",\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = \"UNLOCKED_EVENT\",\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = \"UNMARKED_AS_DUPLICATE_EVENT\",\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = \"UNPINNED_EVENT\",\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = \"UNSUBSCRIBED_EVENT\",\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = \"USER_BLOCKED_EVENT\",\n}\n\n/** The possible target states when updating a pull request. */\nexport enum PullRequestUpdateState {\n  /** A pull request that has been closed without being merged. */\n  Closed = \"CLOSED\",\n  /** A pull request that is still open. */\n  Open = \"OPEN\",\n}\n\n/** A Git push. */\nexport type Push = Node & {\n  __typename?: \"Push\";\n  id: Scalars[\"ID\"][\"output\"];\n  /** The SHA after the push */\n  nextSha?: Maybe<Scalars[\"GitObjectID\"][\"output\"]>;\n  /** The permalink for this push. */\n  permalink: Scalars[\"URI\"][\"output\"];\n  /** The SHA before the push */\n  previousSha?: Maybe<Scalars[\"GitObjectID\"][\"output\"]>;\n  /** The actor who pushed */\n  pusher: Actor;\n  /** The repository that was pushed to */\n  repository: Repository;\n};\n\n/** A team, user or app who has the ability to push to a protected branch. */\nexport type PushAllowance = Node & {\n  __typename?: \"PushAllowance\";\n  /** The actor that can push. */\n  actor?: Maybe<PushAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Types that can be an actor. */\nexport type PushAllowanceActor = App | Team | User;\n\n/** The connection type for PushAllowance. */\nexport type PushAllowanceConnection = {\n  __typename?: \"PushAllowanceConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type PushAllowanceEdge = {\n  __typename?: \"PushAllowanceEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<PushAllowance>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type Query = {\n  __typename?: \"Query\";\n  /** Look up a code of conduct by its key */\n  codeOfConduct?: Maybe<CodeOfConduct>;\n  /** Look up a code of conduct by its key */\n  codesOfConduct?: Maybe<Array<Maybe<CodeOfConduct>>>;\n  /** Look up an enterprise by URL slug. */\n  enterprise?: Maybe<Enterprise>;\n  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */\n  enterpriseAdministratorInvitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up a pending enterprise administrator invitation by invitation token. */\n  enterpriseAdministratorInvitationByToken?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up an open source license by its key */\n  license?: Maybe<License>;\n  /** Return a list of known open source licenses */\n  licenses: Array<Maybe<License>>;\n  /** Get alphabetically sorted list of Marketplace categories */\n  marketplaceCategories: Array<MarketplaceCategory>;\n  /** Look up a Marketplace category by its slug. */\n  marketplaceCategory?: Maybe<MarketplaceCategory>;\n  /** Look up a single Marketplace listing */\n  marketplaceListing?: Maybe<MarketplaceListing>;\n  /** Look up Marketplace listings */\n  marketplaceListings: MarketplaceListingConnection;\n  /** Return information about the GitHub instance */\n  meta: GitHubMetadata;\n  /** Fetches an object given its ID. */\n  node?: Maybe<Node>;\n  /** Lookup nodes by a list of IDs. */\n  nodes: Array<Maybe<Node>>;\n  /** Lookup a organization by login. */\n  organization?: Maybe<Organization>;\n  /** The client's rate limit information. */\n  rateLimit?: Maybe<RateLimit>;\n  /** Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object */\n  relay: Query;\n  /** Lookup a given repository by the owner and repository name. */\n  repository?: Maybe<Repository>;\n  /** Lookup a repository owner (ie. either a User or an Organization) by login. */\n  repositoryOwner?: Maybe<RepositoryOwner>;\n  /** Lookup resource by a URL. */\n  resource?: Maybe<UniformResourceLocatable>;\n  /** Perform a search across resources. */\n  search: SearchResultItemConnection;\n  /** GitHub Security Advisories */\n  securityAdvisories: SecurityAdvisoryConnection;\n  /** Fetch a Security Advisory by its GHSA ID */\n  securityAdvisory?: Maybe<SecurityAdvisory>;\n  /** Software Vulnerabilities documented by GitHub Security Advisories */\n  securityVulnerabilities: SecurityVulnerabilityConnection;\n  /** Users and organizations who can be sponsored via GitHub Sponsors. */\n  sponsorables: SponsorableItemConnection;\n  /** Look up a topic by name. */\n  topic?: Maybe<Topic>;\n  /** Lookup a user by login. */\n  user?: Maybe<User>;\n  /** The currently authenticated user. */\n  viewer: User;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryCodeOfConductArgs = {\n  key: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseArgs = {\n  invitationToken?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  slug: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationArgs = {\n  enterpriseSlug: Scalars[\"String\"][\"input\"];\n  role: EnterpriseAdministratorRole;\n  userLogin: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationByTokenArgs = {\n  invitationToken: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryLicenseArgs = {\n  key: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoriesArgs = {\n  excludeEmpty?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  excludeSubcategories?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  includeCategories?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoryArgs = {\n  slug: Scalars[\"String\"][\"input\"];\n  useTopicAliases?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingArgs = {\n  slug: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingsArgs = {\n  adminId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  allStates?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  categorySlug?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  organizationId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  primaryCategoryOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  slugs?: InputMaybe<Array<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  useTopicAliases?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  viewerCanAdmin?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  withFreeTrialsOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodeArgs = {\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodesArgs = {\n  ids: Array<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryOrganizationArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRateLimitArgs = {\n  dryRun?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  name: Scalars[\"String\"][\"input\"];\n  owner: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryOwnerArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryResourceArgs = {\n  url: Scalars[\"URI\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySearchArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query: Scalars[\"String\"][\"input\"];\n  type: SearchType;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  identifier?: InputMaybe<SecurityAdvisoryIdentifierFilter>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SecurityAdvisoryOrder>;\n  publishedSince?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  updatedSince?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoryArgs = {\n  ghsaId: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySponsorablesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  dependencyEcosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  ecosystem?: InputMaybe<DependencyGraphEcosystem>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  onlyDependencies?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorableOrder>;\n  orgLoginForDependencies?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryTopicArgs = {\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryUserArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents the client's rate limit. */\nexport type RateLimit = {\n  __typename?: \"RateLimit\";\n  /** The point cost for the current query counting against the rate limit. */\n  cost: Scalars[\"Int\"][\"output\"];\n  /** The maximum number of points the client is permitted to consume in a 60 minute window. */\n  limit: Scalars[\"Int\"][\"output\"];\n  /** The maximum number of nodes this query may return */\n  nodeCount: Scalars[\"Int\"][\"output\"];\n  /** The number of points remaining in the current rate limit window. */\n  remaining: Scalars[\"Int\"][\"output\"];\n  /** The time at which the current rate limit window resets in UTC epoch seconds. */\n  resetAt: Scalars[\"DateTime\"][\"output\"];\n  /** The number of points used in the current rate limit window. */\n  used: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a subject that can be reacted on. */\nexport type Reactable = {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** Can user react to this subject */\n  viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a subject that can be reacted on. */\nexport type ReactableReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** The connection type for User. */\nexport type ReactingUserConnection = {\n  __typename?: \"ReactingUserConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactingUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user that's made a reaction. */\nexport type ReactingUserEdge = {\n  __typename?: \"ReactingUserEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  node: User;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** An emoji reaction to a particular piece of content. */\nexport type Reaction = Node & {\n  __typename?: \"Reaction\";\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The reactable piece of content */\n  reactable: Reactable;\n  /** Identifies the user who created this reaction. */\n  user?: Maybe<User>;\n};\n\n/** A list of reactions that have been left on the subject. */\nexport type ReactionConnection = {\n  __typename?: \"ReactionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Emojis that can be attached to Issues, Pull Requests and Comments. */\nexport enum ReactionContent {\n  /** Represents the `:confused:` emoji. */\n  Confused = \"CONFUSED\",\n  /** Represents the `:eyes:` emoji. */\n  Eyes = \"EYES\",\n  /** Represents the `:heart:` emoji. */\n  Heart = \"HEART\",\n  /** Represents the `:hooray:` emoji. */\n  Hooray = \"HOORAY\",\n  /** Represents the `:laugh:` emoji. */\n  Laugh = \"LAUGH\",\n  /** Represents the `:rocket:` emoji. */\n  Rocket = \"ROCKET\",\n  /** Represents the `:-1:` emoji. */\n  ThumbsDown = \"THUMBS_DOWN\",\n  /** Represents the `:+1:` emoji. */\n  ThumbsUp = \"THUMBS_UP\",\n}\n\n/** An edge in a connection. */\nexport type ReactionEdge = {\n  __typename?: \"ReactionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Reaction>;\n};\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroup = {\n  __typename?: \"ReactionGroup\";\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies when the reaction was created. */\n  createdAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** Reactors to the reaction subject with the emotion represented by this reaction group. */\n  reactors: ReactorConnection;\n  /** The subject that was reacted to. */\n  subject: Reactable;\n  /**\n   * Users who have reacted to the reaction subject with the emotion represented by this reaction group\n   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.\n   */\n  users: ReactingUserConnection;\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupReactorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupUsersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Ways in which lists of reactions can be ordered upon return. */\nexport type ReactionOrder = {\n  /** The direction in which to order reactions by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order reactions by. */\n  field: ReactionOrderField;\n};\n\n/** A list of fields that reactions can be ordered by. */\nexport enum ReactionOrderField {\n  /** Allows ordering a list of reactions by when they were created. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Types that can be assigned to reactions. */\nexport type Reactor = Bot | Mannequin | Organization | User;\n\n/** The connection type for Reactor. */\nexport type ReactorConnection = {\n  __typename?: \"ReactorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reactor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents an author of a reaction. */\nexport type ReactorEdge = {\n  __typename?: \"ReactorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The author of the reaction. */\n  node: Reactor;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** Represents a 'ready_for_review' event on a given pull request. */\nexport type ReadyForReviewEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"ReadyForReviewEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** PullRequest referenced by event. */\n    pullRequest: PullRequest;\n    /** The HTTP path for this ready for review event. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this ready for review event. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** Represents a Git reference. */\nexport type Ref = Node & {\n  __typename?: \"Ref\";\n  /** A list of pull requests with this ref as the head ref. */\n  associatedPullRequests: PullRequestConnection;\n  /** Branch protection rules for this ref */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The ref name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */\n  prefix: Scalars[\"String\"][\"output\"];\n  /** Branch protection rules that are viewable by non-admins */\n  refUpdateRule?: Maybe<RefUpdateRule>;\n  /** The repository the ref belongs to. */\n  repository: Repository;\n  /** The object the ref points to. Returns null when object does not exist. */\n  target?: Maybe<GitObject>;\n};\n\n/** Represents a Git reference. */\nexport type RefAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Ref. */\nexport type RefConnection = {\n  __typename?: \"RefConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RefEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Ref>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type RefEdge = {\n  __typename?: \"RefEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Ref>;\n};\n\n/** Ways in which lists of git refs can be ordered upon return. */\nexport type RefOrder = {\n  /** The direction in which to order refs by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order refs by. */\n  field: RefOrderField;\n};\n\n/** Properties by which ref connections can be ordered. */\nexport enum RefOrderField {\n  /** Order refs by their alphanumeric name */\n  Alphabetical = \"ALPHABETICAL\",\n  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */\n  TagCommitDate = \"TAG_COMMIT_DATE\",\n}\n\n/** A ref update */\nexport type RefUpdate = {\n  /** The value this ref should be updated to. */\n  afterOid: Scalars[\"GitObjectID\"][\"input\"];\n  /** The value this ref needs to point to before the update. */\n  beforeOid?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n  /** Force a non fast-forward update. */\n  force?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */\n  name: Scalars[\"GitRefname\"][\"input\"];\n};\n\n/** A ref update rules for a viewer. */\nexport type RefUpdateRule = {\n  __typename?: \"RefUpdateRule\";\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars[\"Boolean\"][\"output\"];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars[\"Boolean\"][\"output\"];\n  /** Can matching branches be created. */\n  blocksCreations: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars[\"String\"][\"output\"];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars[\"String\"][\"output\"]>>>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars[\"Boolean\"][\"output\"];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars[\"Boolean\"][\"output\"];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars[\"Boolean\"][\"output\"];\n  /** Are commits required to be signed. */\n  requiresSignatures: Scalars[\"Boolean\"][\"output\"];\n  /** Is the viewer allowed to dismiss reviews. */\n  viewerAllowedToDismissReviews: Scalars[\"Boolean\"][\"output\"];\n  /** Can the viewer push to the branch */\n  viewerCanPush: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a 'referenced' event on a given `ReferencedSubject`. */\nexport type ReferencedEvent = Node & {\n  __typename?: \"ReferencedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the commit associated with the 'referenced' event. */\n  commit?: Maybe<Commit>;\n  /** Identifies the repository associated with the 'referenced' event. */\n  commitRepository: Repository;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */\n  isDirectReference: Scalars[\"Boolean\"][\"output\"];\n  /** Object referenced by event. */\n  subject: ReferencedSubject;\n};\n\n/** Any referencable object */\nexport type ReferencedSubject = Issue | PullRequest;\n\n/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {\n  __typename?: \"RegenerateEnterpriseIdentityProviderRecoveryCodesPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RegenerateVerifiableDomainToken */\nexport type RegenerateVerifiableDomainTokenInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the verifiable domain to regenerate the verification token of. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RegenerateVerifiableDomainToken */\nexport type RegenerateVerifiableDomainTokenPayload = {\n  __typename?: \"RegenerateVerifiableDomainTokenPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The verification token that was generated. */\n  verificationToken?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of RejectDeployments */\nexport type RejectDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Optional comment for rejecting deployments */\n  comment?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RejectDeployments */\nexport type RejectDeploymentsPayload = {\n  __typename?: \"RejectDeploymentsPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** A release contains the content for a release. */\nexport type Release = Node &\n  Reactable &\n  UniformResourceLocatable & {\n    __typename?: \"Release\";\n    /** The author of the release */\n    author?: Maybe<User>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The description of the release. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The description of this release rendered to HTML. */\n    descriptionHTML?: Maybe<Scalars[\"HTML\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether or not the release is a draft */\n    isDraft: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the release is the latest releast */\n    isLatest: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the release is a prerelease */\n    isPrerelease: Scalars[\"Boolean\"][\"output\"];\n    /** A list of users mentioned in the release description */\n    mentions?: Maybe<UserConnection>;\n    /** The title of the release. */\n    name?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the date and time when the release was created. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** List of releases assets which are dependent on this release. */\n    releaseAssets: ReleaseAssetConnection;\n    /** The repository that the release belongs to. */\n    repository: Repository;\n    /** The HTTP path for this issue */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** A description of the release, rendered to HTML without any links in it. */\n    shortDescriptionHTML?: Maybe<Scalars[\"HTML\"][\"output\"]>;\n    /** The Git tag the release points to */\n    tag?: Maybe<Ref>;\n    /** The tag commit for this release. */\n    tagCommit?: Maybe<Commit>;\n    /** The name of the release's Git tag */\n    tagName: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this issue */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A release contains the content for a release. */\nexport type ReleaseMentionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A release contains the content for a release. */\nexport type ReleaseReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A release contains the content for a release. */\nexport type ReleaseReleaseAssetsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A release contains the content for a release. */\nexport type ReleaseShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A release asset contains the content for a release asset. */\nexport type ReleaseAsset = Node & {\n  __typename?: \"ReleaseAsset\";\n  /** The asset's content-type */\n  contentType: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The number of times this asset was downloaded */\n  downloadCount: Scalars[\"Int\"][\"output\"];\n  /** Identifies the URL where you can download the release asset via the browser. */\n  downloadUrl: Scalars[\"URI\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the title of the release asset. */\n  name: Scalars[\"String\"][\"output\"];\n  /** Release that the asset is associated with */\n  release?: Maybe<Release>;\n  /** The size (in bytes) of the asset */\n  size: Scalars[\"Int\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user that performed the upload */\n  uploadedBy: User;\n  /** Identifies the URL of the release asset. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** The connection type for ReleaseAsset. */\nexport type ReleaseAssetConnection = {\n  __typename?: \"ReleaseAssetConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseAssetEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReleaseAsset>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ReleaseAssetEdge = {\n  __typename?: \"ReleaseAssetEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReleaseAsset>;\n};\n\n/** The connection type for Release. */\nexport type ReleaseConnection = {\n  __typename?: \"ReleaseConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Release>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ReleaseEdge = {\n  __typename?: \"ReleaseEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Release>;\n};\n\n/** Ways in which lists of releases can be ordered upon return. */\nexport type ReleaseOrder = {\n  /** The direction in which to order releases by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order releases by. */\n  field: ReleaseOrderField;\n};\n\n/** Properties by which release connections can be ordered. */\nexport enum ReleaseOrderField {\n  /** Order releases by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order releases alphabetically by name */\n  Name = \"NAME\",\n}\n\n/** Autogenerated input type of RemoveAssigneesFromAssignable */\nexport type RemoveAssigneesFromAssignableInput = {\n  /** The id of the assignable object to remove assignees from. */\n  assignableId: Scalars[\"ID\"][\"input\"];\n  /** The id of users to remove as assignees. */\n  assigneeIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of RemoveAssigneesFromAssignable */\nexport type RemoveAssigneesFromAssignablePayload = {\n  __typename?: \"RemoveAssigneesFromAssignablePayload\";\n  /** The item that was unassigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseAdmin */\nexport type RemoveEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Enterprise ID from which to remove the administrator. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of the user to remove as an administrator. */\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveEnterpriseAdmin */\nexport type RemoveEnterpriseAdminPayload = {\n  __typename?: \"RemoveEnterpriseAdminPayload\";\n  /** The user who was removed as an administrator. */\n  admin?: Maybe<User>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of removing an administrator. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseIdentityProvider */\nexport type RemoveEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise from which to remove the identity provider. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveEnterpriseIdentityProvider */\nexport type RemoveEnterpriseIdentityProviderPayload = {\n  __typename?: \"RemoveEnterpriseIdentityProviderPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The identity provider that was removed from the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseOrganization */\nexport type RemoveEnterpriseOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise from which the organization should be removed. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the organization to remove from the enterprise. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveEnterpriseOrganization */\nexport type RemoveEnterpriseOrganizationPayload = {\n  __typename?: \"RemoveEnterpriseOrganizationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was removed from the enterprise. */\n  organization?: Maybe<Organization>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */\nexport type RemoveEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of a member who will lose the support entitlement. */\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveEnterpriseSupportEntitlement */\nexport type RemoveEnterpriseSupportEntitlementPayload = {\n  __typename?: \"RemoveEnterpriseSupportEntitlementPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A message confirming the result of removing the support entitlement. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of RemoveLabelsFromLabelable */\nexport type RemoveLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ids of labels to remove. */\n  labelIds: Array<Scalars[\"ID\"][\"input\"]>;\n  /** The id of the Labelable to remove labels from. */\n  labelableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveLabelsFromLabelable */\nexport type RemoveLabelsFromLabelablePayload = {\n  __typename?: \"RemoveLabelsFromLabelablePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The Labelable the labels were removed from. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of RemoveOutsideCollaborator */\nexport type RemoveOutsideCollaboratorInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the organization to remove the outside collaborator from. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the outside collaborator to remove. */\n  userId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveOutsideCollaborator */\nexport type RemoveOutsideCollaboratorPayload = {\n  __typename?: \"RemoveOutsideCollaboratorPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The user that was removed as an outside collaborator. */\n  removedUser?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveReaction */\nexport type RemoveReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the emoji reaction to remove. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveReaction */\nexport type RemoveReactionPayload = {\n  __typename?: \"RemoveReactionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of RemoveStar */\nexport type RemoveStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Starrable ID to unstar. */\n  starrableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveStar */\nexport type RemoveStarPayload = {\n  __typename?: \"RemoveStarPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of RemoveUpvote */\nexport type RemoveUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion or comment to remove upvote. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RemoveUpvote */\nexport type RemoveUpvotePayload = {\n  __typename?: \"RemoveUpvotePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Represents a 'removed_from_project' event on a given issue or pull request. */\nexport type RemovedFromProjectEvent = Node & {\n  __typename?: \"RemovedFromProjectEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars[\"String\"][\"output\"];\n};\n\n/** Represents a 'renamed' event on a given issue or pull request */\nexport type RenamedTitleEvent = Node & {\n  __typename?: \"RenamedTitleEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the current title of the issue or pull request. */\n  currentTitle: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the previous title of the issue or pull request. */\n  previousTitle: Scalars[\"String\"][\"output\"];\n  /** Subject that was renamed. */\n  subject: RenamedTitleSubject;\n};\n\n/** An object which has a renamable title */\nexport type RenamedTitleSubject = Issue | PullRequest;\n\n/** Autogenerated input type of ReopenIssue */\nexport type ReopenIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the issue to be opened. */\n  issueId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ReopenIssue */\nexport type ReopenIssuePayload = {\n  __typename?: \"ReopenIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue that was opened. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ReopenPullRequest */\nexport type ReopenPullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the pull request to be reopened. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ReopenPullRequest */\nexport type ReopenPullRequestPayload = {\n  __typename?: \"ReopenPullRequestPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that was reopened. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'reopened' event on any `Closable`. */\nexport type ReopenedEvent = Node & {\n  __typename?: \"ReopenedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Object that was reopened. */\n  closable: Closable;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Audit log entry for a repo.access event. */\nexport type RepoAccessAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoAccessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoAccessAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoAccessAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.add_member event. */\nexport type RepoAddMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoAddMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoAddMemberAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoAddMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.add_topic event. */\nexport type RepoAddTopicAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData &\n  TopicAuditEntryData & {\n    __typename?: \"RepoAddTopicAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The name of the topic added to the repository */\n    topic?: Maybe<Topic>;\n    /** The name of the topic added to the repository */\n    topicName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.archived event. */\nexport type RepoArchivedAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoArchivedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoArchivedAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoArchivedAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.change_merge_setting event. */\nexport type RepoChangeMergeSettingAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoChangeMergeSettingAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the change was to enable (true) or disable (false) the merge type */\n    isEnabled?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The merge method affected by the change */\n    mergeType?: Maybe<RepoChangeMergeSettingAuditEntryMergeType>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The merge options available for pull requests to this repository. */\nexport enum RepoChangeMergeSettingAuditEntryMergeType {\n  /** The pull request is added to the base branch in a merge commit. */\n  Merge = \"MERGE\",\n  /** Commits from the pull request are added onto the base branch individually without a merge commit. */\n  Rebase = \"REBASE\",\n  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */\n  Squash = \"SQUASH\",\n}\n\n/** Audit log entry for a repo.config.disable_anonymous_git_access event. */\nexport type RepoConfigDisableAnonymousGitAccessAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigDisableAnonymousGitAccessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.disable_collaborators_only event. */\nexport type RepoConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigDisableCollaboratorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.disable_contributors_only event. */\nexport type RepoConfigDisableContributorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigDisableContributorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */\nexport type RepoConfigDisableSockpuppetDisallowedAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigDisableSockpuppetDisallowedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.enable_anonymous_git_access event. */\nexport type RepoConfigEnableAnonymousGitAccessAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigEnableAnonymousGitAccessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.enable_collaborators_only event. */\nexport type RepoConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigEnableCollaboratorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.enable_contributors_only event. */\nexport type RepoConfigEnableContributorsOnlyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigEnableContributorsOnlyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */\nexport type RepoConfigEnableSockpuppetDisallowedAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigEnableSockpuppetDisallowedAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.lock_anonymous_git_access event. */\nexport type RepoConfigLockAnonymousGitAccessAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigLockAnonymousGitAccessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */\nexport type RepoConfigUnlockAnonymousGitAccessAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoConfigUnlockAnonymousGitAccessAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repo.create event. */\nexport type RepoCreateAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoCreateAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The name of the parent repository for this forked repository. */\n    forkParentName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The name of the root repository for this network. */\n    forkSourceName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoCreateAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoCreateAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.destroy event. */\nexport type RepoDestroyAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoDestroyAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoDestroyAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoDestroyAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.remove_member event. */\nexport type RepoRemoveMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData & {\n    __typename?: \"RepoRemoveMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The visibility of the repository */\n    visibility?: Maybe<RepoRemoveMemberAuditEntryVisibility>;\n  };\n\n/** The privacy of a repository */\nexport enum RepoRemoveMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repo.remove_topic event. */\nexport type RepoRemoveTopicAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData &\n  TopicAuditEntryData & {\n    __typename?: \"RepoRemoveTopicAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The name of the topic added to the repository */\n    topic?: Maybe<Topic>;\n    /** The name of the topic added to the repository */\n    topicName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The reasons a piece of content can be reported or minimized. */\nexport enum ReportedContentClassifiers {\n  /** An abusive or harassing piece of content */\n  Abuse = \"ABUSE\",\n  /** A duplicated piece of content */\n  Duplicate = \"DUPLICATE\",\n  /** An irrelevant piece of content */\n  OffTopic = \"OFF_TOPIC\",\n  /** An outdated piece of content */\n  Outdated = \"OUTDATED\",\n  /** The content has been resolved */\n  Resolved = \"RESOLVED\",\n  /** A spammy piece of content */\n  Spam = \"SPAM\",\n}\n\n/** A repository contains the content for a project. */\nexport type Repository = Node &\n  PackageOwner &\n  ProjectOwner &\n  RepositoryInfo &\n  Starrable &\n  Subscribable &\n  UniformResourceLocatable & {\n    __typename?: \"Repository\";\n    /** A list of users that can be assigned to issues in this repository. */\n    assignableUsers: UserConnection;\n    /** Whether or not Auto-merge can be enabled on pull requests in this repository. */\n    autoMergeAllowed: Scalars[\"Boolean\"][\"output\"];\n    /** A list of branch protection rules for this repository. */\n    branchProtectionRules: BranchProtectionRuleConnection;\n    /** Returns the code of conduct for this repository */\n    codeOfConduct?: Maybe<CodeOfConduct>;\n    /** Information extracted from the repository's `CODEOWNERS` file. */\n    codeowners?: Maybe<RepositoryCodeowners>;\n    /** A list of collaborators associated with the repository. */\n    collaborators?: Maybe<RepositoryCollaboratorConnection>;\n    /** A list of commit comments associated with the repository. */\n    commitComments: CommitCommentConnection;\n    /** Returns a list of contact links associated to the repository */\n    contactLinks?: Maybe<Array<RepositoryContactLink>>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The Ref associated with the repository's default branch. */\n    defaultBranchRef?: Maybe<Ref>;\n    /** Whether or not branches are automatically deleted when merged in this repository. */\n    deleteBranchOnMerge: Scalars[\"Boolean\"][\"output\"];\n    /** A list of dependency manifests contained in the repository */\n    dependencyGraphManifests?: Maybe<DependencyGraphManifestConnection>;\n    /** A list of deploy keys that are on this repository. */\n    deployKeys: DeployKeyConnection;\n    /** Deployments associated with the repository */\n    deployments: DeploymentConnection;\n    /** The description of the repository. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The description of the repository rendered to HTML. */\n    descriptionHTML: Scalars[\"HTML\"][\"output\"];\n    /** Returns a single discussion from the current repository by number. */\n    discussion?: Maybe<Discussion>;\n    /** A list of discussion categories that are available in the repository. */\n    discussionCategories: DiscussionCategoryConnection;\n    /** A list of discussions that have been opened in the repository. */\n    discussions: DiscussionConnection;\n    /** The number of kilobytes this repository occupies on disk. */\n    diskUsage?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** Returns a single active environment from the current repository by name. */\n    environment?: Maybe<Environment>;\n    /** A list of environments that are in this repository. */\n    environments: EnvironmentConnection;\n    /** Returns how many forks there are of this repository in the whole network. */\n    forkCount: Scalars[\"Int\"][\"output\"];\n    /** Whether this repository allows forks. */\n    forkingAllowed: Scalars[\"Boolean\"][\"output\"];\n    /** A list of direct forked repositories. */\n    forks: RepositoryConnection;\n    /** The funding links for this repository */\n    fundingLinks: Array<FundingLink>;\n    /** Indicates if the repository has issues feature enabled. */\n    hasIssuesEnabled: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates if the repository has the Projects feature enabled. */\n    hasProjectsEnabled: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates if the repository has wiki feature enabled. */\n    hasWikiEnabled: Scalars[\"Boolean\"][\"output\"];\n    /** The repository's URL. */\n    homepageUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The interaction ability settings for this repository. */\n    interactionAbility?: Maybe<RepositoryInteractionAbility>;\n    /** Indicates if the repository is unmaintained. */\n    isArchived: Scalars[\"Boolean\"][\"output\"];\n    /** Returns true if blank issue creation is allowed */\n    isBlankIssuesEnabled: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not this repository disabled. */\n    isDisabled: Scalars[\"Boolean\"][\"output\"];\n    /** Returns whether or not this repository is empty. */\n    isEmpty: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the repository is a fork. */\n    isFork: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n    isInOrganization: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates if the repository has been locked or not. */\n    isLocked: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the repository is a mirror. */\n    isMirror: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the repository is private or internal. */\n    isPrivate: Scalars[\"Boolean\"][\"output\"];\n    /** Returns true if this repository has a security policy */\n    isSecurityPolicyEnabled?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** Identifies if the repository is a template that can be used to generate new repositories. */\n    isTemplate: Scalars[\"Boolean\"][\"output\"];\n    /** Is this repository a user configuration repository? */\n    isUserConfigurationRepository: Scalars[\"Boolean\"][\"output\"];\n    /** Returns a single issue from the current repository by number. */\n    issue?: Maybe<Issue>;\n    /** Returns a single issue-like object from the current repository by number. */\n    issueOrPullRequest?: Maybe<IssueOrPullRequest>;\n    /** Returns a list of issue templates associated to the repository */\n    issueTemplates?: Maybe<Array<IssueTemplate>>;\n    /** A list of issues that have been opened in the repository. */\n    issues: IssueConnection;\n    /** Returns a single label by name */\n    label?: Maybe<Label>;\n    /** A list of labels associated with the repository. */\n    labels?: Maybe<LabelConnection>;\n    /** A list containing a breakdown of the language composition of the repository. */\n    languages?: Maybe<LanguageConnection>;\n    /** Get the latest release for the repository if one exists. */\n    latestRelease?: Maybe<Release>;\n    /** The license associated with the repository */\n    licenseInfo?: Maybe<License>;\n    /** The reason the repository has been locked. */\n    lockReason?: Maybe<RepositoryLockReason>;\n    /** A list of Users that can be mentioned in the context of the repository. */\n    mentionableUsers: UserConnection;\n    /** Whether or not PRs are merged with a merge commit on this repository. */\n    mergeCommitAllowed: Scalars[\"Boolean\"][\"output\"];\n    /** Returns a single milestone from the current repository by number. */\n    milestone?: Maybe<Milestone>;\n    /** A list of milestones associated with the repository. */\n    milestones?: Maybe<MilestoneConnection>;\n    /** The repository's original mirror URL. */\n    mirrorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The name of the repository. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The repository's name with owner. */\n    nameWithOwner: Scalars[\"String\"][\"output\"];\n    /** A Git object in the repository */\n    object?: Maybe<GitObject>;\n    /** The image used to represent this repository in Open Graph data. */\n    openGraphImageUrl: Scalars[\"URI\"][\"output\"];\n    /** The User owner of the repository. */\n    owner: RepositoryOwner;\n    /** A list of packages under the owner. */\n    packages: PackageConnection;\n    /** The repository parent, if this is a fork. */\n    parent?: Maybe<Repository>;\n    /** A list of discussions that have been pinned in this repository. */\n    pinnedDiscussions: PinnedDiscussionConnection;\n    /** A list of pinned issues for this repository. */\n    pinnedIssues?: Maybe<PinnedIssueConnection>;\n    /** The primary language of the repository's code. */\n    primaryLanguage?: Maybe<Language>;\n    /** Find project by number. */\n    project?: Maybe<Project>;\n    /** Finds and returns the Project (beta) according to the provided Project (beta) number. */\n    projectNext?: Maybe<ProjectNext>;\n    /** A list of projects under the owner. */\n    projects: ProjectConnection;\n    /** List of projects (beta) linked to this repository. */\n    projectsNext: ProjectNextConnection;\n    /** The HTTP path listing the repository's projects */\n    projectsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL listing the repository's projects */\n    projectsUrl: Scalars[\"URI\"][\"output\"];\n    /** Returns a single pull request from the current repository by number. */\n    pullRequest?: Maybe<PullRequest>;\n    /** Returns a list of pull request templates associated to the repository */\n    pullRequestTemplates?: Maybe<Array<PullRequestTemplate>>;\n    /** A list of pull requests that have been opened in the repository. */\n    pullRequests: PullRequestConnection;\n    /** Identifies when the repository was last pushed to. */\n    pushedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Whether or not rebase-merging is enabled on this repository. */\n    rebaseMergeAllowed: Scalars[\"Boolean\"][\"output\"];\n    /** Fetch a given ref from the repository */\n    ref?: Maybe<Ref>;\n    /** Fetch a list of refs from the repository */\n    refs?: Maybe<RefConnection>;\n    /** Lookup a single release given various criteria. */\n    release?: Maybe<Release>;\n    /** List of releases which are dependent on this repository. */\n    releases: ReleaseConnection;\n    /** A list of applied repository-topic associations for this repository. */\n    repositoryTopics: RepositoryTopicConnection;\n    /** The HTTP path for this repository */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The security policy URL. */\n    securityPolicyUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** A description of the repository, rendered to HTML without any links in it. */\n    shortDescriptionHTML: Scalars[\"HTML\"][\"output\"];\n    /** Whether or not squash-merging is enabled on this repository. */\n    squashMergeAllowed: Scalars[\"Boolean\"][\"output\"];\n    /** The SSH URL to clone this repository */\n    sshUrl: Scalars[\"GitSSHRemote\"][\"output\"];\n    /** Returns a count of how many stargazers there are on this object */\n    stargazerCount: Scalars[\"Int\"][\"output\"];\n    /** A list of users who have starred this starrable. */\n    stargazers: StargazerConnection;\n    /**\n     * Returns a list of all submodules in this repository parsed from the\n     * .gitmodules file as of the default branch's HEAD commit.\n     */\n    submodules: SubmoduleConnection;\n    /** Temporary authentication token for cloning this repository. */\n    tempCloneToken?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The repository from which this repository was generated, if any. */\n    templateRepository?: Maybe<Repository>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this repository */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n    usesCustomOpenGraphImage: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates whether the viewer has admin permissions on this repository. */\n    viewerCanAdminister: Scalars[\"Boolean\"][\"output\"];\n    /** Can the current viewer create new projects on this owner. */\n    viewerCanCreateProjects: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Indicates whether the viewer can update the topics of this repository. */\n    viewerCanUpdateTopics: Scalars[\"Boolean\"][\"output\"];\n    /** The last commit email for the viewer. */\n    viewerDefaultCommitEmail?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The last used merge method by the viewer or the default for the repository. */\n    viewerDefaultMergeMethod: PullRequestMergeMethod;\n    /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n    viewerHasStarred: Scalars[\"Boolean\"][\"output\"];\n    /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */\n    viewerPermission?: Maybe<RepositoryPermission>;\n    /** A list of emails this viewer can commit with. */\n    viewerPossibleCommitEmails?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n    /** Indicates the repository's visibility level. */\n    visibility: RepositoryVisibility;\n    /** A list of vulnerability alerts that are on this repository. */\n    vulnerabilityAlerts?: Maybe<RepositoryVulnerabilityAlertConnection>;\n    /** A list of users watching the repository. */\n    watchers: UserConnection;\n  };\n\n/** A repository contains the content for a project. */\nexport type RepositoryAssignableUsersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryBranchProtectionRulesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryCodeownersArgs = {\n  refName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryCollaboratorsArgs = {\n  affiliation?: InputMaybe<CollaboratorAffiliation>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryCommitCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDependencyGraphManifestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  dependenciesAfter?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  dependenciesFirst?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  withDependencies?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeployKeysArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeploymentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  environments?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionCategoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterByAssignable?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  categoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentArgs = {\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryForksArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueOrPullRequestArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelArgs = {\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LabelOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryLanguagesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<LanguageOrder>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryMentionableUsersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestoneArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestonesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<MilestoneOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  states?: InputMaybe<Array<MilestoneState>>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryObjectArgs = {\n  expression?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  oid?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryPackagesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  names?: InputMaybe<Array<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefArgs = {\n  qualifiedName: Scalars[\"String\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  direction?: InputMaybe<OrderDirection>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RefOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  refPrefix: Scalars[\"String\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleaseArgs = {\n  tagName: Scalars[\"String\"][\"input\"];\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleasesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReleaseOrder>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryRepositoryTopicsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryStargazersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositorySubmodulesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryVulnerabilityAlertsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  states?: InputMaybe<Array<RepositoryVulnerabilityAlertState>>;\n};\n\n/** A repository contains the content for a project. */\nexport type RepositoryWatchersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The affiliation of a user to a repository */\nexport enum RepositoryAffiliation {\n  /** Repositories that the user has been added to as a collaborator. */\n  Collaborator = \"COLLABORATOR\",\n  /**\n   * Repositories that the user has access to through being a member of an\n   * organization. This includes every repository on every team that the user is on.\n   */\n  OrganizationMember = \"ORGANIZATION_MEMBER\",\n  /** Repositories that are owned by the authenticated user. */\n  Owner = \"OWNER\",\n}\n\n/** Metadata for an audit entry with action repo.* */\nexport type RepositoryAuditEntryData = {\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Information extracted from a repository's `CODEOWNERS` file. */\nexport type RepositoryCodeowners = {\n  __typename?: \"RepositoryCodeowners\";\n  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */\n  errors: Array<RepositoryCodeownersError>;\n};\n\n/** An error in a `CODEOWNERS` file. */\nexport type RepositoryCodeownersError = {\n  __typename?: \"RepositoryCodeownersError\";\n  /** The column number where the error occurs. */\n  column: Scalars[\"Int\"][\"output\"];\n  /** A short string describing the type of error. */\n  kind: Scalars[\"String\"][\"output\"];\n  /** The line number where the error occurs. */\n  line: Scalars[\"Int\"][\"output\"];\n  /** A complete description of the error, combining information from other fields. */\n  message: Scalars[\"String\"][\"output\"];\n  /** The path to the file when the error occurs. */\n  path: Scalars[\"String\"][\"output\"];\n  /** The content of the line where the error occurs. */\n  source: Scalars[\"String\"][\"output\"];\n  /** A suggestion of how to fix the error. */\n  suggestion?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The connection type for User. */\nexport type RepositoryCollaboratorConnection = {\n  __typename?: \"RepositoryCollaboratorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user who is a collaborator of a repository. */\nexport type RepositoryCollaboratorEdge = {\n  __typename?: \"RepositoryCollaboratorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  node: User;\n  /** The permission the user has on the repository. */\n  permission: RepositoryPermission;\n  /** A list of sources for the user's access to the repository. */\n  permissionSources?: Maybe<Array<PermissionSource>>;\n};\n\n/** A list of repositories owned by the subject. */\nexport type RepositoryConnection = {\n  __typename?: \"RepositoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /** The total size in kilobytes of all repositories in the connection. */\n  totalDiskUsage: Scalars[\"Int\"][\"output\"];\n};\n\n/** A repository contact link. */\nexport type RepositoryContactLink = {\n  __typename?: \"RepositoryContactLink\";\n  /** The contact link purpose. */\n  about: Scalars[\"String\"][\"output\"];\n  /** The contact link name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The contact link URL. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** The reason a repository is listed as 'contributed'. */\nexport enum RepositoryContributionType {\n  /** Created a commit */\n  Commit = \"COMMIT\",\n  /** Created an issue */\n  Issue = \"ISSUE\",\n  /** Created a pull request */\n  PullRequest = \"PULL_REQUEST\",\n  /** Reviewed a pull request */\n  PullRequestReview = \"PULL_REQUEST_REVIEW\",\n  /** Created the repository */\n  Repository = \"REPOSITORY\",\n}\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthor = {\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n};\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthorRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  answered?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthor = {\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n};\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  onlyAnswers?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** An edge in a connection. */\nexport type RepositoryEdge = {\n  __typename?: \"RepositoryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Repository>;\n};\n\n/** A subset of repository info. */\nexport type RepositoryInfo = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The description of the repository. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The description of the repository rendered to HTML. */\n  descriptionHTML: Scalars[\"HTML\"][\"output\"];\n  /** Returns how many forks there are of this repository in the whole network. */\n  forkCount: Scalars[\"Int\"][\"output\"];\n  /** Indicates if the repository has issues feature enabled. */\n  hasIssuesEnabled: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates if the repository has the Projects feature enabled. */\n  hasProjectsEnabled: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates if the repository has wiki feature enabled. */\n  hasWikiEnabled: Scalars[\"Boolean\"][\"output\"];\n  /** The repository's URL. */\n  homepageUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** Indicates if the repository is unmaintained. */\n  isArchived: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies if the repository is a fork. */\n  isFork: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n  isInOrganization: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates if the repository has been locked or not. */\n  isLocked: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies if the repository is a mirror. */\n  isMirror: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies if the repository is a template that can be used to generate new repositories. */\n  isTemplate: Scalars[\"Boolean\"][\"output\"];\n  /** The license associated with the repository */\n  licenseInfo?: Maybe<License>;\n  /** The reason the repository has been locked. */\n  lockReason?: Maybe<RepositoryLockReason>;\n  /** The repository's original mirror URL. */\n  mirrorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The name of the repository. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars[\"String\"][\"output\"];\n  /** The image used to represent this repository in Open Graph data. */\n  openGraphImageUrl: Scalars[\"URI\"][\"output\"];\n  /** The User owner of the repository. */\n  owner: RepositoryOwner;\n  /** Identifies when the repository was last pushed to. */\n  pushedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The HTTP path for this repository */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** A description of the repository, rendered to HTML without any links in it. */\n  shortDescriptionHTML: Scalars[\"HTML\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP URL for this repository */\n  url: Scalars[\"URI\"][\"output\"];\n  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n  usesCustomOpenGraphImage: Scalars[\"Boolean\"][\"output\"];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** A subset of repository info. */\nexport type RepositoryInfoShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Repository interaction limit that applies to this object. */\nexport type RepositoryInteractionAbility = {\n  __typename?: \"RepositoryInteractionAbility\";\n  /** The time the currently active limit expires. */\n  expiresAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The current limit that is enabled on this object. */\n  limit: RepositoryInteractionLimit;\n  /** The origin of the currently active interaction limit. */\n  origin: RepositoryInteractionLimitOrigin;\n};\n\n/** A repository interaction limit. */\nexport enum RepositoryInteractionLimit {\n  /** Users that are not collaborators will not be able to interact with the repository. */\n  CollaboratorsOnly = \"COLLABORATORS_ONLY\",\n  /** Users that have not previously committed to a repository’s default branch will be unable to interact with the repository. */\n  ContributorsOnly = \"CONTRIBUTORS_ONLY\",\n  /** Users that have recently created their account will be unable to interact with the repository. */\n  ExistingUsers = \"EXISTING_USERS\",\n  /** No interaction limits are enabled. */\n  NoLimit = \"NO_LIMIT\",\n}\n\n/** The length for a repository interaction limit to be enabled for. */\nexport enum RepositoryInteractionLimitExpiry {\n  /** The interaction limit will expire after 1 day. */\n  OneDay = \"ONE_DAY\",\n  /** The interaction limit will expire after 1 month. */\n  OneMonth = \"ONE_MONTH\",\n  /** The interaction limit will expire after 1 week. */\n  OneWeek = \"ONE_WEEK\",\n  /** The interaction limit will expire after 6 months. */\n  SixMonths = \"SIX_MONTHS\",\n  /** The interaction limit will expire after 3 days. */\n  ThreeDays = \"THREE_DAYS\",\n}\n\n/** Indicates where an interaction limit is configured. */\nexport enum RepositoryInteractionLimitOrigin {\n  /** A limit that is configured at the organization level. */\n  Organization = \"ORGANIZATION\",\n  /** A limit that is configured at the repository level. */\n  Repository = \"REPOSITORY\",\n  /** A limit that is configured at the user-wide level. */\n  User = \"USER\",\n}\n\n/** An invitation for a user to be added to a repository. */\nexport type RepositoryInvitation = Node & {\n  __typename?: \"RepositoryInvitation\";\n  /** The email address that received the invitation. */\n  email?: Maybe<Scalars[\"String\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The user who received the invitation. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter: User;\n  /** The permalink for this repository invitation. */\n  permalink: Scalars[\"URI\"][\"output\"];\n  /** The permission granted on this repository by this invitation. */\n  permission: RepositoryPermission;\n  /** The Repository the user is invited to. */\n  repository?: Maybe<RepositoryInfo>;\n};\n\n/** A list of repository invitations. */\nexport type RepositoryInvitationConnection = {\n  __typename?: \"RepositoryInvitationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type RepositoryInvitationEdge = {\n  __typename?: \"RepositoryInvitationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryInvitation>;\n};\n\n/** Ordering options for repository invitation connections. */\nexport type RepositoryInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repository invitations by. */\n  field: RepositoryInvitationOrderField;\n};\n\n/** Properties by which repository invitation connections can be ordered. */\nexport enum RepositoryInvitationOrderField {\n  /** Order repository invitations by creation time */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** The possible reasons a given repository could be in a locked state. */\nexport enum RepositoryLockReason {\n  /** The repository is locked due to a billing related reason. */\n  Billing = \"BILLING\",\n  /** The repository is locked due to a migration. */\n  Migrating = \"MIGRATING\",\n  /** The repository is locked due to a move. */\n  Moving = \"MOVING\",\n  /** The repository is locked due to a rename. */\n  Rename = \"RENAME\",\n}\n\n/** An Octoshift repository migration. */\nexport type RepositoryMigration = Migration &\n  Node & {\n    __typename?: \"RepositoryMigration\";\n    /** The Octoshift migration flag to continue on error. */\n    continueOnError: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The reason the migration failed. */\n    failureReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The URL for the migration log (expires 1 day after migration completes). */\n    migrationLogUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The Octoshift migration source. */\n    migrationSource: MigrationSource;\n    /** The target repository name. */\n    repositoryName: Scalars[\"String\"][\"output\"];\n    /** The Octoshift migration source URL. */\n    sourceUrl: Scalars[\"URI\"][\"output\"];\n    /** The Octoshift migration state. */\n    state: MigrationState;\n  };\n\n/** The connection type for RepositoryMigration. */\nexport type RepositoryMigrationConnection = {\n  __typename?: \"RepositoryMigrationConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryMigrationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryMigration>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a repository migration. */\nexport type RepositoryMigrationEdge = {\n  __typename?: \"RepositoryMigrationEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryMigration>;\n};\n\n/** Ordering options for repository migrations. */\nexport type RepositoryMigrationOrder = {\n  /** The ordering direction. */\n  direction: RepositoryMigrationOrderDirection;\n  /** The field to order repository migrations by. */\n  field: RepositoryMigrationOrderField;\n};\n\n/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */\nexport enum RepositoryMigrationOrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = \"ASC\",\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = \"DESC\",\n}\n\n/** Properties by which repository migrations can be ordered. */\nexport enum RepositoryMigrationOrderField {\n  /** Order mannequins why when they were created. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Represents a object that belongs to a repository. */\nexport type RepositoryNode = {\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n/** Ordering options for repository connections */\nexport type RepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: RepositoryOrderField;\n};\n\n/** Properties by which repository connections can be ordered. */\nexport enum RepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order repositories by name */\n  Name = \"NAME\",\n  /** Order repositories by push time */\n  PushedAt = \"PUSHED_AT\",\n  /** Order repositories by number of stargazers */\n  Stargazers = \"STARGAZERS\",\n  /** Order repositories by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwner = {\n  /** A URL pointing to the owner's public avatar. */\n  avatarUrl: Scalars[\"URI\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The username used to login. */\n  login: Scalars[\"String\"][\"output\"];\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** The HTTP URL for the owner. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for the owner. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isFork?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** The access level to a repository */\nexport enum RepositoryPermission {\n  /**\n   * Can read, clone, and push to this repository. Can also manage issues, pull\n   * requests, and repository settings, including adding collaborators\n   */\n  Admin = \"ADMIN\",\n  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */\n  Maintain = \"MAINTAIN\",\n  /** Can read and clone this repository. Can also open and comment on issues and pull requests */\n  Read = \"READ\",\n  /** Can read and clone this repository. Can also manage issues and pull requests */\n  Triage = \"TRIAGE\",\n  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */\n  Write = \"WRITE\",\n}\n\n/** The privacy of a repository */\nexport enum RepositoryPrivacy {\n  /** Private */\n  Private = \"PRIVATE\",\n  /** Public */\n  Public = \"PUBLIC\",\n}\n\n/** A repository-topic connects a repository to a topic. */\nexport type RepositoryTopic = Node &\n  UniformResourceLocatable & {\n    __typename?: \"RepositoryTopic\";\n    id: Scalars[\"ID\"][\"output\"];\n    /** The HTTP path for this repository-topic. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The topic. */\n    topic: Topic;\n    /** The HTTP URL for this repository-topic. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** The connection type for RepositoryTopic. */\nexport type RepositoryTopicConnection = {\n  __typename?: \"RepositoryTopicConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryTopicEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryTopic>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type RepositoryTopicEdge = {\n  __typename?: \"RepositoryTopicEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryTopic>;\n};\n\n/** The repository's visibility level. */\nexport enum RepositoryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = \"INTERNAL\",\n  /** The repository is visible only to those with explicit access. */\n  Private = \"PRIVATE\",\n  /** The repository is visible to everyone. */\n  Public = \"PUBLIC\",\n}\n\n/** Audit log entry for a repository_visibility_change.disable event. */\nexport type RepositoryVisibilityChangeDisableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"RepositoryVisibilityChangeDisableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a repository_visibility_change.enable event. */\nexport type RepositoryVisibilityChangeEnableAuditEntry = AuditEntry &\n  EnterpriseAuditEntryData &\n  Node &\n  OrganizationAuditEntryData & {\n    __typename?: \"RepositoryVisibilityChangeEnableAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    /** The HTTP path for this enterprise. */\n    enterpriseResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The slug of the enterprise. */\n    enterpriseSlug?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP URL for this enterprise. */\n    enterpriseUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */\nexport type RepositoryVulnerabilityAlert = Node &\n  RepositoryNode & {\n    __typename?: \"RepositoryVulnerabilityAlert\";\n    /** When was the alert created? */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The associated Dependabot update */\n    dependabotUpdate?: Maybe<DependabotUpdate>;\n    /** The reason the alert was dismissed */\n    dismissReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** When was the alert dismissed? */\n    dismissedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** The user who dismissed the alert */\n    dismisser?: Maybe<User>;\n    /** The reason the alert was marked as fixed. */\n    fixReason?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** When was the alert fixed? */\n    fixedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Identifies the alert number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** The associated repository */\n    repository: Repository;\n    /** The associated security advisory */\n    securityAdvisory?: Maybe<SecurityAdvisory>;\n    /** The associated security vulnerability */\n    securityVulnerability?: Maybe<SecurityVulnerability>;\n    /** Identifies the state of the alert. */\n    state: RepositoryVulnerabilityAlertState;\n    /** The vulnerable manifest filename */\n    vulnerableManifestFilename: Scalars[\"String\"][\"output\"];\n    /** The vulnerable manifest path */\n    vulnerableManifestPath: Scalars[\"String\"][\"output\"];\n    /** The vulnerable requirements */\n    vulnerableRequirements?: Maybe<Scalars[\"String\"][\"output\"]>;\n  };\n\n/** The connection type for RepositoryVulnerabilityAlert. */\nexport type RepositoryVulnerabilityAlertConnection = {\n  __typename?: \"RepositoryVulnerabilityAlertConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryVulnerabilityAlertEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryVulnerabilityAlert>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type RepositoryVulnerabilityAlertEdge = {\n  __typename?: \"RepositoryVulnerabilityAlertEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** The possible states of an alert */\nexport enum RepositoryVulnerabilityAlertState {\n  /** An alert that has been manually closed by a user. */\n  Dismissed = \"DISMISSED\",\n  /** An alert that has been resolved by a code change. */\n  Fixed = \"FIXED\",\n  /** An alert that is still open. */\n  Open = \"OPEN\",\n}\n\n/** Autogenerated input type of RequestReviews */\nexport type RequestReviewsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n  /** The Node IDs of the team to request. */\n  teamIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** Add users to the set rather than replace. */\n  union?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The Node IDs of the user to request. */\n  userIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n};\n\n/** Autogenerated return type of RequestReviews */\nexport type RequestReviewsPayload = {\n  __typename?: \"RequestReviewsPayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The pull request that is getting requests. */\n  pullRequest?: Maybe<PullRequest>;\n  /** The edge from the pull request to the requested reviewers. */\n  requestedReviewersEdge?: Maybe<UserEdge>;\n};\n\n/** The possible states that can be requested when creating a check run. */\nexport enum RequestableCheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = \"COMPLETED\",\n  /** The check suite or run is in progress. */\n  InProgress = \"IN_PROGRESS\",\n  /** The check suite or run is in pending state. */\n  Pending = \"PENDING\",\n  /** The check suite or run has been queued. */\n  Queued = \"QUEUED\",\n  /** The check suite or run is in waiting state. */\n  Waiting = \"WAITING\",\n}\n\n/** Types that can be requested reviewers. */\nexport type RequestedReviewer = Mannequin | Team | User;\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequest = {\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequestIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  pullRequestNumber?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a required status check for a protected branch, but not any specific run of that check. */\nexport type RequiredStatusCheckDescription = {\n  __typename?: \"RequiredStatusCheckDescription\";\n  /** The App that must provide this status in order for it to be accepted. */\n  app?: Maybe<App>;\n  /** The name of this status. */\n  context: Scalars[\"String\"][\"output\"];\n};\n\n/** Specifies the attributes for a new or updated required status check. */\nexport type RequiredStatusCheckInput = {\n  /**\n   * The ID of the App that must set the status in order for it to be accepted.\n   * Omit this value to use whichever app has recently been setting this status, or\n   * use \"any\" to allow any app to set the status.\n   */\n  appId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** Status check context that must pass for commits to be accepted to the matching branch. */\n  context: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated input type of RerequestCheckSuite */\nexport type RerequestCheckSuiteInput = {\n  /** The Node ID of the check suite. */\n  checkSuiteId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RerequestCheckSuite */\nexport type RerequestCheckSuitePayload = {\n  __typename?: \"RerequestCheckSuitePayload\";\n  /** The requested check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of ResolveReviewThread */\nexport type ResolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the thread to resolve */\n  threadId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of ResolveReviewThread */\nexport type ResolveReviewThreadPayload = {\n  __typename?: \"ResolveReviewThreadPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents a private contribution a user made on GitHub. */\nexport type RestrictedContribution = Contribution & {\n  __typename?: \"RestrictedContribution\";\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars[\"Boolean\"][\"output\"];\n  /** When this contribution was made. */\n  occurredAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL for this contribution. */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** A team or user who has the ability to dismiss a review on a protected branch. */\nexport type ReviewDismissalAllowance = Node & {\n  __typename?: \"ReviewDismissalAllowance\";\n  /** The actor that can dismiss. */\n  actor?: Maybe<ReviewDismissalAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user or team. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  id: Scalars[\"ID\"][\"output\"];\n};\n\n/** Types that can be an actor. */\nexport type ReviewDismissalAllowanceActor = Team | User;\n\n/** The connection type for ReviewDismissalAllowance. */\nexport type ReviewDismissalAllowanceConnection = {\n  __typename?: \"ReviewDismissalAllowanceConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewDismissalAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewDismissalAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ReviewDismissalAllowanceEdge = {\n  __typename?: \"ReviewDismissalAllowanceEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewDismissalAllowance>;\n};\n\n/** Represents a 'review_dismissed' event on a given issue or pull request. */\nexport type ReviewDismissedEvent = Node &\n  UniformResourceLocatable & {\n    __typename?: \"ReviewDismissedEvent\";\n    /** Identifies the actor who performed the event. */\n    actor?: Maybe<Actor>;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** Identifies the optional message associated with the 'review_dismissed' event. */\n    dismissalMessage?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the optional message associated with the event, rendered to HTML. */\n    dismissalMessageHTML?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Identifies the previous state of the review with the 'review_dismissed' event. */\n    previousReviewState: PullRequestReviewState;\n    /** PullRequest referenced by event. */\n    pullRequest: PullRequest;\n    /** Identifies the commit which caused the review to become stale. */\n    pullRequestCommit?: Maybe<PullRequestCommit>;\n    /** The HTTP path for this review dismissed event. */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the review associated with the 'review_dismissed' event. */\n    review?: Maybe<PullRequestReview>;\n    /** The HTTP URL for this review dismissed event. */\n    url: Scalars[\"URI\"][\"output\"];\n  };\n\n/** A request for a user to review a pull request. */\nexport type ReviewRequest = Node & {\n  __typename?: \"ReviewRequest\";\n  /** Whether this request was created for a code owner */\n  asCodeOwner: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the pull request associated with this review request. */\n  pullRequest: PullRequest;\n  /** The reviewer that is requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** The connection type for ReviewRequest. */\nexport type ReviewRequestConnection = {\n  __typename?: \"ReviewRequestConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type ReviewRequestEdge = {\n  __typename?: \"ReviewRequestEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewRequest>;\n};\n\n/** Represents an 'review_request_removed' event on a given pull request. */\nexport type ReviewRequestRemovedEvent = Node & {\n  __typename?: \"ReviewRequestRemovedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review request was removed. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** Represents an 'review_requested' event on a given pull request. */\nexport type ReviewRequestedEvent = Node & {\n  __typename?: \"ReviewRequestedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review was requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/**\n * A hovercard context with a message describing the current code review state of the pull\n * request.\n */\nexport type ReviewStatusHovercardContext = HovercardContext & {\n  __typename?: \"ReviewStatusHovercardContext\";\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n  /** The current status of the pull request with respect to code review. */\n  reviewDecision?: Maybe<PullRequestReviewDecision>;\n};\n\n/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of the user to revoke the migrator role */\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayload = {\n  __typename?: \"RevokeEnterpriseOrganizationsMigratorRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organizations that had the migrator role revoked for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated input type of RevokeMigratorRole */\nexport type RevokeMigratorRoleInput = {\n  /** The user login or Team slug to revoke the migrator role from. */\n  actor: Scalars[\"String\"][\"input\"];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of RevokeMigratorRole */\nexport type RevokeMigratorRolePayload = {\n  __typename?: \"RevokeMigratorRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n};\n\n/** Possible roles a user may have in relation to an organization. */\nexport enum RoleInOrganization {\n  /** A user who is a direct member of the organization. */\n  DirectMember = \"DIRECT_MEMBER\",\n  /** A user with full administrative access to the organization. */\n  Owner = \"OWNER\",\n  /** A user who is unaffiliated with the organization. */\n  Unaffiliated = \"UNAFFILIATED\",\n}\n\n/** The possible digest algorithms used to sign SAML requests for an identity provider. */\nexport enum SamlDigestAlgorithm {\n  /** SHA1 */\n  Sha1 = \"SHA1\",\n  /** SHA256 */\n  Sha256 = \"SHA256\",\n  /** SHA384 */\n  Sha384 = \"SHA384\",\n  /** SHA512 */\n  Sha512 = \"SHA512\",\n}\n\n/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */\nexport enum SamlSignatureAlgorithm {\n  /** RSA-SHA1 */\n  RsaSha1 = \"RSA_SHA1\",\n  /** RSA-SHA256 */\n  RsaSha256 = \"RSA_SHA256\",\n  /** RSA-SHA384 */\n  RsaSha384 = \"RSA_SHA384\",\n  /** RSA-SHA512 */\n  RsaSha512 = \"RSA_SHA512\",\n}\n\n/** A Saved Reply is text a user can use to reply quickly. */\nexport type SavedReply = Node & {\n  __typename?: \"SavedReply\";\n  /** The body of the saved reply. */\n  body: Scalars[\"String\"][\"output\"];\n  /** The saved reply body rendered to HTML. */\n  bodyHTML: Scalars[\"HTML\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The title of the saved reply. */\n  title: Scalars[\"String\"][\"output\"];\n  /** The user that saved this reply. */\n  user?: Maybe<Actor>;\n};\n\n/** The connection type for SavedReply. */\nexport type SavedReplyConnection = {\n  __typename?: \"SavedReplyConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SavedReplyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SavedReply>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SavedReplyEdge = {\n  __typename?: \"SavedReplyEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SavedReply>;\n};\n\n/** Ordering options for saved reply connections. */\nexport type SavedReplyOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order saved replies by. */\n  field: SavedReplyOrderField;\n};\n\n/** Properties by which saved reply connections can be ordered. */\nexport enum SavedReplyOrderField {\n  /** Order saved reply by when they were updated. */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The results of a search. */\nexport type SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User;\n\n/** A list of results that matched against a search query. */\nexport type SearchResultItemConnection = {\n  __typename?: \"SearchResultItemConnection\";\n  /** The number of pieces of code that matched the search query. */\n  codeCount: Scalars[\"Int\"][\"output\"];\n  /** The number of discussions that matched the search query. */\n  discussionCount: Scalars[\"Int\"][\"output\"];\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SearchResultItemEdge>>>;\n  /** The number of issues that matched the search query. */\n  issueCount: Scalars[\"Int\"][\"output\"];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SearchResultItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The number of repositories that matched the search query. */\n  repositoryCount: Scalars[\"Int\"][\"output\"];\n  /** The number of users that matched the search query. */\n  userCount: Scalars[\"Int\"][\"output\"];\n  /** The number of wiki pages that matched the search query. */\n  wikiCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SearchResultItemEdge = {\n  __typename?: \"SearchResultItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SearchResultItem>;\n  /** Text matches on the result found. */\n  textMatches?: Maybe<Array<Maybe<TextMatch>>>;\n};\n\n/** Represents the individual results of a search. */\nexport enum SearchType {\n  /** Returns matching discussions in repositories. */\n  Discussion = \"DISCUSSION\",\n  /** Returns results matching issues in repositories. */\n  Issue = \"ISSUE\",\n  /** Returns results matching repositories. */\n  Repository = \"REPOSITORY\",\n  /** Returns results matching users and organizations on GitHub. */\n  User = \"USER\",\n}\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisory = Node & {\n  __typename?: \"SecurityAdvisory\";\n  /** The CVSS associated with this advisory */\n  cvss: Cvss;\n  /** CWEs associated with this Advisory */\n  cwes: CweConnection;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** This is a long plaintext description of the advisory */\n  description: Scalars[\"String\"][\"output\"];\n  /** The GitHub Security Advisory ID */\n  ghsaId: Scalars[\"String\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** A list of identifiers for this advisory */\n  identifiers: Array<SecurityAdvisoryIdentifier>;\n  /** The permalink for the advisory's dependabot alerts page */\n  notificationsPermalink?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The organization that originated the advisory */\n  origin: Scalars[\"String\"][\"output\"];\n  /** The permalink for the advisory */\n  permalink?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** When the advisory was published */\n  publishedAt: Scalars[\"DateTime\"][\"output\"];\n  /** A list of references for this advisory */\n  references: Array<SecurityAdvisoryReference>;\n  /** The severity of the advisory */\n  severity: SecurityAdvisorySeverity;\n  /** A short plaintext summary of the advisory */\n  summary: Scalars[\"String\"][\"output\"];\n  /** When the advisory was last updated */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** Vulnerabilities associated with this Advisory */\n  vulnerabilities: SecurityVulnerabilityConnection;\n  /** When the advisory was withdrawn, if it has been withdrawn */\n  withdrawnAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryCwesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n/** The connection type for SecurityAdvisory. */\nexport type SecurityAdvisoryConnection = {\n  __typename?: \"SecurityAdvisoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityAdvisoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityAdvisory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** The possible ecosystems of a security vulnerability's package. */\nexport enum SecurityAdvisoryEcosystem {\n  /** PHP packages hosted at packagist.org */\n  Composer = \"COMPOSER\",\n  /** Go modules */\n  Go = \"GO\",\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = \"MAVEN\",\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = \"NPM\",\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = \"NUGET\",\n  /** Python packages hosted at PyPI.org */\n  Pip = \"PIP\",\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = \"RUBYGEMS\",\n  /** Rust crates */\n  Rust = \"RUST\",\n}\n\n/** An edge in a connection. */\nexport type SecurityAdvisoryEdge = {\n  __typename?: \"SecurityAdvisoryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityAdvisory>;\n};\n\n/** A GitHub Security Advisory Identifier */\nexport type SecurityAdvisoryIdentifier = {\n  __typename?: \"SecurityAdvisoryIdentifier\";\n  /** The identifier type, e.g. GHSA, CVE */\n  type: Scalars[\"String\"][\"output\"];\n  /** The identifier */\n  value: Scalars[\"String\"][\"output\"];\n};\n\n/** An advisory identifier to filter results on. */\nexport type SecurityAdvisoryIdentifierFilter = {\n  /** The identifier type. */\n  type: SecurityAdvisoryIdentifierType;\n  /** The identifier string. Supports exact or partial matching. */\n  value: Scalars[\"String\"][\"input\"];\n};\n\n/** Identifier formats available for advisories. */\nexport enum SecurityAdvisoryIdentifierType {\n  /** Common Vulnerabilities and Exposures Identifier. */\n  Cve = \"CVE\",\n  /** GitHub Security Advisory ID. */\n  Ghsa = \"GHSA\",\n}\n\n/** Ordering options for security advisory connections */\nexport type SecurityAdvisoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security advisories by. */\n  field: SecurityAdvisoryOrderField;\n};\n\n/** Properties by which security advisory connections can be ordered. */\nexport enum SecurityAdvisoryOrderField {\n  /** Order advisories by publication time */\n  PublishedAt = \"PUBLISHED_AT\",\n  /** Order advisories by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** An individual package */\nexport type SecurityAdvisoryPackage = {\n  __typename?: \"SecurityAdvisoryPackage\";\n  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */\n  ecosystem: SecurityAdvisoryEcosystem;\n  /** The package name */\n  name: Scalars[\"String\"][\"output\"];\n};\n\n/** An individual package version */\nexport type SecurityAdvisoryPackageVersion = {\n  __typename?: \"SecurityAdvisoryPackageVersion\";\n  /** The package name or version */\n  identifier: Scalars[\"String\"][\"output\"];\n};\n\n/** A GitHub Security Advisory Reference */\nexport type SecurityAdvisoryReference = {\n  __typename?: \"SecurityAdvisoryReference\";\n  /** A publicly accessible reference */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** Severity of the vulnerability. */\nexport enum SecurityAdvisorySeverity {\n  /** Critical. */\n  Critical = \"CRITICAL\",\n  /** High. */\n  High = \"HIGH\",\n  /** Low. */\n  Low = \"LOW\",\n  /** Moderate. */\n  Moderate = \"MODERATE\",\n}\n\n/** An individual vulnerability within an Advisory */\nexport type SecurityVulnerability = {\n  __typename?: \"SecurityVulnerability\";\n  /** The Advisory associated with this Vulnerability */\n  advisory: SecurityAdvisory;\n  /** The first version containing a fix for the vulnerability */\n  firstPatchedVersion?: Maybe<SecurityAdvisoryPackageVersion>;\n  /** A description of the vulnerable package */\n  package: SecurityAdvisoryPackage;\n  /** The severity of the vulnerability within this package */\n  severity: SecurityAdvisorySeverity;\n  /** When the vulnerability was last updated */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /**\n   * A string that describes the vulnerable package versions.\n   * This string follows a basic syntax with a few forms.\n   * + `= 0.2.0` denotes a single vulnerable version.\n   * + `<= 1.0.8` denotes a version range up to and including the specified version\n   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version\n   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n   */\n  vulnerableVersionRange: Scalars[\"String\"][\"output\"];\n};\n\n/** The connection type for SecurityVulnerability. */\nexport type SecurityVulnerabilityConnection = {\n  __typename?: \"SecurityVulnerabilityConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityVulnerabilityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityVulnerability>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SecurityVulnerabilityEdge = {\n  __typename?: \"SecurityVulnerabilityEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityVulnerability>;\n};\n\n/** Ordering options for security vulnerability connections */\nexport type SecurityVulnerabilityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security vulnerabilities by. */\n  field: SecurityVulnerabilityOrderField;\n};\n\n/** Properties by which security vulnerability connections can be ordered. */\nexport enum SecurityVulnerabilityOrderField {\n  /** Order vulnerability by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** Autogenerated input type of SetEnterpriseIdentityProvider */\nexport type SetEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod: SamlDigestAlgorithm;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate: Scalars[\"String\"][\"input\"];\n  /** The Issuer Entity ID for the SAML identity provider */\n  issuer?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod: SamlSignatureAlgorithm;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl: Scalars[\"URI\"][\"input\"];\n};\n\n/** Autogenerated return type of SetEnterpriseIdentityProvider */\nexport type SetEnterpriseIdentityProviderPayload = {\n  __typename?: \"SetEnterpriseIdentityProviderPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of SetOrganizationInteractionLimit */\nexport type SetOrganizationInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the organization to set a limit for. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of SetOrganizationInteractionLimit */\nexport type SetOrganizationInteractionLimitPayload = {\n  __typename?: \"SetOrganizationInteractionLimitPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organization that the interaction limit was set for. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of SetRepositoryInteractionLimit */\nexport type SetRepositoryInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the repository to set a limit for. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of SetRepositoryInteractionLimit */\nexport type SetRepositoryInteractionLimitPayload = {\n  __typename?: \"SetRepositoryInteractionLimitPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository that the interaction limit was set for. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of SetUserInteractionLimit */\nexport type SetUserInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the user to set a limit for. */\n  userId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of SetUserInteractionLimit */\nexport type SetUserInteractionLimitPayload = {\n  __typename?: \"SetUserInteractionLimitPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The user that the interaction limit was set for. */\n  user?: Maybe<User>;\n};\n\n/** Represents an S/MIME signature on a Commit or Tag. */\nexport type SmimeSignature = GitSignature & {\n  __typename?: \"SmimeSignature\";\n  /** Email used to sign this object. */\n  email: Scalars[\"String\"][\"output\"];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars[\"Boolean\"][\"output\"];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars[\"String\"][\"output\"];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars[\"String\"][\"output\"];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents a sort by field and direction. */\nexport type SortBy = {\n  __typename?: \"SortBy\";\n  /** The direction of the sorting. Possible values are ASC and DESC. */\n  direction: OrderDirection;\n  /** The id of the field by which the column is sorted. */\n  field: Scalars[\"Int\"][\"output\"];\n};\n\n/** Entities that can sponsor others via GitHub Sponsors */\nexport type Sponsor = Organization | User;\n\n/** The connection type for Sponsor. */\nexport type SponsorConnection = {\n  __typename?: \"SponsorConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */\nexport type SponsorEdge = {\n  __typename?: \"SponsorEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsor>;\n};\n\n/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */\nexport type SponsorOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsor entities by. */\n  field: SponsorOrderField;\n};\n\n/** Properties by which sponsor connections can be ordered. */\nexport enum SponsorOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = \"LOGIN\",\n  /** Order sponsors by their relevance to the viewer. */\n  Relevance = \"RELEVANCE\",\n}\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type Sponsorable = {\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars[\"Int\"][\"output\"];\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars[\"Boolean\"][\"output\"];\n  /** Check if the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars[\"Boolean\"][\"output\"];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars[\"Boolean\"][\"output\"];\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars[\"Int\"][\"output\"];\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /**\n   * The sponsorship from the viewer to this user/organization; that is, the\n   * sponsorship where you're the sponsor. Only returns a sponsorship if it is active.\n   */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /**\n   * The sponsorship from this user/organization to the viewer; that is, the\n   * sponsorship you're receiving. Only returns a sponsorship if it is active.\n   */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** This object's sponsorships as the maintainer. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** This object's sponsorships as the sponsor. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars[\"Boolean\"][\"output\"];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableIsSponsoredByArgs = {\n  accountLogin: Scalars[\"String\"][\"input\"];\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsoringArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includePrivate?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** Entities that can be sponsored through GitHub Sponsors */\nexport type SponsorableSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** Entities that can be sponsored via GitHub Sponsors */\nexport type SponsorableItem = Organization | User;\n\n/** The connection type for SponsorableItem. */\nexport type SponsorableItemConnection = {\n  __typename?: \"SponsorableItemConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SponsorableItemEdge = {\n  __typename?: \"SponsorableItemEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorableItem>;\n};\n\n/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */\nexport type SponsorableOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorable entities by. */\n  field: SponsorableOrderField;\n};\n\n/** Properties by which sponsorable connections can be ordered. */\nexport enum SponsorableOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = \"LOGIN\",\n}\n\n/** An event related to sponsorship activity. */\nexport type SponsorsActivity = Node & {\n  __typename?: \"SponsorsActivity\";\n  /** What action this activity indicates took place. */\n  action: SponsorsActivityAction;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The tier that the sponsorship used to use, for tier change events. */\n  previousSponsorsTier?: Maybe<SponsorsTier>;\n  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */\n  sponsor?: Maybe<Sponsor>;\n  /** The user or organization that is being sponsored, the maintainer. */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n  /** The timestamp of this event. */\n  timestamp?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** The possible actions that GitHub Sponsors activities can represent. */\nexport enum SponsorsActivityAction {\n  /** The activity was cancelling a sponsorship. */\n  CancelledSponsorship = \"CANCELLED_SPONSORSHIP\",\n  /** The activity was starting a sponsorship. */\n  NewSponsorship = \"NEW_SPONSORSHIP\",\n  /** The activity was scheduling a downgrade or cancellation. */\n  PendingChange = \"PENDING_CHANGE\",\n  /** The activity was funds being refunded to the sponsor or GitHub. */\n  Refund = \"REFUND\",\n  /** The activity was disabling matching for a previously matched sponsorship. */\n  SponsorMatchDisabled = \"SPONSOR_MATCH_DISABLED\",\n  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */\n  TierChange = \"TIER_CHANGE\",\n}\n\n/** The connection type for SponsorsActivity. */\nexport type SponsorsActivityConnection = {\n  __typename?: \"SponsorsActivityConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsActivityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsActivity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SponsorsActivityEdge = {\n  __typename?: \"SponsorsActivityEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsActivity>;\n};\n\n/** Ordering options for GitHub Sponsors activity connections. */\nexport type SponsorsActivityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order activity by. */\n  field: SponsorsActivityOrderField;\n};\n\n/** Properties by which GitHub Sponsors activity connections can be ordered. */\nexport enum SponsorsActivityOrderField {\n  /** Order activities by when they happened. */\n  Timestamp = \"TIMESTAMP\",\n}\n\n/** The possible time periods for which Sponsors activities can be requested. */\nexport enum SponsorsActivityPeriod {\n  /** Don't restrict the activity to any date range, include all activity. */\n  All = \"ALL\",\n  /** The previous calendar day. */\n  Day = \"DAY\",\n  /** The previous thirty days. */\n  Month = \"MONTH\",\n  /** The previous seven days. */\n  Week = \"WEEK\",\n}\n\n/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */\nexport type SponsorsGoal = {\n  __typename?: \"SponsorsGoal\";\n  /** A description of the goal from the maintainer. */\n  description?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** What the objective of this goal is. */\n  kind: SponsorsGoalKind;\n  /** The percentage representing how complete this goal is, between 0-100. */\n  percentComplete: Scalars[\"Int\"][\"output\"];\n  /**\n   * What the goal amount is. Represents an amount in USD for monthly sponsorship\n   * amount goals. Represents a count of unique sponsors for total sponsors count goals.\n   */\n  targetValue: Scalars[\"Int\"][\"output\"];\n  /** A brief summary of the kind and target value of this goal. */\n  title: Scalars[\"String\"][\"output\"];\n};\n\n/** The different kinds of goals a GitHub Sponsors member can have. */\nexport enum SponsorsGoalKind {\n  /** The goal is about getting a certain amount in USD from sponsorships each month. */\n  MonthlySponsorshipAmount = \"MONTHLY_SPONSORSHIP_AMOUNT\",\n  /** The goal is about reaching a certain number of sponsors. */\n  TotalSponsorsCount = \"TOTAL_SPONSORS_COUNT\",\n}\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListing = Node & {\n  __typename?: \"SponsorsListing\";\n  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */\n  activeGoal?: Maybe<SponsorsGoal>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The full description of the listing. */\n  fullDescription: Scalars[\"String\"][\"output\"];\n  /** The full description of the listing rendered to HTML. */\n  fullDescriptionHTML: Scalars[\"HTML\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether this listing is publicly visible. */\n  isPublic: Scalars[\"Boolean\"][\"output\"];\n  /** The listing's full name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** A future date on which this listing is eligible to receive a payout. */\n  nextPayoutDate?: Maybe<Scalars[\"Date\"][\"output\"]>;\n  /** The short description of the listing. */\n  shortDescription: Scalars[\"String\"][\"output\"];\n  /** The short name of the listing. */\n  slug: Scalars[\"String\"][\"output\"];\n  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */\n  sponsorable: Sponsorable;\n  /** The published tiers for this GitHub Sponsors listing. */\n  tiers?: Maybe<SponsorsTierConnection>;\n};\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListingTiersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorsTierOrder>;\n};\n\n/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */\nexport type SponsorsTier = Node & {\n  __typename?: \"SponsorsTier\";\n  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\n  adminInfo?: Maybe<SponsorsTierAdminInfo>;\n  /**\n   * Get a different tier for this tier's maintainer that is at the same frequency\n   * as this tier but with an equal or lesser cost. Returns the published tier with\n   * the monthly price closest to this tier's without going over.\n   */\n  closestLesserValueTier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The description of the tier. */\n  description: Scalars[\"String\"][\"output\"];\n  /** The tier description rendered to HTML */\n  descriptionHTML: Scalars[\"HTML\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /**\n   * Whether this tier was chosen at checkout time by the sponsor rather than\n   * defined ahead of time by the maintainer who manages the Sponsors listing.\n   */\n  isCustomAmount: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this tier is only for use with one-time sponsorships. */\n  isOneTime: Scalars[\"Boolean\"][\"output\"];\n  /** How much this tier costs per month in cents. */\n  monthlyPriceInCents: Scalars[\"Int\"][\"output\"];\n  /** How much this tier costs per month in USD. */\n  monthlyPriceInDollars: Scalars[\"Int\"][\"output\"];\n  /** The name of the tier. */\n  name: Scalars[\"String\"][\"output\"];\n  /** The sponsors listing that this tier belongs to. */\n  sponsorsListing: SponsorsListing;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfo = {\n  __typename?: \"SponsorsTierAdminInfo\";\n  /** The sponsorships associated with this tier. */\n  sponsorships: SponsorshipConnection;\n};\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfoSponsorshipsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includePrivate?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** The connection type for SponsorsTier. */\nexport type SponsorsTierConnection = {\n  __typename?: \"SponsorsTierConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsTierEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsTier>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SponsorsTierEdge = {\n  __typename?: \"SponsorsTierEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsTier>;\n};\n\n/** Ordering options for Sponsors tiers connections. */\nexport type SponsorsTierOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order tiers by. */\n  field: SponsorsTierOrderField;\n};\n\n/** Properties by which Sponsors tiers connections can be ordered. */\nexport enum SponsorsTierOrderField {\n  /** Order tiers by creation time. */\n  CreatedAt = \"CREATED_AT\",\n  /** Order tiers by their monthly price in cents */\n  MonthlyPriceInCents = \"MONTHLY_PRICE_IN_CENTS\",\n}\n\n/** A sponsorship relationship between a sponsor and a maintainer */\nexport type Sponsorship = Node & {\n  __typename?: \"Sponsorship\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */\n  isOneTimePayment: Scalars[\"Boolean\"][\"output\"];\n  /**\n   * Check if the sponsor has chosen to receive sponsorship update emails sent from\n   * the sponsorable. Only returns a non-null value when the viewer has permission to know this.\n   */\n  isSponsorOptedIntoEmail?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /**\n   * The entity that is being sponsored\n   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.\n   */\n  maintainer: User;\n  /** The privacy level for this sponsorship. */\n  privacyLevel: SponsorshipPrivacy;\n  /**\n   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.\n   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.\n   */\n  sponsor?: Maybe<User>;\n  /** The user or organization that is sponsoring, if you have permission to view them. */\n  sponsorEntity?: Maybe<Sponsor>;\n  /** The entity that is being sponsored */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier */\n  tier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the current tier was chosen for this sponsorship. */\n  tierSelectedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n};\n\n/** The connection type for Sponsorship. */\nexport type SponsorshipConnection = {\n  __typename?: \"SponsorshipConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsorship>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n  /**\n   * The total amount in cents of all recurring sponsorships in the connection\n   * whose amount you can view. Does not include one-time sponsorships.\n   */\n  totalRecurringMonthlyPriceInCents: Scalars[\"Int\"][\"output\"];\n  /**\n   * The total amount in USD of all recurring sponsorships in the connection whose\n   * amount you can view. Does not include one-time sponsorships.\n   */\n  totalRecurringMonthlyPriceInDollars: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipEdge = {\n  __typename?: \"SponsorshipEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsorship>;\n};\n\n/** An update sent to sponsors of a user or organization on GitHub Sponsors. */\nexport type SponsorshipNewsletter = Node & {\n  __typename?: \"SponsorshipNewsletter\";\n  /** The contents of the newsletter, the message the sponsorable wanted to give. */\n  body: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Indicates if the newsletter has been made available to sponsors. */\n  isPublished: Scalars[\"Boolean\"][\"output\"];\n  /** The user or organization this newsletter is from. */\n  sponsorable: Sponsorable;\n  /** The subject of the newsletter, what it's about. */\n  subject: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** The connection type for SponsorshipNewsletter. */\nexport type SponsorshipNewsletterConnection = {\n  __typename?: \"SponsorshipNewsletterConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipNewsletterEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorshipNewsletter>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipNewsletterEdge = {\n  __typename?: \"SponsorshipNewsletterEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorshipNewsletter>;\n};\n\n/** Ordering options for sponsorship newsletter connections. */\nexport type SponsorshipNewsletterOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship newsletters by. */\n  field: SponsorshipNewsletterOrderField;\n};\n\n/** Properties by which sponsorship update connections can be ordered. */\nexport enum SponsorshipNewsletterOrderField {\n  /** Order sponsorship newsletters by when they were created. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** Ordering options for sponsorship connections. */\nexport type SponsorshipOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship by. */\n  field: SponsorshipOrderField;\n};\n\n/** Properties by which sponsorship connections can be ordered. */\nexport enum SponsorshipOrderField {\n  /** Order sponsorship by creation time. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** The privacy of a sponsorship */\nexport enum SponsorshipPrivacy {\n  /** Private */\n  Private = \"PRIVATE\",\n  /** Public */\n  Public = \"PUBLIC\",\n}\n\n/** Ways in which star connections can be ordered. */\nexport type StarOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: StarOrderField;\n};\n\n/** Properties by which star connections can be ordered. */\nexport enum StarOrderField {\n  /** Allows ordering a list of stars by when they were created. */\n  StarredAt = \"STARRED_AT\",\n}\n\n/** The connection type for User. */\nexport type StargazerConnection = {\n  __typename?: \"StargazerConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StargazerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user that's starred a repository. */\nexport type StargazerEdge = {\n  __typename?: \"StargazerEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  node: User;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** Things that can be starred. */\nexport type Starrable = {\n  id: Scalars[\"ID\"][\"output\"];\n  /** Returns a count of how many stargazers there are on this object */\n  stargazerCount: Scalars[\"Int\"][\"output\"];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Things that can be starred. */\nexport type StarrableStargazersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** The connection type for Repository. */\nexport type StarredRepositoryConnection = {\n  __typename?: \"StarredRepositoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarredRepositoryEdge>>>;\n  /** Is the list of stars for this user truncated? This is true for users that have many stars. */\n  isOverLimit: Scalars[\"Boolean\"][\"output\"];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a starred repository. */\nexport type StarredRepositoryEdge = {\n  __typename?: \"StarredRepositoryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  node: Repository;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** Autogenerated input type of StartRepositoryMigration */\nexport type StartRepositoryMigrationInput = {\n  /** The Octoshift migration source access token. */\n  accessToken?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Whether to continue the migration on error */\n  continueOnError?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The signed URL to access the user-uploaded git archive */\n  gitArchiveUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The signed URL to access the user-uploaded metadata archive */\n  metadataArchiveUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the organization that will own the imported repository. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The name of the imported repository. */\n  repositoryName: Scalars[\"String\"][\"input\"];\n  /** Whether to skip migrating releases for the repository. */\n  skipReleases?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The ID of the Octoshift migration source. */\n  sourceId: Scalars[\"ID\"][\"input\"];\n  /** The Octoshift migration source repository URL. */\n  sourceRepositoryUrl: Scalars[\"URI\"][\"input\"];\n};\n\n/** Autogenerated return type of StartRepositoryMigration */\nexport type StartRepositoryMigrationPayload = {\n  __typename?: \"StartRepositoryMigrationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The new Octoshift repository migration. */\n  repositoryMigration?: Maybe<RepositoryMigration>;\n};\n\n/** Represents a commit status. */\nexport type Status = Node & {\n  __typename?: \"Status\";\n  /** A list of status contexts and check runs for this commit. */\n  combinedContexts: StatusCheckRollupContextConnection;\n  /** The commit this status is attached to. */\n  commit?: Maybe<Commit>;\n  /** Looks up an individual status context by context name. */\n  context?: Maybe<StatusContext>;\n  /** The individual status contexts for this commit. */\n  contexts: Array<StatusContext>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The combined commit status. */\n  state: StatusState;\n};\n\n/** Represents a commit status. */\nexport type StatusCombinedContextsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents a commit status. */\nexport type StatusContextArgs = {\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollup = Node & {\n  __typename?: \"StatusCheckRollup\";\n  /** The commit the status and check runs are attached to. */\n  commit?: Maybe<Commit>;\n  /** A list of status contexts and check runs for this commit. */\n  contexts: StatusCheckRollupContextConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The combined status for the commit. */\n  state: StatusState;\n};\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollupContextsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Types that can be inside a StatusCheckRollup context. */\nexport type StatusCheckRollupContext = CheckRun | StatusContext;\n\n/** The connection type for StatusCheckRollupContext. */\nexport type StatusCheckRollupContextConnection = {\n  __typename?: \"StatusCheckRollupContextConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StatusCheckRollupContextEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<StatusCheckRollupContext>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type StatusCheckRollupContextEdge = {\n  __typename?: \"StatusCheckRollupContextEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<StatusCheckRollupContext>;\n};\n\n/** Represents an individual commit status context */\nexport type StatusContext = Node &\n  RequirableByPullRequest & {\n    __typename?: \"StatusContext\";\n    /** The avatar of the OAuth application or the user that created the status */\n    avatarUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** This commit this status context is attached to. */\n    commit?: Maybe<Commit>;\n    /** The name of this status context. */\n    context: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** The actor who created this status context. */\n    creator?: Maybe<Actor>;\n    /** The description for this status context. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether this is required to pass before merging for a specific pull request. */\n    isRequired: Scalars[\"Boolean\"][\"output\"];\n    /** The state of this status context. */\n    state: StatusState;\n    /** The URL for this status context. */\n    targetUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Represents an individual commit status context */\nexport type StatusContextAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Represents an individual commit status context */\nexport type StatusContextIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  pullRequestNumber?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The possible commit status states. */\nexport enum StatusState {\n  /** Status is errored. */\n  Error = \"ERROR\",\n  /** Status is expected. */\n  Expected = \"EXPECTED\",\n  /** Status is failing. */\n  Failure = \"FAILURE\",\n  /** Status is pending. */\n  Pending = \"PENDING\",\n  /** Status is successful. */\n  Success = \"SUCCESS\",\n}\n\n/** Autogenerated input type of SubmitPullRequestReview */\nexport type SubmitPullRequestReviewInput = {\n  /** The text field to set on the Pull Request Review. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The event to send to the Pull Request Review. */\n  event: PullRequestReviewEvent;\n  /** The Pull Request ID to submit any pending reviews. */\n  pullRequestId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The Pull Request Review ID to submit. */\n  pullRequestReviewId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of SubmitPullRequestReview */\nexport type SubmitPullRequestReviewPayload = {\n  __typename?: \"SubmitPullRequestReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The submitted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** A pointer to a repository at a specific revision embedded inside another repository. */\nexport type Submodule = {\n  __typename?: \"Submodule\";\n  /** The branch of the upstream submodule for tracking updates */\n  branch?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The git URL of the submodule repository */\n  gitUrl: Scalars[\"URI\"][\"output\"];\n  /** The name of the submodule in .gitmodules */\n  name: Scalars[\"String\"][\"output\"];\n  /** The path in the superproject that this submodule is located in */\n  path: Scalars[\"String\"][\"output\"];\n  /** The commit revision of the subproject repository being tracked by the submodule */\n  subprojectCommitOid?: Maybe<Scalars[\"GitObjectID\"][\"output\"]>;\n};\n\n/** The connection type for Submodule. */\nexport type SubmoduleConnection = {\n  __typename?: \"SubmoduleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SubmoduleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Submodule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type SubmoduleEdge = {\n  __typename?: \"SubmoduleEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Submodule>;\n};\n\n/** Entities that can be subscribed to for web and email notifications. */\nexport type Subscribable = {\n  id: Scalars[\"ID\"][\"output\"];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n/** Represents a 'subscribed' event on a given `Subscribable`. */\nexport type SubscribedEvent = Node & {\n  __typename?: \"SubscribedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** The possible states of a subscription. */\nexport enum SubscriptionState {\n  /** The User is never notified. */\n  Ignored = \"IGNORED\",\n  /** The User is notified of all conversations. */\n  Subscribed = \"SUBSCRIBED\",\n  /** The User is only notified when participating or @mentioned. */\n  Unsubscribed = \"UNSUBSCRIBED\",\n}\n\n/** A suggestion to review a pull request based on a user's commit history and review comments. */\nexport type SuggestedReviewer = {\n  __typename?: \"SuggestedReviewer\";\n  /** Is this suggestion based on past commits? */\n  isAuthor: Scalars[\"Boolean\"][\"output\"];\n  /** Is this suggestion based on past review comments? */\n  isCommenter: Scalars[\"Boolean\"][\"output\"];\n  /** Identifies the user suggested to review the pull request. */\n  reviewer: User;\n};\n\n/** Represents a Git tag. */\nexport type Tag = GitObject &\n  Node & {\n    __typename?: \"Tag\";\n    /** An abbreviated version of the Git object ID */\n    abbreviatedOid: Scalars[\"String\"][\"output\"];\n    /** The HTTP path for this Git object */\n    commitResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this Git object */\n    commitUrl: Scalars[\"URI\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** The Git tag message. */\n    message?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The Git tag name. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The Git object ID */\n    oid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The Repository the Git object belongs to */\n    repository: Repository;\n    /** Details about the tag author. */\n    tagger?: Maybe<GitActor>;\n    /** The Git object the tag points to. */\n    target: GitObject;\n  };\n\n/** A team of users in an organization. */\nexport type Team = MemberStatusable &\n  Node &\n  Subscribable & {\n    __typename?: \"Team\";\n    /** A list of teams that are ancestors of this team. */\n    ancestors: TeamConnection;\n    /** A URL pointing to the team's avatar. */\n    avatarUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** List of child teams belonging to this team */\n    childTeams: TeamConnection;\n    /** The slug corresponding to the organization and team. */\n    combinedSlug: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The description of the team. */\n    description?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Find a team discussion by its number. */\n    discussion?: Maybe<TeamDiscussion>;\n    /** A list of team discussions. */\n    discussions: TeamDiscussionConnection;\n    /** The HTTP path for team discussions */\n    discussionsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for team discussions */\n    discussionsUrl: Scalars[\"URI\"][\"output\"];\n    /** The HTTP path for editing this team */\n    editTeamResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for editing this team */\n    editTeamUrl: Scalars[\"URI\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** A list of pending invitations for users to this team */\n    invitations?: Maybe<OrganizationInvitationConnection>;\n    /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n    memberStatuses: UserStatusConnection;\n    /** A list of users who are members of this team. */\n    members: TeamMemberConnection;\n    /** The HTTP path for the team' members */\n    membersResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for the team' members */\n    membersUrl: Scalars[\"URI\"][\"output\"];\n    /** The name of the team. */\n    name: Scalars[\"String\"][\"output\"];\n    /** The HTTP path creating a new team */\n    newTeamResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL creating a new team */\n    newTeamUrl: Scalars[\"URI\"][\"output\"];\n    /** The organization that owns this team. */\n    organization: Organization;\n    /** The parent team of the team. */\n    parentTeam?: Maybe<Team>;\n    /** The level of privacy the team has. */\n    privacy: TeamPrivacy;\n    /** A list of repositories this team has access to. */\n    repositories: TeamRepositoryConnection;\n    /** The HTTP path for this team's repositories */\n    repositoriesResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this team's repositories */\n    repositoriesUrl: Scalars[\"URI\"][\"output\"];\n    /** The HTTP path for this team */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** What algorithm is used for review assignment for this team */\n    reviewRequestDelegationAlgorithm?: Maybe<TeamReviewAssignmentAlgorithm>;\n    /** True if review assignment is enabled for this team */\n    reviewRequestDelegationEnabled: Scalars[\"Boolean\"][\"output\"];\n    /** How many team members are required for review assignment for this team */\n    reviewRequestDelegationMemberCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** When assigning team members via delegation, whether the entire team should be notified as well. */\n    reviewRequestDelegationNotifyTeam: Scalars[\"Boolean\"][\"output\"];\n    /** The slug corresponding to the team. */\n    slug: Scalars[\"String\"][\"output\"];\n    /** The HTTP path for this team's teams */\n    teamsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this team's teams */\n    teamsUrl: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this team */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Team is adminable by the viewer. */\n    viewerCanAdminister: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n  };\n\n/** A team of users in an organization. */\nexport type TeamAncestorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A team of users in an organization. */\nexport type TeamAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A team of users in an organization. */\nexport type TeamChildTeamsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  immediateOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<TeamOrder>;\n  userLogins?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n};\n\n/** A team of users in an organization. */\nexport type TeamDiscussionArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A team of users in an organization. */\nexport type TeamDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isPinned?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<TeamDiscussionOrder>;\n};\n\n/** A team of users in an organization. */\nexport type TeamInvitationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A team of users in an organization. */\nexport type TeamMemberStatusesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n/** A team of users in an organization. */\nexport type TeamMembersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  membership?: InputMaybe<TeamMembershipType>;\n  orderBy?: InputMaybe<TeamMemberOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  role?: InputMaybe<TeamMemberRole>;\n};\n\n/** A team of users in an organization. */\nexport type TeamRepositoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<TeamRepositoryOrder>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Audit log entry for a team.add_member event. */\nexport type TeamAddMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  TeamAuditEntryData & {\n    __typename?: \"TeamAddMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the team was mapped to an LDAP Group. */\n    isLdapMapped?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The team associated with the action */\n    team?: Maybe<Team>;\n    /** The name of the team */\n    teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for this team */\n    teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for this team */\n    teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a team.add_repository event. */\nexport type TeamAddRepositoryAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData &\n  TeamAuditEntryData & {\n    __typename?: \"TeamAddRepositoryAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the team was mapped to an LDAP Group. */\n    isLdapMapped?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The team associated with the action */\n    team?: Maybe<Team>;\n    /** The name of the team */\n    teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for this team */\n    teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for this team */\n    teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Metadata for an audit entry with action team.* */\nexport type TeamAuditEntryData = {\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n};\n\n/** Audit log entry for a team.change_parent_team event. */\nexport type TeamChangeParentTeamAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  TeamAuditEntryData & {\n    __typename?: \"TeamChangeParentTeamAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the team was mapped to an LDAP Group. */\n    isLdapMapped?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The new parent team. */\n    parentTeam?: Maybe<Team>;\n    /** The name of the new parent team */\n    parentTeamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The name of the former parent team */\n    parentTeamNameWas?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the parent team */\n    parentTeamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the parent team */\n    parentTeamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The former parent team. */\n    parentTeamWas?: Maybe<Team>;\n    /** The HTTP path for the previous parent team */\n    parentTeamWasResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the previous parent team */\n    parentTeamWasUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The team associated with the action */\n    team?: Maybe<Team>;\n    /** The name of the team */\n    teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for this team */\n    teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for this team */\n    teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The connection type for Team. */\nexport type TeamConnection = {\n  __typename?: \"TeamConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Team>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** A team discussion. */\nexport type TeamDiscussion = Comment &\n  Deletable &\n  Node &\n  Reactable &\n  Subscribable &\n  UniformResourceLocatable &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"TeamDiscussion\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the discussion's team. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The body as Markdown. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** Identifies the discussion body hash. */\n    bodyVersion: Scalars[\"String\"][\"output\"];\n    /** A list of comments on this discussion. */\n    comments: TeamDiscussionCommentConnection;\n    /** The HTTP path for discussion comments */\n    commentsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for discussion comments */\n    commentsUrl: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the discussion is pinned. */\n    isPinned: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the discussion is only visible to team members and org admins. */\n    isPrivate: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the discussion within its team. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The HTTP path for this discussion */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** The team that defines the context of this discussion. */\n    team: Team;\n    /** The title of the discussion */\n    title: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this discussion */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the current viewer can pin this discussion. */\n    viewerCanPin: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the viewer is able to change their subscription status for the repository. */\n    viewerCanSubscribe: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n    viewerSubscription?: Maybe<SubscriptionState>;\n  };\n\n/** A team discussion. */\nexport type TeamDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  fromComment?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<TeamDiscussionCommentOrder>;\n};\n\n/** A team discussion. */\nexport type TeamDiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A team discussion. */\nexport type TeamDiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionComment = Comment &\n  Deletable &\n  Node &\n  Reactable &\n  UniformResourceLocatable &\n  Updatable &\n  UpdatableComment & {\n    __typename?: \"TeamDiscussionComment\";\n    /** The actor who authored the comment. */\n    author?: Maybe<Actor>;\n    /** Author's association with the comment's team. */\n    authorAssociation: CommentAuthorAssociation;\n    /** The body as Markdown. */\n    body: Scalars[\"String\"][\"output\"];\n    /** The body rendered to HTML. */\n    bodyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The body rendered to text. */\n    bodyText: Scalars[\"String\"][\"output\"];\n    /** The current version of the body content. */\n    bodyVersion: Scalars[\"String\"][\"output\"];\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Check if this comment was created via an email reply. */\n    createdViaEmail: Scalars[\"Boolean\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The discussion this comment is about. */\n    discussion: TeamDiscussion;\n    /** The actor who edited the comment. */\n    editor?: Maybe<Actor>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** Check if this comment was edited and includes an edit with the creation data */\n    includesCreatedEdit: Scalars[\"Boolean\"][\"output\"];\n    /** The moment the editor made the last edit */\n    lastEditedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** Identifies the comment number. */\n    number: Scalars[\"Int\"][\"output\"];\n    /** Identifies when the comment was published at. */\n    publishedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n    /** A list of reactions grouped by content left on the subject. */\n    reactionGroups?: Maybe<Array<ReactionGroup>>;\n    /** A list of Reactions left on the Issue. */\n    reactions: ReactionConnection;\n    /** The HTTP path for this comment */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this comment */\n    url: Scalars[\"URI\"][\"output\"];\n    /** A list of edits to this content. */\n    userContentEdits?: Maybe<UserContentEditConnection>;\n    /** Check if the current viewer can delete this object. */\n    viewerCanDelete: Scalars[\"Boolean\"][\"output\"];\n    /** Can user react to this subject */\n    viewerCanReact: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the current viewer can update this object. */\n    viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n    /** Reasons why the current viewer can not update this comment. */\n    viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n    /** Did the viewer author this comment. */\n    viewerDidAuthor: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** The connection type for TeamDiscussionComment. */\nexport type TeamDiscussionCommentConnection = {\n  __typename?: \"TeamDiscussionCommentConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionCommentEdge = {\n  __typename?: \"TeamDiscussionCommentEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussionComment>;\n};\n\n/** Ways in which team discussion comment connections can be ordered. */\nexport type TeamDiscussionCommentOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionCommentOrderField;\n};\n\n/** Properties by which team discussion comment connections can be ordered. */\nexport enum TeamDiscussionCommentOrderField {\n  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */\n  Number = \"NUMBER\",\n}\n\n/** The connection type for TeamDiscussion. */\nexport type TeamDiscussionConnection = {\n  __typename?: \"TeamDiscussionConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionEdge = {\n  __typename?: \"TeamDiscussionEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussion>;\n};\n\n/** Ways in which team discussion connections can be ordered. */\nexport type TeamDiscussionOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionOrderField;\n};\n\n/** Properties by which team discussion connections can be ordered. */\nexport enum TeamDiscussionOrderField {\n  /** Allows chronological ordering of team discussions. */\n  CreatedAt = \"CREATED_AT\",\n}\n\n/** An edge in a connection. */\nexport type TeamEdge = {\n  __typename?: \"TeamEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<Team>;\n};\n\n/** The connection type for User. */\nexport type TeamMemberConnection = {\n  __typename?: \"TeamMemberConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a user who is a member of a team. */\nexport type TeamMemberEdge = {\n  __typename?: \"TeamMemberEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The HTTP path to the organization's member access page. */\n  memberAccessResourcePath: Scalars[\"URI\"][\"output\"];\n  /** The HTTP URL to the organization's member access page. */\n  memberAccessUrl: Scalars[\"URI\"][\"output\"];\n  node: User;\n  /** The role the member has on the team. */\n  role: TeamMemberRole;\n};\n\n/** Ordering options for team member connections */\nexport type TeamMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order team members by. */\n  field: TeamMemberOrderField;\n};\n\n/** Properties by which team member connections can be ordered. */\nexport enum TeamMemberOrderField {\n  /** Order team members by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order team members by login */\n  Login = \"LOGIN\",\n}\n\n/** The possible team member roles; either 'maintainer' or 'member'. */\nexport enum TeamMemberRole {\n  /** A team maintainer has permission to add and remove team members. */\n  Maintainer = \"MAINTAINER\",\n  /** A team member has no administrative permissions on the team. */\n  Member = \"MEMBER\",\n}\n\n/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */\nexport enum TeamMembershipType {\n  /** Includes immediate and child team members for the team. */\n  All = \"ALL\",\n  /** Includes only child team members for the team. */\n  ChildTeam = \"CHILD_TEAM\",\n  /** Includes only immediate members of the team. */\n  Immediate = \"IMMEDIATE\",\n}\n\n/** Ways in which team connections can be ordered. */\nexport type TeamOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: TeamOrderField;\n};\n\n/** Properties by which team connections can be ordered. */\nexport enum TeamOrderField {\n  /** Allows ordering a list of teams by name. */\n  Name = \"NAME\",\n}\n\n/** The possible team privacy values. */\nexport enum TeamPrivacy {\n  /** A secret team can only be seen by its members. */\n  Secret = \"SECRET\",\n  /** A visible team can be seen and @mentioned by every member of the organization. */\n  Visible = \"VISIBLE\",\n}\n\n/** Audit log entry for a team.remove_member event. */\nexport type TeamRemoveMemberAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  TeamAuditEntryData & {\n    __typename?: \"TeamRemoveMemberAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the team was mapped to an LDAP Group. */\n    isLdapMapped?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The team associated with the action */\n    team?: Maybe<Team>;\n    /** The name of the team */\n    teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for this team */\n    teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for this team */\n    teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** Audit log entry for a team.remove_repository event. */\nexport type TeamRemoveRepositoryAuditEntry = AuditEntry &\n  Node &\n  OrganizationAuditEntryData &\n  RepositoryAuditEntryData &\n  TeamAuditEntryData & {\n    __typename?: \"TeamRemoveRepositoryAuditEntry\";\n    /** The action name */\n    action: Scalars[\"String\"][\"output\"];\n    /** The user who initiated the action */\n    actor?: Maybe<AuditEntryActor>;\n    /** The IP address of the actor */\n    actorIp?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** A readable representation of the actor's location */\n    actorLocation?: Maybe<ActorLocation>;\n    /** The username of the user who initiated the action */\n    actorLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the actor. */\n    actorResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the actor. */\n    actorUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The time the action was initiated */\n    createdAt: Scalars[\"PreciseDateTime\"][\"output\"];\n    id: Scalars[\"ID\"][\"output\"];\n    /** Whether the team was mapped to an LDAP Group. */\n    isLdapMapped?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n    /** The corresponding operation type for the action */\n    operationType?: Maybe<OperationType>;\n    /** The Organization associated with the Audit Entry. */\n    organization?: Maybe<Organization>;\n    /** The name of the Organization. */\n    organizationName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the organization */\n    organizationResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the organization */\n    organizationUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The repository associated with the action */\n    repository?: Maybe<Repository>;\n    /** The name of the repository */\n    repositoryName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the repository */\n    repositoryResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the repository */\n    repositoryUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The team associated with the action */\n    team?: Maybe<Team>;\n    /** The name of the team */\n    teamName?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for this team */\n    teamResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for this team */\n    teamUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The user affected by the action */\n    user?: Maybe<User>;\n    /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n    userLogin?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The HTTP path for the user. */\n    userResourcePath?: Maybe<Scalars[\"URI\"][\"output\"]>;\n    /** The HTTP URL for the user. */\n    userUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** The connection type for Repository. */\nexport type TeamRepositoryConnection = {\n  __typename?: \"TeamRepositoryConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamRepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** Represents a team repository. */\nexport type TeamRepositoryEdge = {\n  __typename?: \"TeamRepositoryEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  node: Repository;\n  /** The permission level the team has on the repository */\n  permission: RepositoryPermission;\n};\n\n/** Ordering options for team repository connections */\nexport type TeamRepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: TeamRepositoryOrderField;\n};\n\n/** Properties by which team repository connections can be ordered. */\nexport enum TeamRepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = \"CREATED_AT\",\n  /** Order repositories by name */\n  Name = \"NAME\",\n  /** Order repositories by permission */\n  Permission = \"PERMISSION\",\n  /** Order repositories by push time */\n  PushedAt = \"PUSHED_AT\",\n  /** Order repositories by number of stargazers */\n  Stargazers = \"STARGAZERS\",\n  /** Order repositories by update time */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** The possible team review assignment algorithms */\nexport enum TeamReviewAssignmentAlgorithm {\n  /** Balance review load across the entire team */\n  LoadBalance = \"LOAD_BALANCE\",\n  /** Alternate reviews between each team member */\n  RoundRobin = \"ROUND_ROBIN\",\n}\n\n/** The role of a user on a team. */\nexport enum TeamRole {\n  /** User has admin rights on the team. */\n  Admin = \"ADMIN\",\n  /** User is a member of the team. */\n  Member = \"MEMBER\",\n}\n\n/** A text match within a search result. */\nexport type TextMatch = {\n  __typename?: \"TextMatch\";\n  /** The specific text fragment within the property matched on. */\n  fragment: Scalars[\"String\"][\"output\"];\n  /** Highlights within the matched fragment. */\n  highlights: Array<TextMatchHighlight>;\n  /** The property matched on. */\n  property: Scalars[\"String\"][\"output\"];\n};\n\n/** Represents a single highlight in a search result match. */\nexport type TextMatchHighlight = {\n  __typename?: \"TextMatchHighlight\";\n  /** The indice in the fragment where the matched text begins. */\n  beginIndice: Scalars[\"Int\"][\"output\"];\n  /** The indice in the fragment where the matched text ends. */\n  endIndice: Scalars[\"Int\"][\"output\"];\n  /** The text matched. */\n  text: Scalars[\"String\"][\"output\"];\n};\n\n/** A topic aggregates entities that are related to a subject. */\nexport type Topic = Node &\n  Starrable & {\n    __typename?: \"Topic\";\n    id: Scalars[\"ID\"][\"output\"];\n    /** The topic's name. */\n    name: Scalars[\"String\"][\"output\"];\n    /**\n     * A list of related topics, including aliases of this topic, sorted with the most relevant\n     * first. Returns up to 10 Topics.\n     */\n    relatedTopics: Array<Topic>;\n    /** A list of repositories. */\n    repositories: RepositoryConnection;\n    /** Returns a count of how many stargazers there are on this object */\n    stargazerCount: Scalars[\"Int\"][\"output\"];\n    /** A list of users who have starred this starrable. */\n    stargazers: StargazerConnection;\n    /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n    viewerHasStarred: Scalars[\"Boolean\"][\"output\"];\n  };\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRelatedTopicsArgs = {\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  sponsorableOnly?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicStargazersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Metadata for an audit entry with a topic. */\nexport type TopicAuditEntryData = {\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Reason that the suggested topic is declined. */\nexport enum TopicSuggestionDeclineReason {\n  /** The suggested topic is not relevant to the repository. */\n  NotRelevant = \"NOT_RELEVANT\",\n  /** The viewer does not like the suggested topic. */\n  PersonalPreference = \"PERSONAL_PREFERENCE\",\n  /** The suggested topic is too general for the repository. */\n  TooGeneral = \"TOO_GENERAL\",\n  /** The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1). */\n  TooSpecific = \"TOO_SPECIFIC\",\n}\n\n/** The possible states of a tracked issue. */\nexport enum TrackedIssueStates {\n  /** The tracked issue is closed */\n  Closed = \"CLOSED\",\n  /** The tracked issue is open */\n  Open = \"OPEN\",\n}\n\n/** Autogenerated input type of TransferIssue */\nexport type TransferIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the issue to be transferred */\n  issueId: Scalars[\"ID\"][\"input\"];\n  /** The Node ID of the repository the issue should be transferred to */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of TransferIssue */\nexport type TransferIssuePayload = {\n  __typename?: \"TransferIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue that was transferred */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents a 'transferred' event on a given issue or pull request. */\nexport type TransferredEvent = Node & {\n  __typename?: \"TransferredEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The repository this came from */\n  fromRepository?: Maybe<Repository>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Represents a Git tree. */\nexport type Tree = GitObject &\n  Node & {\n    __typename?: \"Tree\";\n    /** An abbreviated version of the Git object ID */\n    abbreviatedOid: Scalars[\"String\"][\"output\"];\n    /** The HTTP path for this Git object */\n    commitResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL for this Git object */\n    commitUrl: Scalars[\"URI\"][\"output\"];\n    /** A list of tree entries. */\n    entries?: Maybe<Array<TreeEntry>>;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The Git object ID */\n    oid: Scalars[\"GitObjectID\"][\"output\"];\n    /** The Repository the Git object belongs to */\n    repository: Repository;\n  };\n\n/** Represents a Git tree entry. */\nexport type TreeEntry = {\n  __typename?: \"TreeEntry\";\n  /** The extension of the file */\n  extension?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Whether or not this tree entry is generated */\n  isGenerated: Scalars[\"Boolean\"][\"output\"];\n  /** Number of lines in the file. */\n  lineCount?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** Entry file mode. */\n  mode: Scalars[\"Int\"][\"output\"];\n  /** Entry file name. */\n  name: Scalars[\"String\"][\"output\"];\n  /** Entry file object. */\n  object?: Maybe<GitObject>;\n  /** Entry file Git object ID. */\n  oid: Scalars[\"GitObjectID\"][\"output\"];\n  /** The full path of the file. */\n  path?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The Repository the tree entry belongs to */\n  repository: Repository;\n  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */\n  submodule?: Maybe<Submodule>;\n  /** Entry file type. */\n  type: Scalars[\"String\"][\"output\"];\n};\n\n/** Autogenerated input type of UnarchiveRepository */\nexport type UnarchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the repository to unarchive. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnarchiveRepository */\nexport type UnarchiveRepositoryPayload = {\n  __typename?: \"UnarchiveRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository that was unarchived. */\n  repository?: Maybe<Repository>;\n};\n\n/** Represents an 'unassigned' event on any assignable object. */\nexport type UnassignedEvent = Node & {\n  __typename?: \"UnassignedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was unassigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /**\n   * Identifies the subject (user) who was unassigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Autogenerated input type of UnfollowOrganization */\nexport type UnfollowOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the organization to unfollow. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnfollowOrganization */\nexport type UnfollowOrganizationPayload = {\n  __typename?: \"UnfollowOrganizationPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organization that was unfollowed. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of UnfollowUser */\nexport type UnfollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the user to unfollow. */\n  userId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnfollowUser */\nexport type UnfollowUserPayload = {\n  __typename?: \"UnfollowUserPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The user that was unfollowed. */\n  user?: Maybe<User>;\n};\n\n/** Represents a type that can be retrieved by a URL. */\nexport type UniformResourceLocatable = {\n  /** The HTML path to this resource. */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** The URL to this resource. */\n  url: Scalars[\"URI\"][\"output\"];\n};\n\n/** Represents an unknown signature on a Commit or Tag. */\nexport type UnknownSignature = GitSignature & {\n  __typename?: \"UnknownSignature\";\n  /** Email used to sign this object. */\n  email: Scalars[\"String\"][\"output\"];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars[\"Boolean\"][\"output\"];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars[\"String\"][\"output\"];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars[\"String\"][\"output\"];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Represents an 'unlabeled' event on a given issue or pull request. */\nexport type UnlabeledEvent = Node & {\n  __typename?: \"UnlabeledEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the label associated with the 'unlabeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Autogenerated input type of UnlinkRepositoryFromProject */\nexport type UnlinkRepositoryFromProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Project linked to the Repository. */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the Repository linked to the Project. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnlinkRepositoryFromProject */\nexport type UnlinkRepositoryFromProjectPayload = {\n  __typename?: \"UnlinkRepositoryFromProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UnlockLockable */\nexport type UnlockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the item to be unlocked. */\n  lockableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnlockLockable */\nexport type UnlockLockablePayload = {\n  __typename?: \"UnlockLockablePayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The item that was unlocked. */\n  unlockedRecord?: Maybe<Lockable>;\n};\n\n/** Represents an 'unlocked' event on a given issue or pull request. */\nexport type UnlockedEvent = Node & {\n  __typename?: \"UnlockedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Object that was unlocked. */\n  lockable: Lockable;\n};\n\n/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */\nexport type UnmarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion comment to unmark as an answer. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer */\nexport type UnmarkDiscussionCommentAsAnswerPayload = {\n  __typename?: \"UnmarkDiscussionCommentAsAnswerPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The discussion that includes the comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UnmarkFileAsViewed */\nexport type UnmarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The path of the file to mark as unviewed */\n  path: Scalars[\"String\"][\"input\"];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnmarkFileAsViewed */\nexport type UnmarkFileAsViewedPayload = {\n  __typename?: \"UnmarkFileAsViewedPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UnmarkIssueAsDuplicate */\nexport type UnmarkIssueAsDuplicateInput = {\n  /** ID of the issue or pull request currently considered canonical/authoritative/original. */\n  canonicalId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** ID of the issue or pull request currently marked as a duplicate. */\n  duplicateId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnmarkIssueAsDuplicate */\nexport type UnmarkIssueAsDuplicatePayload = {\n  __typename?: \"UnmarkIssueAsDuplicatePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue or pull request that was marked as a duplicate. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n};\n\n/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\nexport type UnmarkedAsDuplicateEvent = Node & {\n  __typename?: \"UnmarkedAsDuplicateEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Autogenerated input type of UnminimizeComment */\nexport type UnminimizeCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnminimizeComment */\nexport type UnminimizeCommentPayload = {\n  __typename?: \"UnminimizeCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The comment that was unminimized. */\n  unminimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of UnpinIssue */\nexport type UnpinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the issue to be unpinned */\n  issueId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnpinIssue */\nexport type UnpinIssuePayload = {\n  __typename?: \"UnpinIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue that was unpinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents an 'unpinned' event on a given issue or pull request. */\nexport type UnpinnedEvent = Node & {\n  __typename?: \"UnpinnedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Autogenerated input type of UnresolveReviewThread */\nexport type UnresolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the thread to unresolve */\n  threadId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UnresolveReviewThread */\nexport type UnresolveReviewThreadPayload = {\n  __typename?: \"UnresolveReviewThreadPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents an 'unsubscribed' event on a given `Subscribable`. */\nexport type UnsubscribedEvent = Node & {\n  __typename?: \"UnsubscribedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** Entities that can be updated. */\nexport type Updatable = {\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** Comments that can be updated. */\nexport type UpdatableComment = {\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n};\n\n/** Autogenerated input type of UpdateBranchProtectionRule */\nexport type UpdateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is branch creation a protected operation. */\n  blocksCreations?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The global relay id of the branch protection rule to be updated. */\n  branchProtectionRuleId: Scalars[\"ID\"][\"input\"];\n  /** A list of User or Team IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** A list of User or Team IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Can admins overwrite branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A list of User, Team or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** A list of User or Team IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n};\n\n/** Autogenerated return type of UpdateBranchProtectionRule */\nexport type UpdateBranchProtectionRulePayload = {\n  __typename?: \"UpdateBranchProtectionRulePayload\";\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateCheckRun */\nexport type UpdateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** The node of the check. */\n  checkRunId: Scalars[\"ID\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars[\"URI\"][\"input\"]>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the check. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of UpdateCheckRun */\nexport type UpdateCheckRunPayload = {\n  __typename?: \"UpdateCheckRunPayload\";\n  /** The updated check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateCheckSuitePreferences */\nexport type UpdateCheckSuitePreferencesInput = {\n  /** The check suite preferences to modify. */\n  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateCheckSuitePreferences */\nexport type UpdateCheckSuitePreferencesPayload = {\n  __typename?: \"UpdateCheckSuitePreferencesPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateDiscussionComment */\nexport type UpdateDiscussionCommentInput = {\n  /** The new contents of the comment body. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion comment to update. */\n  commentId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateDiscussionComment */\nexport type UpdateDiscussionCommentPayload = {\n  __typename?: \"UpdateDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The modified discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateDiscussion */\nexport type UpdateDiscussionInput = {\n  /** The new contents of the discussion body. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of a discussion category within the same repository to change this discussion to. */\n  categoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion to update. */\n  discussionId: Scalars[\"ID\"][\"input\"];\n  /** The new discussion title. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateDiscussion */\nexport type UpdateDiscussionPayload = {\n  __typename?: \"UpdateDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The modified discussion. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAdministratorRole */\nexport type UpdateEnterpriseAdministratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The login of a administrator whose role is being changed. */\n  login: Scalars[\"String\"][\"input\"];\n  /** The new role for the Enterprise administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAdministratorRole */\nexport type UpdateEnterpriseAdministratorRolePayload = {\n  __typename?: \"UpdateEnterpriseAdministratorRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A message confirming the result of changing the administrator's role. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the allow private repository forking setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the allow private repository forking setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {\n  __typename?: \"UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated allow private repository forking setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the base repository permission setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the base repository permission setting on the enterprise. */\n  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {\n  __typename?: \"UpdateEnterpriseDefaultRepositoryPermissionSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated base repository permission setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the base repository permission setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can change repository visibility setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can change repository visibility setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can change repository visibility setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can change repository visibility setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can create repositories setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** Allow members to create internal repositories. Defaults to current value. */\n  membersCanCreateInternalRepositories?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Allow members to create private repositories. Defaults to current value. */\n  membersCanCreatePrivateRepositories?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Allow members to create public repositories. Defaults to current value. */\n  membersCanCreatePublicRepositories?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** When false, allow member organizations to set their own repository creation member privileges. */\n  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * Value for the members can create repositories setting on the enterprise. This\n   * or the granular public/private/internal allowed fields (but not both) must be provided.\n   */\n  settingValue?: InputMaybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can create repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can create repositories setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can delete issues setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can delete issues setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanDeleteIssuesSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can delete issues setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete issues setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can delete repositories setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can delete repositories setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can delete repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete repositories setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can invite collaborators setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can invite collaborators setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can invite collaborators setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can invite collaborators setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can make purchases setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can make purchases setting on the enterprise. */\n  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanMakePurchasesSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can make purchases setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can make purchases setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can update protected branches setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can update protected branches setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can update protected branches setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can update protected branches setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the members can view dependency insights setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the members can view dependency insights setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {\n  __typename?: \"UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated members can view dependency insights setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can view dependency insights setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */\nexport type UpdateEnterpriseOrganizationProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the organization projects setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the organization projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting */\nexport type UpdateEnterpriseOrganizationProjectsSettingPayload = {\n  __typename?: \"UpdateEnterpriseOrganizationProjectsSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated organization projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the organization projects setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */\nexport type UpdateEnterpriseOwnerOrganizationRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Enterprise which the owner belongs to. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the organization for membership change. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n  /** The role to assume in the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole */\nexport type UpdateEnterpriseOwnerOrganizationRolePayload = {\n  __typename?: \"UpdateEnterpriseOwnerOrganizationRolePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A message confirming the result of changing the owner's organization role. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseProfile */\nexport type UpdateEnterpriseProfileInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The description of the enterprise. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Enterprise ID to update. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The location of the enterprise. */\n  location?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of the enterprise. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The URL of the enterprise's website. */\n  websiteUrl?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseProfile */\nexport type UpdateEnterpriseProfilePayload = {\n  __typename?: \"UpdateEnterpriseProfilePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */\nexport type UpdateEnterpriseRepositoryProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the repository projects setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the repository projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting */\nexport type UpdateEnterpriseRepositoryProjectsSettingPayload = {\n  __typename?: \"UpdateEnterpriseRepositoryProjectsSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated repository projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the repository projects setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */\nexport type UpdateEnterpriseTeamDiscussionsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the team discussions setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the team discussions setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting */\nexport type UpdateEnterpriseTeamDiscussionsSettingPayload = {\n  __typename?: \"UpdateEnterpriseTeamDiscussionsSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated team discussions setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the team discussions setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the enterprise on which to set the two factor authentication required setting. */\n  enterpriseId: Scalars[\"ID\"][\"input\"];\n  /** The value for the two factor authentication required setting on the enterprise. */\n  settingValue: EnterpriseEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {\n  __typename?: \"UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The enterprise with the updated two factor authentication required setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the two factor authentication required setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateEnvironment */\nexport type UpdateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The node ID of the environment. */\n  environmentId: Scalars[\"ID\"][\"input\"];\n  /** The ids of users or teams that can approve deployments to this environment */\n  reviewers?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The wait timer in minutes. */\n  waitTimer?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateEnvironment */\nexport type UpdateEnvironmentPayload = {\n  __typename?: \"UpdateEnvironmentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEnabledSetting */\nexport type UpdateIpAllowListEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the owner on which to set the IP allow list enabled setting. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The value for the IP allow list enabled setting. */\n  settingValue: IpAllowListEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEnabledSetting */\nexport type UpdateIpAllowListEnabledSettingPayload = {\n  __typename?: \"UpdateIpAllowListEnabledSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEntry */\nexport type UpdateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the IP allow list entry to update. */\n  ipAllowListEntryId: Scalars[\"ID\"][\"input\"];\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars[\"Boolean\"][\"input\"];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEntry */\nexport type UpdateIpAllowListEntryPayload = {\n  __typename?: \"UpdateIpAllowListEntryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The IP allow list entry that was updated. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the owner. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The value for the IP allow list configuration for installed GitHub Apps setting. */\n  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingPayload = {\n  __typename?: \"UpdateIpAllowListForInstalledAppsEnabledSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIssueComment */\nexport type UpdateIssueCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the IssueComment to modify. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateIssueComment */\nexport type UpdateIssueCommentPayload = {\n  __typename?: \"UpdateIssueCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated comment. */\n  issueComment?: Maybe<IssueComment>;\n};\n\n/** Autogenerated input type of UpdateIssue */\nexport type UpdateIssueInput = {\n  /** An array of Node IDs of users for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Issue to modify. */\n  id: Scalars[\"ID\"][\"input\"];\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The desired issue state. */\n  state?: InputMaybe<IssueState>;\n  /** The title for the issue. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateIssue */\nexport type UpdateIssuePayload = {\n  __typename?: \"UpdateIssuePayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of UpdateLabel */\nexport type UpdateLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A 6 character hex code, without the leading #, identifying the updated color of the label. */\n  color?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A brief description of the label, such as its purpose. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the label to be updated. */\n  id: Scalars[\"ID\"][\"input\"];\n  /** The updated name of the label. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateLabel */\nexport type UpdateLabelPayload = {\n  __typename?: \"UpdateLabelPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated label. */\n  label?: Maybe<Label>;\n};\n\n/** Autogenerated input type of UpdateNotificationRestrictionSetting */\nexport type UpdateNotificationRestrictionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the owner on which to set the restrict notifications setting. */\n  ownerId: Scalars[\"ID\"][\"input\"];\n  /** The value for the restrict notifications setting. */\n  settingValue: NotificationRestrictionSettingValue;\n};\n\n/** Autogenerated return type of UpdateNotificationRestrictionSetting */\nexport type UpdateNotificationRestrictionSettingPayload = {\n  __typename?: \"UpdateNotificationRestrictionSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The owner on which the setting was updated. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Enable forking of private repositories in the organization? */\n  forkingEnabled: Scalars[\"Boolean\"][\"input\"];\n  /** The ID of the organization on which to set the allow private repository forking setting. */\n  organizationId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {\n  __typename?: \"UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organization with the updated allow private repository forking setting. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of UpdateProjectCard */\nexport type UpdateProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Whether or not the ProjectCard should be archived */\n  isArchived?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The note of ProjectCard. */\n  note?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ProjectCard ID to update. */\n  projectCardId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateProjectCard */\nexport type UpdateProjectCardPayload = {\n  __typename?: \"UpdateProjectCardPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of UpdateProjectColumn */\nexport type UpdateProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of project column. */\n  name: Scalars[\"String\"][\"input\"];\n  /** The ProjectColumn ID to update. */\n  projectColumnId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateProjectColumn */\nexport type UpdateProjectColumnPayload = {\n  __typename?: \"UpdateProjectColumnPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated project column. */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of UpdateProjectDraftIssue */\nexport type UpdateProjectDraftIssueInput = {\n  /** The IDs of the assignees of the draft issue. */\n  assigneeIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The body of the draft issue. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the draft issue to update. */\n  draftIssueId: Scalars[\"ID\"][\"input\"];\n  /** The title of the draft issue. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateProjectDraftIssue */\nexport type UpdateProjectDraftIssuePayload = {\n  __typename?: \"UpdateProjectDraftIssuePayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The draft issue updated in the project. */\n  draftIssue?: Maybe<DraftIssue>;\n};\n\n/** Autogenerated input type of UpdateProject */\nexport type UpdateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The name of project. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Project ID to update. */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** Whether the project is public or not. */\n  public?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Whether the project is open or closed. */\n  state?: InputMaybe<ProjectState>;\n};\n\n/** Autogenerated input type of UpdateProjectNext */\nexport type UpdateProjectNextInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Set the project to closed or open. */\n  closed?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Set the readme description of the project. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the Project to update. */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** Set the project to public or private. */\n  public?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Set the short description of the project. */\n  shortDescription?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Set the title of the project. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated input type of UpdateProjectNextItemField */\nexport type UpdateProjectNextItemFieldInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The id of the field to be updated. */\n  fieldId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The id of the item to be updated. */\n  itemId: Scalars[\"ID\"][\"input\"];\n  /** The ID of the Project. */\n  projectId: Scalars[\"ID\"][\"input\"];\n  /** The value which will be set on the field. */\n  value: Scalars[\"String\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateProjectNextItemField */\nexport type UpdateProjectNextItemFieldPayload = {\n  __typename?: \"UpdateProjectNextItemFieldPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated item. */\n  projectNextItem?: Maybe<ProjectNextItem>;\n};\n\n/** Autogenerated return type of UpdateProjectNext */\nexport type UpdateProjectNextPayload = {\n  __typename?: \"UpdateProjectNextPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated Project. */\n  projectNext?: Maybe<ProjectNext>;\n};\n\n/** Autogenerated return type of UpdateProject */\nexport type UpdateProjectPayload = {\n  __typename?: \"UpdateProjectPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of UpdatePullRequestBranch */\nexport type UpdatePullRequestBranchInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The head ref oid for the upstream branch. */\n  expectedHeadOid?: InputMaybe<Scalars[\"GitObjectID\"][\"input\"]>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdatePullRequestBranch */\nexport type UpdatePullRequestBranchPayload = {\n  __typename?: \"UpdatePullRequestBranchPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequest */\nexport type UpdatePullRequestInput = {\n  /** An array of Node IDs of users for this pull request. */\n  assigneeIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository.\n   */\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** An array of Node IDs of labels for this pull request. */\n  labelIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The Node ID of the milestone for this pull request. */\n  milestoneId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** An array of Node IDs for projects associated with this pull request. */\n  projectIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars[\"ID\"][\"input\"];\n  /** The target state of the pull request. */\n  state?: InputMaybe<PullRequestUpdateState>;\n  /** The title of the pull request. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdatePullRequest */\nexport type UpdatePullRequestPayload = {\n  __typename?: \"UpdatePullRequestPayload\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReviewComment */\nexport type UpdatePullRequestReviewCommentInput = {\n  /** The text of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the comment to modify. */\n  pullRequestReviewCommentId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdatePullRequestReviewComment */\nexport type UpdatePullRequestReviewCommentPayload = {\n  __typename?: \"UpdatePullRequestReviewCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated comment. */\n  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReview */\nexport type UpdatePullRequestReviewInput = {\n  /** The contents of the pull request review body. */\n  body: Scalars[\"String\"][\"input\"];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdatePullRequestReview */\nexport type UpdatePullRequestReviewPayload = {\n  __typename?: \"UpdatePullRequestReviewPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of UpdateRef */\nexport type UpdateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Permit updates of branch Refs that are not fast-forwards? */\n  force?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The GitObjectID that the Ref shall be updated to target. */\n  oid: Scalars[\"GitObjectID\"][\"input\"];\n  /** The Node ID of the Ref to be updated. */\n  refId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateRef */\nexport type UpdateRefPayload = {\n  __typename?: \"UpdateRefPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated Ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of UpdateRefs */\nexport type UpdateRefsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A list of ref updates. */\n  refUpdates: Array<RefUpdate>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateRefs */\nexport type UpdateRefsPayload = {\n  __typename?: \"UpdateRefsPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** Autogenerated input type of UpdateRepository */\nexport type UpdateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A new description for the repository. Pass an empty string to erase the existing description. */\n  description?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Indicates if the repository should have the project boards feature enabled. */\n  hasProjectsEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */\n  homepageUrl?: InputMaybe<Scalars[\"URI\"][\"input\"]>;\n  /** The new name of the repository. */\n  name?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the repository to update. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /**\n   * Whether this repository should be marked as a template such that anyone who\n   * can access it can create new repositories with the same files and directory structure.\n   */\n  template?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateRepository */\nexport type UpdateRepositoryPayload = {\n  __typename?: \"UpdateRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateSponsorshipPreferences */\nexport type UpdateSponsorshipPreferencesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * Specify whether others should be able to see that the sponsor is sponsoring\n   * the sponsorable. Public visibility still does not reveal which tier is used.\n   */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateSponsorshipPreferences */\nexport type UpdateSponsorshipPreferencesPayload = {\n  __typename?: \"UpdateSponsorshipPreferencesPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The sponsorship that was updated. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of UpdateSubscription */\nexport type UpdateSubscriptionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The new state of the subscription. */\n  state: SubscriptionState;\n  /** The Node ID of the subscribable object to modify. */\n  subscribableId: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateSubscription */\nexport type UpdateSubscriptionPayload = {\n  __typename?: \"UpdateSubscriptionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The input subscribable entity. */\n  subscribable?: Maybe<Subscribable>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussionComment */\nexport type UpdateTeamDiscussionCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars[\"String\"][\"input\"];\n  /** The current version of the body content. */\n  bodyVersion?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the comment to modify. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of UpdateTeamDiscussionComment */\nexport type UpdateTeamDiscussionCommentPayload = {\n  __typename?: \"UpdateTeamDiscussionCommentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated comment. */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussion */\nexport type UpdateTeamDiscussionInput = {\n  /** The updated text of the discussion. */\n  body?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /**\n   * The current version of the body content. If provided, this update operation\n   * will be rejected if the given version does not match the latest version on the server.\n   */\n  bodyVersion?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the discussion to modify. */\n  id: Scalars[\"ID\"][\"input\"];\n  /** If provided, sets the pinned state of the updated discussion. */\n  pinned?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The updated title of the discussion. */\n  title?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateTeamDiscussion */\nexport type UpdateTeamDiscussionPayload = {\n  __typename?: \"UpdateTeamDiscussionPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The updated discussion. */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Autogenerated input type of UpdateTeamReviewAssignment */\nexport type UpdateTeamReviewAssignmentInput = {\n  /** The algorithm to use for review assignment */\n  algorithm?: InputMaybe<TeamReviewAssignmentAlgorithm>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Turn on or off review assignment */\n  enabled: Scalars[\"Boolean\"][\"input\"];\n  /** An array of team member IDs to exclude */\n  excludedTeamMemberIds?: InputMaybe<Array<Scalars[\"ID\"][\"input\"]>>;\n  /** The Node ID of the team to update review assignments of */\n  id: Scalars[\"ID\"][\"input\"];\n  /** Notify the entire team of the PR if it is delegated */\n  notifyTeam?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  /** The number of team members to assign */\n  teamMemberCount?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateTeamReviewAssignment */\nexport type UpdateTeamReviewAssignmentPayload = {\n  __typename?: \"UpdateTeamReviewAssignmentPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The team that was modified */\n  team?: Maybe<Team>;\n};\n\n/** Autogenerated input type of UpdateTeamsRepository */\nexport type UpdateTeamsRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** Permission that should be granted to the teams. */\n  permission: RepositoryPermission;\n  /** Repository ID being granted access to. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** A list of teams being granted access. Limit: 10 */\n  teamIds: Array<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateTeamsRepository */\nexport type UpdateTeamsRepositoryPayload = {\n  __typename?: \"UpdateTeamsRepositoryPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The repository that was updated. */\n  repository?: Maybe<Repository>;\n  /** The teams granted permission on the repository. */\n  teams?: Maybe<Array<Team>>;\n};\n\n/** Autogenerated input type of UpdateTopics */\nexport type UpdateTopicsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars[\"ID\"][\"input\"];\n  /** An array of topic names. */\n  topicNames: Array<Scalars[\"String\"][\"input\"]>;\n};\n\n/** Autogenerated return type of UpdateTopics */\nexport type UpdateTopicsPayload = {\n  __typename?: \"UpdateTopicsPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Names of the provided topics that are not valid. */\n  invalidTopicNames?: Maybe<Array<Scalars[\"String\"][\"output\"]>>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type User = Actor &\n  Node &\n  PackageOwner &\n  ProfileOwner &\n  ProjectNextOwner &\n  ProjectOwner &\n  ProjectV2Owner &\n  RepositoryDiscussionAuthor &\n  RepositoryDiscussionCommentAuthor &\n  RepositoryOwner &\n  Sponsorable &\n  UniformResourceLocatable & {\n    __typename?: \"User\";\n    /** Determine if this repository owner has any items that can be pinned to their profile. */\n    anyPinnableItems: Scalars[\"Boolean\"][\"output\"];\n    /** A URL pointing to the user's public avatar. */\n    avatarUrl: Scalars[\"URI\"][\"output\"];\n    /** The user's public profile bio. */\n    bio?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The user's public profile bio as HTML. */\n    bioHTML: Scalars[\"HTML\"][\"output\"];\n    /** Could this user receive email notifications, if the organization had notification restrictions enabled? */\n    canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars[\"Boolean\"][\"output\"];\n    /** A list of commit comments made by this user. */\n    commitComments: CommitCommentConnection;\n    /** The user's public profile company. */\n    company?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The user's public profile company as HTML. */\n    companyHTML: Scalars[\"HTML\"][\"output\"];\n    /** The collection of contributions this user has made to different repositories. */\n    contributionsCollection: ContributionsCollection;\n    /** Identifies the date and time when the object was created. */\n    createdAt: Scalars[\"DateTime\"][\"output\"];\n    /** Identifies the primary key from the database. */\n    databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n    /** The user's publicly visible profile email. */\n    email: Scalars[\"String\"][\"output\"];\n    /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n    estimatedNextSponsorsPayoutInCents: Scalars[\"Int\"][\"output\"];\n    /** A list of users the given user is followed by. */\n    followers: FollowerConnection;\n    /** A list of users the given user is following. */\n    following: FollowingConnection;\n    /** Find gist by repo name. */\n    gist?: Maybe<Gist>;\n    /** A list of gist comments made by this user. */\n    gistComments: GistCommentConnection;\n    /** A list of the Gists the user has created. */\n    gists: GistConnection;\n    /** True if this user/organization has a GitHub Sponsors listing. */\n    hasSponsorsListing: Scalars[\"Boolean\"][\"output\"];\n    /** The hovercard information for this user in a given context */\n    hovercard: Hovercard;\n    id: Scalars[\"ID\"][\"output\"];\n    /** The interaction ability settings for this user. */\n    interactionAbility?: Maybe<RepositoryInteractionAbility>;\n    /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */\n    isBountyHunter: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is a participant in the GitHub Campus Experts Program. */\n    isCampusExpert: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is a GitHub Developer Program member. */\n    isDeveloperProgramMember: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is a GitHub employee. */\n    isEmployee: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is following the viewer. Inverse of viewer_is_following */\n    isFollowingViewer: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is a member of the GitHub Stars Program. */\n    isGitHubStar: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the user has marked themselves as for hire. */\n    isHireable: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is a site administrator. */\n    isSiteAdmin: Scalars[\"Boolean\"][\"output\"];\n    /** Check if the given account is sponsoring this user/organization. */\n    isSponsoredBy: Scalars[\"Boolean\"][\"output\"];\n    /** True if the viewer is sponsored by this user/organization. */\n    isSponsoringViewer: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is the viewing user. */\n    isViewer: Scalars[\"Boolean\"][\"output\"];\n    /** A list of issue comments made by this user. */\n    issueComments: IssueCommentConnection;\n    /** A list of issues associated with this user. */\n    issues: IssueConnection;\n    /**\n     * Showcases a selection of repositories and gists that the profile owner has\n     * either curated or that have been selected automatically based on popularity.\n     */\n    itemShowcase: ProfileItemShowcase;\n    /** The user's public profile location. */\n    location?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** The username used to login. */\n    login: Scalars[\"String\"][\"output\"];\n    /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n    monthlyEstimatedSponsorsIncomeInCents: Scalars[\"Int\"][\"output\"];\n    /** The user's public profile name. */\n    name?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Find an organization by its login that the user belongs to. */\n    organization?: Maybe<Organization>;\n    /** Verified email addresses that match verified domains for a specified organization the user is a member of. */\n    organizationVerifiedDomainEmails: Array<Scalars[\"String\"][\"output\"]>;\n    /** A list of organizations the user belongs to. */\n    organizations: OrganizationConnection;\n    /** A list of packages under the owner. */\n    packages: PackageConnection;\n    /** A list of repositories and gists this profile owner can pin to their profile. */\n    pinnableItems: PinnableItemConnection;\n    /** A list of repositories and gists this profile owner has pinned to their profile */\n    pinnedItems: PinnableItemConnection;\n    /** Returns how many more items this profile owner can pin to their profile. */\n    pinnedItemsRemaining: Scalars[\"Int\"][\"output\"];\n    /** Find project by number. */\n    project?: Maybe<Project>;\n    /** Find a project by project (beta) number. */\n    projectNext?: Maybe<ProjectNext>;\n    /** A list of projects under the owner. */\n    projects: ProjectConnection;\n    /** A list of projects (beta) under the owner. */\n    projectsNext: ProjectNextConnection;\n    /** The HTTP path listing user's projects */\n    projectsResourcePath: Scalars[\"URI\"][\"output\"];\n    /** The HTTP URL listing user's projects */\n    projectsUrl: Scalars[\"URI\"][\"output\"];\n    /** A list of public keys associated with this user. */\n    publicKeys: PublicKeyConnection;\n    /** A list of pull requests associated with this user. */\n    pullRequests: PullRequestConnection;\n    /** A list of repositories that the user owns. */\n    repositories: RepositoryConnection;\n    /** A list of repositories that the user recently contributed to. */\n    repositoriesContributedTo: RepositoryConnection;\n    /** Find Repository. */\n    repository?: Maybe<Repository>;\n    /** Discussion comments this user has authored. */\n    repositoryDiscussionComments: DiscussionCommentConnection;\n    /** Discussions this user has started. */\n    repositoryDiscussions: DiscussionConnection;\n    /** The HTTP path for this user */\n    resourcePath: Scalars[\"URI\"][\"output\"];\n    /** Replies this user has saved */\n    savedReplies?: Maybe<SavedReplyConnection>;\n    /** List of users and organizations this entity is sponsoring. */\n    sponsoring: SponsorConnection;\n    /** List of sponsors for this user or organization. */\n    sponsors: SponsorConnection;\n    /** Events involving this sponsorable, such as new sponsorships. */\n    sponsorsActivities: SponsorsActivityConnection;\n    /** The GitHub Sponsors listing for this user or organization. */\n    sponsorsListing?: Maybe<SponsorsListing>;\n    /**\n     * The sponsorship from the viewer to this user/organization; that is, the\n     * sponsorship where you're the sponsor. Only returns a sponsorship if it is active.\n     */\n    sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n    /**\n     * The sponsorship from this user/organization to the viewer; that is, the\n     * sponsorship you're receiving. Only returns a sponsorship if it is active.\n     */\n    sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n    /** List of sponsorship updates sent from this sponsorable to sponsors. */\n    sponsorshipNewsletters: SponsorshipNewsletterConnection;\n    /** This object's sponsorships as the maintainer. */\n    sponsorshipsAsMaintainer: SponsorshipConnection;\n    /** This object's sponsorships as the sponsor. */\n    sponsorshipsAsSponsor: SponsorshipConnection;\n    /** Repositories the user has starred. */\n    starredRepositories: StarredRepositoryConnection;\n    /** The user's description of what they're currently doing. */\n    status?: Maybe<UserStatus>;\n    /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */\n    topRepositories: RepositoryConnection;\n    /** The user's Twitter username. */\n    twitterUsername?: Maybe<Scalars[\"String\"][\"output\"]>;\n    /** Identifies the date and time when the object was last updated. */\n    updatedAt: Scalars[\"DateTime\"][\"output\"];\n    /** The HTTP URL for this user */\n    url: Scalars[\"URI\"][\"output\"];\n    /** Can the viewer pin repositories and gists to the profile? */\n    viewerCanChangePinnedItems: Scalars[\"Boolean\"][\"output\"];\n    /** Can the current viewer create new projects on this owner. */\n    viewerCanCreateProjects: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the viewer is able to follow the user. */\n    viewerCanFollow: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not the viewer is able to sponsor this user/organization. */\n    viewerCanSponsor: Scalars[\"Boolean\"][\"output\"];\n    /** Whether or not this user is followed by the viewer. Inverse of is_following_viewer. */\n    viewerIsFollowing: Scalars[\"Boolean\"][\"output\"];\n    /** True if the viewer is sponsoring this user/organization. */\n    viewerIsSponsoring: Scalars[\"Boolean\"][\"output\"];\n    /** A list of repositories the given user is watching. */\n    watching: RepositoryConnection;\n    /** A URL pointing to the user's public website/blog. */\n    websiteUrl?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  };\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAvatarUrlArgs = {\n  size?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCommitCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserContributionsCollectionArgs = {\n  from?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n  organizationID?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n  to?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowingArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistArgs = {\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<GistOrder>;\n  privacy?: InputMaybe<GistPrivacy>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserHovercardArgs = {\n  primarySubjectId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIsSponsoredByArgs = {\n  accountLogin: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssueCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssuesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationVerifiedDomainEmailsArgs = {\n  login: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPackagesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  names?: InputMaybe<Array<InputMaybe<Scalars[\"String\"][\"input\"]>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnableItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnedItemsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectNextArgs = {\n  number: Scalars[\"Int\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsNextArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  query?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  sortBy?: InputMaybe<ProjectNextOrderField>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPublicKeysArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPullRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  baseRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  headRefName?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  labels?: InputMaybe<Array<Scalars[\"String\"][\"input\"]>>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isFork?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesContributedToArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  contributionTypes?: InputMaybe<Array<InputMaybe<RepositoryContributionType>>>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includeUserRepositories?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  name: Scalars[\"String\"][\"input\"];\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  onlyAnswers?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  answered?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSavedRepliesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SavedReplyOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsoringArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars[\"ID\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsActivitiesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsMaintainerArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  includePrivate?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsSponsorArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserStarredRepositoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<StarOrder>;\n  ownedByViewer?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserTopRepositoriesArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy: RepositoryOrder;\n  since?: InputMaybe<Scalars[\"DateTime\"][\"input\"]>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserWatchingArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  isLocked?: InputMaybe<Scalars[\"Boolean\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n/** The possible durations that a user can be blocked for. */\nexport enum UserBlockDuration {\n  /** The user was blocked for 1 day */\n  OneDay = \"ONE_DAY\",\n  /** The user was blocked for 30 days */\n  OneMonth = \"ONE_MONTH\",\n  /** The user was blocked for 7 days */\n  OneWeek = \"ONE_WEEK\",\n  /** The user was blocked permanently */\n  Permanent = \"PERMANENT\",\n  /** The user was blocked for 3 days */\n  ThreeDays = \"THREE_DAYS\",\n}\n\n/** Represents a 'user_blocked' event on a given user. */\nexport type UserBlockedEvent = Node & {\n  __typename?: \"UserBlockedEvent\";\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Number of days that the user was blocked for. */\n  blockDuration: UserBlockDuration;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** The user who was blocked. */\n  subject?: Maybe<User>;\n};\n\n/** The connection type for User. */\nexport type UserConnection = {\n  __typename?: \"UserConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edit on user content */\nexport type UserContentEdit = Node & {\n  __typename?: \"UserContentEdit\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the date and time when the object was deleted. */\n  deletedAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** The actor who deleted this content */\n  deletedBy?: Maybe<Actor>;\n  /** A summary of the changes for this edit */\n  diff?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** When this content was edited */\n  editedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The actor who edited this content */\n  editor?: Maybe<Actor>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** A list of edits to content. */\nexport type UserContentEditConnection = {\n  __typename?: \"UserContentEditConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserContentEditEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserContentEdit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type UserContentEditEdge = {\n  __typename?: \"UserContentEditEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserContentEdit>;\n};\n\n/** Represents a user. */\nexport type UserEdge = {\n  __typename?: \"UserEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\n/** Email attributes from External Identity */\nexport type UserEmailMetadata = {\n  __typename?: \"UserEmailMetadata\";\n  /** Boolean to identify primary emails */\n  primary?: Maybe<Scalars[\"Boolean\"][\"output\"]>;\n  /** Type of email */\n  type?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** Email id */\n  value: Scalars[\"String\"][\"output\"];\n};\n\n/** The user's description of what they're currently doing. */\nexport type UserStatus = Node & {\n  __typename?: \"UserStatus\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** An emoji summarizing the user's status. */\n  emoji?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The status emoji as HTML. */\n  emojiHTML?: Maybe<Scalars[\"HTML\"][\"output\"]>;\n  /** If set, the status will not be shown after this date. */\n  expiresAt?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether this status indicates the user is not fully available on GitHub. */\n  indicatesLimitedAvailability: Scalars[\"Boolean\"][\"output\"];\n  /** A brief message describing what the user is doing. */\n  message?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The organization whose members can see this status. If null, this status is publicly visible. */\n  organization?: Maybe<Organization>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The user who has this status. */\n  user: User;\n};\n\n/** The connection type for UserStatus. */\nexport type UserStatusConnection = {\n  __typename?: \"UserStatusConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type UserStatusEdge = {\n  __typename?: \"UserStatusEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserStatus>;\n};\n\n/** Ordering options for user status connections. */\nexport type UserStatusOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user statuses by. */\n  field: UserStatusOrderField;\n};\n\n/** Properties by which user status connections can be ordered. */\nexport enum UserStatusOrderField {\n  /** Order user statuses by when they were updated. */\n  UpdatedAt = \"UPDATED_AT\",\n}\n\n/** A domain that can be verified or approved for an organization or an enterprise. */\nexport type VerifiableDomain = Node & {\n  __typename?: \"VerifiableDomain\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The DNS host name that should be used for verification. */\n  dnsHostName?: Maybe<Scalars[\"URI\"][\"output\"]>;\n  /** The unicode encoded domain. */\n  domain: Scalars[\"URI\"][\"output\"];\n  /** Whether a TXT record for verification with the expected host name was found. */\n  hasFoundHostName: Scalars[\"Boolean\"][\"output\"];\n  /** Whether a TXT record for verification with the expected verification token was found. */\n  hasFoundVerificationToken: Scalars[\"Boolean\"][\"output\"];\n  id: Scalars[\"ID\"][\"output\"];\n  /** Whether or not the domain is approved. */\n  isApproved: Scalars[\"Boolean\"][\"output\"];\n  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */\n  isRequiredForPolicyEnforcement: Scalars[\"Boolean\"][\"output\"];\n  /** Whether or not the domain is verified. */\n  isVerified: Scalars[\"Boolean\"][\"output\"];\n  /** The owner of the domain. */\n  owner: VerifiableDomainOwner;\n  /** The punycode encoded domain. */\n  punycodeEncodedDomain: Scalars[\"URI\"][\"output\"];\n  /** The time that the current verification token will expire. */\n  tokenExpirationTime?: Maybe<Scalars[\"DateTime\"][\"output\"]>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The current verification token for the domain. */\n  verificationToken?: Maybe<Scalars[\"String\"][\"output\"]>;\n};\n\n/** The connection type for VerifiableDomain. */\nexport type VerifiableDomainConnection = {\n  __typename?: \"VerifiableDomainConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VerifiableDomainEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<VerifiableDomain>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars[\"Int\"][\"output\"];\n};\n\n/** An edge in a connection. */\nexport type VerifiableDomainEdge = {\n  __typename?: \"VerifiableDomainEdge\";\n  /** A cursor for use in pagination. */\n  cursor: Scalars[\"String\"][\"output\"];\n  /** The item at the end of the edge. */\n  node?: Maybe<VerifiableDomain>;\n};\n\n/** Ordering options for verifiable domain connections. */\nexport type VerifiableDomainOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order verifiable domains by. */\n  field: VerifiableDomainOrderField;\n};\n\n/** Properties by which verifiable domain connections can be ordered. */\nexport enum VerifiableDomainOrderField {\n  /** Order verifiable domains by their creation date. */\n  CreatedAt = \"CREATED_AT\",\n  /** Order verifiable domains by the domain name. */\n  Domain = \"DOMAIN\",\n}\n\n/** Types that can own a verifiable domain. */\nexport type VerifiableDomainOwner = Enterprise | Organization;\n\n/** Autogenerated input type of VerifyVerifiableDomain */\nexport type VerifyVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  /** The ID of the verifiable domain to verify. */\n  id: Scalars[\"ID\"][\"input\"];\n};\n\n/** Autogenerated return type of VerifyVerifiableDomain */\nexport type VerifyVerifiableDomainPayload = {\n  __typename?: \"VerifyVerifiableDomainPayload\";\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars[\"String\"][\"output\"]>;\n  /** The verifiable domain that was verified. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** A hovercard context with a message describing how the viewer is related. */\nexport type ViewerHovercardContext = HovercardContext & {\n  __typename?: \"ViewerHovercardContext\";\n  /** A string describing this context */\n  message: Scalars[\"String\"][\"output\"];\n  /** An octicon to accompany this context */\n  octicon: Scalars[\"String\"][\"output\"];\n  /** Identifies the user who is related to this context. */\n  viewer: User;\n};\n\n/** A subject that may be upvoted. */\nexport type Votable = {\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars[\"Int\"][\"output\"];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars[\"Boolean\"][\"output\"];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars[\"Boolean\"][\"output\"];\n};\n\n/** A workflow contains meta information about an Actions workflow file. */\nexport type Workflow = Node & {\n  __typename?: \"Workflow\";\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The name of the workflow. */\n  name: Scalars[\"String\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n};\n\n/** A workflow run. */\nexport type WorkflowRun = Node & {\n  __typename?: \"WorkflowRun\";\n  /** The check suite this workflow run belongs to. */\n  checkSuite: CheckSuite;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars[\"DateTime\"][\"output\"];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars[\"Int\"][\"output\"]>;\n  /** The log of deployment reviews */\n  deploymentReviews: DeploymentReviewConnection;\n  id: Scalars[\"ID\"][\"output\"];\n  /** The pending deployment requests of all check runs in this workflow run */\n  pendingDeploymentRequests: DeploymentRequestConnection;\n  /** The HTTP path for this workflow run */\n  resourcePath: Scalars[\"URI\"][\"output\"];\n  /** A number that uniquely identifies this workflow run in its parent workflow. */\n  runNumber: Scalars[\"Int\"][\"output\"];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars[\"DateTime\"][\"output\"];\n  /** The HTTP URL for this workflow run */\n  url: Scalars[\"URI\"][\"output\"];\n  /** The workflow executed in this workflow run. */\n  workflow: Workflow;\n};\n\n/** A workflow run. */\nexport type WorkflowRunDeploymentReviewsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n\n/** A workflow run. */\nexport type WorkflowRunPendingDeploymentRequestsArgs = {\n  after?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  before?: InputMaybe<Scalars[\"String\"][\"input\"]>;\n  first?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n  last?: InputMaybe<Scalars[\"Int\"][\"input\"]>;\n};\n","import { HttpLink } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { fetch } from \"cross-fetch\";\nimport { generateFetchWithTimeout } from \"project-tool/request\";\n\nconst BLOG_API = \"https://api.github.com/graphql\";\n\nconst isBrowser = typeof window !== \"undefined\";\n\nconst token = [\n  180, 100, 208, 238, 176, 100, 230, 96, 172, 140, 156, 194, 154, 100, 156, 178, 174, 172, 198, 98, 196, 220, 132, 166, 198, 100, 148, 194, 156, 140, 224, 230,\n  200, 96, 172, 174, 200, 244, 148, 172, 166, 144, 180, 242, 166, 168, 148, 228, 156, 140, 172, 208, 168, 206, 122, 122,\n];\n\nconst tokenString = token\n  .map((i) => i >> 1)\n  .map((s) => String.fromCharCode(s))\n  .join(\"\");\n\nexport const httpLink = new HttpLink({\n  uri: BLOG_API,\n  fetch: typeof fetch === \"function\" ? generateFetchWithTimeout(5000) : fetch,\n});\n\nexport const onErrorLink = onError(({ networkError, graphQLErrors }) => {\n  if (networkError) {\n    console.error(`network error \\n[message]: ${networkError.message}  \\n[stack]: ${networkError.stack}`);\n  }\n  if (graphQLErrors?.length) {\n    graphQLErrors.forEach((error) => {\n      console.error(`graphql error \\n[message]: ${error.message} \\n[stack]: ${error.stack}`);\n    });\n  }\n});\n\nexport const authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      Authorization: `token ${isBrowser ? atob(tokenString) : Buffer.from(tokenString, \"base64\").toString()}`,\n    },\n  };\n});\n","/* eslint-disable */\n// @ts-nocheck\n\nimport type * as SchemaTypes from \"./schema\";\n\nimport type { TypedDocumentNode as DocumentNode } from \"@graphql-typed-document-node/core\";\nexport type GetViewerQueryVariables = SchemaTypes.Exact<{\n  first?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"Int\"][\"input\"]>;\n}>;\n\nexport type GetViewerQuery = {\n  viewer: {\n    id: string;\n    name?: string | null;\n    login: string;\n    email: string;\n    createdAt: any;\n    avatarUrl: any;\n    websiteUrl?: any | null;\n    projectsUrl: any;\n    followers: { nodes?: Array<{ id: string; name?: string | null; login: string; email: string; bioHTML: any; avatarUrl: any } | null> | null };\n    following: { nodes?: Array<{ id: string; name?: string | null; login: string; email: string; bioHTML: any; avatarUrl: any } | null> | null };\n  };\n};\n\nexport type GetBlogListQueryVariables = SchemaTypes.Exact<{\n  name: SchemaTypes.Scalars[\"String\"][\"input\"];\n  owner: SchemaTypes.Scalars[\"String\"][\"input\"];\n  first?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"Int\"][\"input\"]>;\n  last?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"Int\"][\"input\"]>;\n  after?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"String\"][\"input\"]>;\n  before?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"String\"][\"input\"]>;\n  labels?: SchemaTypes.InputMaybe<Array<SchemaTypes.Scalars[\"String\"][\"input\"]> | SchemaTypes.Scalars[\"String\"][\"input\"]>;\n  orderBy?: SchemaTypes.InputMaybe<SchemaTypes.IssueOrder>;\n  states?: SchemaTypes.InputMaybe<Array<SchemaTypes.IssueState> | SchemaTypes.IssueState>;\n  filterBy?: SchemaTypes.InputMaybe<SchemaTypes.IssueFilters>;\n}>;\n\nexport type GetBlogListQuery = {\n  repository?: {\n    id: string;\n    issues: {\n      totalCount: number;\n      nodes?: Array<{\n        id: string;\n        number: number;\n        createdAt: any;\n        publishedAt?: any | null;\n        updatedAt: any;\n        state: SchemaTypes.IssueState;\n        title: string;\n        body: string;\n        bodyText: string;\n        url: any;\n        author?:\n          | { login: string; avatarUrl: any }\n          | { login: string; avatarUrl: any }\n          | { login: string; avatarUrl: any }\n          | { login: string; avatarUrl: any }\n          | { login: string; avatarUrl: any }\n          | null;\n      } | null> | null;\n      pageInfo: { endCursor?: string | null; startCursor?: string | null; hasNextPage: boolean; hasPreviousPage: boolean };\n    };\n  } | null;\n};\n\nexport type GetSingleBlogQueryVariables = SchemaTypes.Exact<{\n  name: SchemaTypes.Scalars[\"String\"][\"input\"];\n  owner: SchemaTypes.Scalars[\"String\"][\"input\"];\n  number: SchemaTypes.Scalars[\"Int\"][\"input\"];\n  first?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"Int\"][\"input\"]>;\n  after?: SchemaTypes.InputMaybe<SchemaTypes.Scalars[\"String\"][\"input\"]>;\n}>;\n\nexport type GetSingleBlogQuery = {\n  repository?: {\n    id: string;\n    issue?: {\n      id: string;\n      body: string;\n      title: string;\n      number: number;\n      createdAt: any;\n      publishedAt?: any | null;\n      updatedAt: any;\n      author?:\n        | { login: string; avatarUrl: any }\n        | { login: string; avatarUrl: any }\n        | { login: string; avatarUrl: any }\n        | { login: string; avatarUrl: any }\n        | { login: string; avatarUrl: any }\n        | null;\n      comments: {\n        totalCount: number;\n        nodes?: Array<{\n          id: string;\n          body: string;\n          createdAt: any;\n          updatedAt: any;\n          viewerDidAuthor: boolean;\n          author?:\n            | { login: string; avatarUrl: any }\n            | { login: string; avatarUrl: any }\n            | { login: string; avatarUrl: any }\n            | { login: string; avatarUrl: any }\n            | { login: string; avatarUrl: any }\n            | null;\n        } | null> | null;\n        pageInfo: { endCursor?: string | null; startCursor?: string | null; hasNextPage: boolean; hasPreviousPage: boolean };\n      };\n    } | null;\n  } | null;\n};\n\nexport type GetStarCountQueryVariables = SchemaTypes.Exact<{\n  name: SchemaTypes.Scalars[\"String\"][\"input\"];\n  owner: SchemaTypes.Scalars[\"String\"][\"input\"];\n}>;\n\nexport type GetStarCountQuery = { repository?: { id: string; stargazerCount: number } | null };\n\nexport const GetViewerDocument = {\n  kind: \"Document\",\n  definitions: [\n    {\n      kind: \"OperationDefinition\",\n      operation: \"query\",\n      name: { kind: \"Name\", value: \"getViewer\" },\n      variableDefinitions: [\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"Int\" } },\n          defaultValue: { kind: \"IntValue\", value: \"10\" },\n        },\n      ],\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [\n          {\n            kind: \"Field\",\n            name: { kind: \"Name\", value: \"viewer\" },\n            selectionSet: {\n              kind: \"SelectionSet\",\n              selections: [\n                { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"name\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"email\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"createdAt\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"websiteUrl\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"projectsUrl\" } },\n                {\n                  kind: \"Field\",\n                  name: { kind: \"Name\", value: \"followers\" },\n                  arguments: [\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"first\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } } },\n                  ],\n                  selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"nodes\" },\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"name\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"email\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"bioHTML\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n                {\n                  kind: \"Field\",\n                  name: { kind: \"Name\", value: \"following\" },\n                  arguments: [\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"first\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } } },\n                  ],\n                  selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"nodes\" },\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"name\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"email\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"bioHTML\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<GetViewerQuery, GetViewerQueryVariables>;\nexport const GetBlogListDocument = {\n  kind: \"Document\",\n  definitions: [\n    {\n      kind: \"OperationDefinition\",\n      operation: \"query\",\n      name: { kind: \"Name\", value: \"getBlogList\" },\n      variableDefinitions: [\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"Int\" } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"last\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"Int\" } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"after\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"before\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"labels\" } },\n          type: { kind: \"ListType\", type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"orderBy\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"IssueOrder\" } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"states\" } },\n          type: { kind: \"ListType\", type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"IssueState\" } } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"filterBy\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"IssueFilters\" } },\n        },\n      ],\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [\n          {\n            kind: \"Field\",\n            name: { kind: \"Name\", value: \"repository\" },\n            arguments: [\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"name\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } } },\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"owner\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } } },\n            ],\n            selectionSet: {\n              kind: \"SelectionSet\",\n              selections: [\n                { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                {\n                  kind: \"Field\",\n                  name: { kind: \"Name\", value: \"issues\" },\n                  arguments: [\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"first\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"last\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"last\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"after\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"after\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"before\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"before\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"labels\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"labels\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"orderBy\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"orderBy\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"states\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"states\" } } },\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"filterBy\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"filterBy\" } } },\n                  ],\n                  selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"nodes\" },\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                            {\n                              kind: \"Field\",\n                              name: { kind: \"Name\", value: \"author\" },\n                              selectionSet: {\n                                kind: \"SelectionSet\",\n                                selections: [\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                                ],\n                              },\n                            },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"number\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"createdAt\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"publishedAt\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"updatedAt\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"state\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"title\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"body\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"bodyText\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"url\" } },\n                          ],\n                        },\n                      },\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"pageInfo\" },\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"endCursor\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"startCursor\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"hasNextPage\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"hasPreviousPage\" } },\n                          ],\n                        },\n                      },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"totalCount\" } },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<GetBlogListQuery, GetBlogListQueryVariables>;\nexport const GetSingleBlogDocument = {\n  kind: \"Document\",\n  definitions: [\n    {\n      kind: \"OperationDefinition\",\n      operation: \"query\",\n      name: { kind: \"Name\", value: \"getSingleBlog\" },\n      variableDefinitions: [\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"number\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"Int\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"Int\" } },\n          defaultValue: { kind: \"IntValue\", value: \"10\" },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"after\" } },\n          type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } },\n        },\n      ],\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [\n          {\n            kind: \"Field\",\n            name: { kind: \"Name\", value: \"repository\" },\n            arguments: [\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"name\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } } },\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"owner\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } } },\n            ],\n            selectionSet: {\n              kind: \"SelectionSet\",\n              selections: [\n                { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                {\n                  kind: \"Field\",\n                  name: { kind: \"Name\", value: \"issue\" },\n                  arguments: [\n                    { kind: \"Argument\", name: { kind: \"Name\", value: \"number\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"number\" } } },\n                  ],\n                  selectionSet: {\n                    kind: \"SelectionSet\",\n                    selections: [\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"author\" },\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                          ],\n                        },\n                      },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"body\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"title\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"number\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"createdAt\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"publishedAt\" } },\n                      { kind: \"Field\", name: { kind: \"Name\", value: \"updatedAt\" } },\n                      {\n                        kind: \"Field\",\n                        name: { kind: \"Name\", value: \"comments\" },\n                        arguments: [\n                          { kind: \"Argument\", name: { kind: \"Name\", value: \"first\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"first\" } } },\n                          { kind: \"Argument\", name: { kind: \"Name\", value: \"after\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"after\" } } },\n                        ],\n                        selectionSet: {\n                          kind: \"SelectionSet\",\n                          selections: [\n                            {\n                              kind: \"Field\",\n                              name: { kind: \"Name\", value: \"nodes\" },\n                              selectionSet: {\n                                kind: \"SelectionSet\",\n                                selections: [\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                                  {\n                                    kind: \"Field\",\n                                    name: { kind: \"Name\", value: \"author\" },\n                                    selectionSet: {\n                                      kind: \"SelectionSet\",\n                                      selections: [\n                                        { kind: \"Field\", name: { kind: \"Name\", value: \"login\" } },\n                                        { kind: \"Field\", name: { kind: \"Name\", value: \"avatarUrl\" } },\n                                      ],\n                                    },\n                                  },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"body\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"createdAt\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"updatedAt\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"viewerDidAuthor\" } },\n                                ],\n                              },\n                            },\n                            {\n                              kind: \"Field\",\n                              name: { kind: \"Name\", value: \"pageInfo\" },\n                              selectionSet: {\n                                kind: \"SelectionSet\",\n                                selections: [\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"endCursor\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"startCursor\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"hasNextPage\" } },\n                                  { kind: \"Field\", name: { kind: \"Name\", value: \"hasPreviousPage\" } },\n                                ],\n                              },\n                            },\n                            { kind: \"Field\", name: { kind: \"Name\", value: \"totalCount\" } },\n                          ],\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<GetSingleBlogQuery, GetSingleBlogQueryVariables>;\nexport const GetStarCountDocument = {\n  kind: \"Document\",\n  definitions: [\n    {\n      kind: \"OperationDefinition\",\n      operation: \"query\",\n      name: { kind: \"Name\", value: \"getStarCount\" },\n      variableDefinitions: [\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n        {\n          kind: \"VariableDefinition\",\n          variable: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } },\n          type: { kind: \"NonNullType\", type: { kind: \"NamedType\", name: { kind: \"Name\", value: \"String\" } } },\n        },\n      ],\n      selectionSet: {\n        kind: \"SelectionSet\",\n        selections: [\n          {\n            kind: \"Field\",\n            name: { kind: \"Name\", value: \"repository\" },\n            arguments: [\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"name\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"name\" } } },\n              { kind: \"Argument\", name: { kind: \"Name\", value: \"owner\" }, value: { kind: \"Variable\", name: { kind: \"Name\", value: \"owner\" } } },\n            ],\n            selectionSet: {\n              kind: \"SelectionSet\",\n              selections: [\n                { kind: \"Field\", name: { kind: \"Name\", value: \"id\" } },\n                { kind: \"Field\", name: { kind: \"Name\", value: \"stargazerCount\" } },\n              ],\n            },\n          },\n        ],\n      },\n    },\n  ],\n} as unknown as DocumentNode<GetStarCountQuery, GetStarCountQueryVariables>;\n","export const CONTAINER_WIDTH = 1580;\n","export const BLOG_SOURCE = \"https://github.com/facebook/react/issues\";\nexport const BLOG_REPOSITORY = \"react\";\nexport const BLOG_REPOSITORY_OWNER = \"facebook\";\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\nexport const allRoutes = __STREAM__ ? require(\"./routers.stream\").allRoutes : require(\"./routers.loadable\").allRoutes;\n","import { memo, forwardRef } from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { useEffectOnce, useIsMounted } from \"@client/hooks\";\n\nimport style from \"./index.module.scss\";\n\nlet div: HTMLDivElement | undefined;\n\nconst _Bar = forwardRef<HTMLDivElement>(function Bar(_, ref) {\n  useEffectOnce(() => {\n    if (!div) {\n      div = document.createElement(\"div\");\n    }\n    div.id = \"__loading_bar__\";\n    const content = document.body.querySelector(\"#__content__\") as HTMLDivElement;\n    document.body.insertBefore(div, content);\n  });\n\n  const isMounted = useIsMounted();\n\n  return isMounted ? createPortal(<div ref={ref} className={style.loadingBar} style={{ height: `0px`, transform: `scale(0, 1)` }} />, div as Element) : null;\n});\nexport const Bar = memo(_Bar);\n","// extracted by mini-css-extract-plugin\nexport default {\"loadingBar\":\"ITbAOd\"};","import { useEffect } from \"react\";\n\nimport { useLoading, useLoadingBar } from \"@client/hooks\";\n\nimport { Bar } from \"./LoadingBar\";\n\nimport type { LoadingBarWrapperType } from \"@client/types/common\";\n\nexport const LoadingBar: LoadingBarWrapperType = () => {\n  const loading = useLoading((state) => state.loading);\n  const { ref } = useLoadingBar({ loading });\n  useEffect(() => {\n    window.dd = useLoading;\n  }, [])\n  return <Bar ref={ref} />;\n};\n","import { createContext, useContext } from \"react\";\n\nimport { usePreLoad } from \"@client/hooks\";\nimport { preLoad } from \"@client/utils\";\n\nimport type { WrapperRouteType } from \"@client/types/common\";\n\nexport const LoadedLocationContext = createContext<ReturnType<typeof usePreLoad>[\"loaded\"] | null>(null);\n\nexport const WrapperRoute: WrapperRouteType = ({ children, routes, LoadingBar }) => {\n  const { loaded } = usePreLoad({ routes, preLoad });\n\n  // for pure client render\n  if (!loaded) return null;\n\n  return (\n    <LoadedLocationContext.Provider value={loaded}>\n      <LoadingBar />\n      {children}\n    </LoadedLocationContext.Provider>\n  );\n};\n\nexport const useLoadedLocation = () => useContext(LoadedLocationContext);\n","import { AnimatePresence, motion } from \"framer-motion\";\nimport { Fragment, Suspense } from \"react\";\nimport { useRoutes } from \"react-router\";\n\nimport { getIsAnimateRouter } from \"@shared\";\n\nimport { allRoutes } from \"../router\";\n\nimport { useLoadedLocation } from \"./WrapperRoute\";\n\nexport const RenderMatch = () => {\n  const loaded = useLoadedLocation();\n  const all = useRoutes(allRoutes, loaded?.location);\n\n  return (\n    <>\n      {getIsAnimateRouter() ? (\n        <AnimatePresence exitBeforeEnter>\n          <Fragment key={loaded?.location.pathname}>\n            <motion.div\n              initial=\"initial\"\n              animate=\"in\"\n              exit=\"out\"\n              variants={{\n                initial: {\n                  opacity: 0,\n                },\n                in: {\n                  opacity: 1,\n                },\n                out: {\n                  opacity: 0,\n                },\n              }}\n              transition={{\n                type: \"spring\",\n                damping: 10,\n                stiffness: 50,\n              }}\n            >\n              <Suspense>{all}</Suspense>\n            </motion.div>\n          </Fragment>\n        </AnimatePresence>\n      ) : (\n        <Suspense>{all}</Suspense>\n      )}\n    </>\n  );\n};\n","import { ApolloProvider } from \"@apollo/client\";\nimport { useApollo } from \"@site/graphql\";\nimport { useLocation } from \"react-router\";\n\nimport { preLoadPropsKey } from \"@client/utils\";\nimport { useAppSelector } from \"@shared\";\n\nimport type { NormalizedCacheObject } from \"@apollo/client\";\nimport type { ReactNode } from \"react\";\n\nexport const WrapperApollo = ({ children }: { children: ReactNode }) => {\n  const props = useAppSelector((state) => state.client.clientProps.data);\n\n  const { pathname } = useLocation();\n\n  const preLoadKey = preLoadPropsKey(pathname);\n\n  const preLoadState = props[preLoadKey];\n\n  const apolloState = preLoadState?.[\"$$__apollo__$$\"];\n\n  const apolloClient = useApollo(apolloState as NormalizedCacheObject, true);\n\n  return <ApolloProvider client={apolloClient}>{children}</ApolloProvider>;\n};\n","import { Component } from \"react\";\n\nimport type { ErrorInfo, ReactNode, ReactElement } from \"react\";\n\nexport class WrapperErrorCatch extends Component<Record<string, unknown> & { children: ReactElement }, { error: string; stack: string; hasError: boolean }> {\n  state = {\n    stack: \"\",\n    error: \"\",\n    hasError: false,\n  };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, info: ErrorInfo) {\n    this.setState({\n      error: error.message,\n      stack: info.componentStack,\n    });\n  }\n\n  render(): ReactNode {\n    if (this.state.hasError)\n      return (\n        <pre>\n          <p style={{ color: \"red\", whiteSpace: \"pre-wrap\" }}>{this.state.error}</p>\n          {this.state.stack}\n        </pre>\n      );\n    return this.props.children;\n  }\n}\n","import { useEffect, useRef } from \"react\";\nimport { IntlProvider } from \"react-intl\";\n\nimport { defaultLang, useAppSelector } from \"@shared\";\n\nimport type { ReactNode } from \"react\";\n\nexport const WrapperLang = ({ children }: { children: ReactNode }) => {\n  const htmlRef = useRef<HTMLHtmlElement | null>(null);\n\n  const data = useAppSelector((state) => state.server.serverLang.data);\n  const lang = useAppSelector((state) => state.client.clientLang.data);\n\n  useEffect(() => {\n    if (!htmlRef.current) {\n      htmlRef.current = document.querySelector(\"html\");\n    }\n    if (htmlRef.current) {\n      htmlRef.current.lang = lang;\n    }\n  }, [lang]);\n\n  return (\n    <IntlProvider locale={lang} messages={data[lang] || {}} defaultLocale={defaultLang}>\n      {children}\n    </IntlProvider>\n  );\n};\n","import { allRoutes } from \"@client/router\";\n\nimport { LoadingBar } from \"./LoadingBar\";\nimport { RenderMatch } from \"./RenderMatch\";\nimport { WrapperApollo } from \"./WrapperApollo\";\nimport { WrapperErrorCatch } from \"./WrapperCatch\";\nimport { WrapperLang } from \"./WrapperLang\";\nimport { WrapperRoute } from \"./WrapperRoute\";\n\nexport const App = () => {\n  return (\n    <WrapperApollo>\n      <WrapperLang>\n        <WrapperRoute routes={allRoutes} LoadingBar={LoadingBar}>\n          <WrapperErrorCatch>\n            <RenderMatch />\n          </WrapperErrorCatch>\n        </WrapperRoute>\n      </WrapperLang>\n    </WrapperApollo>\n  );\n};\n","import { ChakraProvider, /* cookieStorageManager */ cookieStorageManagerSSR } from \"@chakra-ui/react\";\nimport { CacheProvider } from \"@emotion/react\";\nimport { StrictMode } from \"react\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { createEmotionCache, theme } from \"../shared\";\n\nimport { App } from \"./common/App\";\n\nimport type { createUniversalStore } from \"../shared\";\n\nconst emotionCache = createEmotionCache();\n\nconst Root = ({ store }: { store: ReturnType<typeof createUniversalStore> }) => {\n  // this component will only run once when the page mount, so it's ok to use server's cookie\n  const cookieStore = cookieStorageManagerSSR(document.cookie);\n\n  return (\n    <StrictMode>\n      <CacheProvider value={emotionCache}>\n        <ChakraProvider theme={theme} /* colorModeManager={cookieStore} */>\n          <Provider store={store} serverState={store.getState()}>\n            <Router>\n              <HelmetProvider>\n                <App />\n              </HelmetProvider>\n            </Router>\n          </Provider>\n        </ChakraProvider>\n      </CacheProvider>\n    </StrictMode>\n  );\n};\n\nexport { Root };\n","/* eslint-disable @typescript-eslint/no-var-requires */\n// eslint-disable-next-line react/no-deprecated\nimport { hydrate } from \"react-dom\";\nimport { hydrateRoot, createRoot } from \"react-dom/client\";\n\nimport { createUniversalStore, safeData } from \"../shared\";\n\nimport \"@client/styles/global.scss\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\n\nimport { Root } from \"./app\";\n\nimport type { RootState } from \"../shared\";\n\nconst place = document.querySelector(\"#__content__\") as HTMLDivElement;\n\nconst preLoadEnvElement = document.querySelector(\"script#__preload_env__\");\n\nconst preLoadStateElement = document.querySelector(\"script#__preload_state__\");\n\nconst store = createUniversalStore({\n  preloadedState: JSON.parse(preLoadStateElement?.innerHTML || \"{}\") as RootState,\n});\n\nwindow.__ENV__ = JSON.parse(preLoadEnvElement?.innerHTML || \"{}\");\n\nwindow.__PRELOAD_STORE_STATE__ = JSON.parse(preLoadStateElement?.innerHTML || \"{}\");\n\nsafeData(window.__ENV__);\n\nsafeData(window as unknown as Record<string, unknown>, \"__ENV__\");\n\nsafeData(window.__PRELOAD_STORE_STATE__);\n\nsafeData(window as unknown as Record<string, unknown>, \"__PRELOAD_STORE_STATE__\");\n\nconst loadableReady = __STREAM__\n  ? (cb) => {\n      cb?.();\n    }\n  : require(\"@loadable/component\").loadableReady;\n\nif (window.__ENV__.isPURE_CSR) {\n  const { loadCurrentLang } = require(\"@shared\");\n  loadCurrentLang(store.dispatch, window.__ENV__.LANG as \"en\" | \"ar\").then(() => loadableReady(() => createRoot(place).render(<Root store={store} />)));\n} else {\n  if (!window.__ENV__.isSSR || (window.__ENV__.isDEVELOPMENT && window.__ENV__.isMIDDLEWARE)) {\n    loadableReady(() => createRoot(place).render(<Root store={store} />));\n  } else {\n    loadableReady(() => (__STREAM__ || __REACT__ ? hydrateRoot(place, <Root store={store} />) : hydrate(<Root store={store} />, place)));\n  }\n}\n","import { createState, withActions } from \"reactivity-store\";\n\nexport const useLoading = createState(\n  withActions(() => ({ loading: false }), {\n    generateActions: (state) => ({\n      setLoading: (s: boolean) => {\n        state.loading = s;\n      },\n    }),\n  })\n);\n","import debounce from \"lodash/debounce\";\nimport { useMemo, useState } from \"react\";\n\nimport type { Dispatch, SetStateAction } from \"react\";\n\nexport const useDebouncedState = <T>(initialState: T | (() => T), time = 200): [T, Dispatch<SetStateAction<T>>] => {\n  const [state, setState] = useState(initialState);\n\n  const setDebounceState = useMemo(() => debounce(setState, time), [time]);\n\n  return [state, setDebounceState];\n};\n","import { useEffect } from \"react\";\n\nimport { useDebouncedState } from \"./useDebouncedState\";\n\nimport type { RefObject } from \"react\";\n\ntype DOMRectType = {\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\n\nconst INITIAL_RECT: DOMRectType = {\n  width: 0,\n  height: 0,\n  left: 0,\n  right: 0,\n  top: 0,\n  bottom: 0,\n  x: 0,\n  y: 0,\n};\n\nexport function useDomSize({ ref, cssSelector }: { ref: RefObject<HTMLElement> | null; cssSelector?: string }): DOMRectType;\nexport function useDomSize({ ref, cssSelector }: { ref?: RefObject<HTMLElement>; cssSelector: string }): DOMRectType;\nexport function useDomSize({ ref, cssSelector }: { ref?: RefObject<HTMLElement> | null; cssSelector?: string }) {\n  const [rect, setRect] = useDebouncedState<DOMRectType>(INITIAL_RECT, 100);\n\n  useEffect(() => {\n    const domElement = ref ? ref.current : cssSelector ? document.querySelector(cssSelector) : null;\n    if (domElement) {\n      if (window.ResizeObserver) {\n        const resizeObserver = new ResizeObserver(() => {\n          setRect(domElement.getBoundingClientRect());\n        });\n\n        resizeObserver.observe(domElement);\n\n        return () => resizeObserver.disconnect();\n      } else {\n        const handleResize = () => setRect(domElement.getBoundingClientRect());\n\n        handleResize();\n\n        window.addEventListener(\"resize\", handleResize, { passive: true });\n\n        return () => window.removeEventListener(\"resize\", handleResize);\n      }\n    }\n  }, [ref, cssSelector, setRect]);\n\n  return rect;\n}\n","import { useReducer } from \"react\";\n\nexport const useUpdate = () => {\n  const [, update] = useReducer((p) => p + 1, 0);\n\n  return update;\n};\n","import { useEffect, useRef, useState } from \"react\";\nimport { useStore } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { useSearchParams } from \"react-router-dom\";\n\nimport { getIsP_CSR } from \"@shared\";\nimport { clientActionName } from \"@shared/store/action\";\nimport { setDataSuccess_client } from \"@shared/store/reducer\";\n\nimport { useLoading } from \"./useLoadingStore\";\n\nimport type { UsePreLoadType } from \"@client/types/hooks\";\nimport type { RootState } from \"@shared\";\n\n/* WrapperRoute */\nconst usePreLoad: UsePreLoadType = ({ routes, preLoad }) => {\n  const isRedirect = useRef<string | undefined>();\n  const store = useStore<RootState>();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [query] = useSearchParams();\n  const setLoading = useLoading((state) => state.setLoading);\n  // for pure client render, need preload data\n  const firstLoad = useRef(getIsP_CSR() ? true : false);\n  const loadedPath = useRef<string | undefined>(\"\");\n  const loadingPath = useRef<string | null>(\"\");\n  const timer1 = useRef<NodeJS.Timeout | null>(null);\n  const timer2 = useRef<NodeJS.Timeout | null>(null);\n  const storeRef = useRef(store);\n\n  // for pure client render, there are not exist loaded location\n  const [loadedLocation, setLoadedLocation] = useState(getIsP_CSR() ? undefined : { location, query });\n\n  loadingPath.current = `${location.pathname}?${query.toString()}`;\n\n  loadedPath.current = loadedLocation ? `${loadedLocation.location.pathname}?${loadedLocation.query.toString()}` : \"\";\n\n  storeRef.current = store;\n\n  useEffect(() => {\n    // skip first load if need\n    if (!firstLoad.current) {\n      const isRedirectCurrentPath = isRedirect.current && isRedirect.current === `${location.pathname}?${query.toString()}`;\n      if (!isRedirectCurrentPath) {\n        setLoading(false);\n      }\n      if (loadedPath.current !== `${location.pathname}?${query.toString()}`) {\n        if (!isRedirectCurrentPath) {\n          timer1.current && clearTimeout(timer1.current);\n          timer1.current = null;\n          timer2.current && clearTimeout(timer2.current);\n          timer2.current = null;\n          timer1.current = setTimeout(() => {\n            setLoading(true);\n          }, 200);\n        }\n\n        // 分离每次load逻辑  避免跳转错乱\n        const currentLoad = (location: ReturnType<typeof useLocation>, query: URLSearchParams): void => {\n          preLoad(routes, location.pathname, query, storeRef.current).then((config) => {\n            const currentLoadKey = `${location.pathname}?${query.toString()}`;\n            if (currentLoadKey === loadingPath.current) {\n              const { redirect, error, props } = config || {};\n              if (redirect) {\n                isRedirect.current = `${redirect.location.pathName}?${redirect.location.query?.toString()}`;\n              } else {\n                isRedirect.current = \"\";\n              }\n              if (error) {\n                console.error(error);\n                setLoading(false);\n              } else if (redirect) {\n                navigate(isRedirect.current);\n              } else {\n                timer2.current = setTimeout(() => {\n                  timer1.current && clearTimeout(timer1.current);\n                  timer1.current = null;\n                  if (loadingPath.current === currentLoadKey) {\n                    props && storeRef.current.dispatch(setDataSuccess_client({ name: clientActionName.clientProps, data: props }));\n                    setLoading(false);\n                    setLoadedLocation({ location, query });\n                  }\n                }, 50);\n              }\n            }\n          });\n        };\n\n        currentLoad(location, query);\n      }\n    } else {\n      firstLoad.current = false;\n    }\n  }, [location, preLoad, routes, navigate, query, setLoading]);\n\n  return { loaded: loadedLocation };\n};\n\nexport { usePreLoad };\n","const applyRootStyles = (rootId: string, p: number) => {\n  const root = document.querySelector(`#${rootId}`) as HTMLDivElement;\n\n  if (root) {\n    const h = window.innerHeight;\n    const s = (h - p) / h;\n    root.style.overflow = \"hidden\";\n    root.style.willChange = \"transform\";\n    root.style.transition = \"transform 200ms linear\";\n    root.style.transform = `translateY(calc(env(safe-area-inset-top) + ${p / 2}px)) scale(${s})`;\n    root.style.filter = \"blur(0.8px)\";\n  }\n};\n\nconst cleanupRootStyles = (rootId: string) => {\n  const root = document.getElementById(rootId) as HTMLDivElement;\n\n  function onTransitionEnd() {\n    root.style.removeProperty(\"overflow\");\n    root.style.removeProperty(\"will-change\");\n    root.style.removeProperty(\"transition\");\n  }\n\n  if (root) {\n    // Start animating back\n    root.style.removeProperty(\"transform\");\n    root.style.removeProperty(\"filter\");\n    root.addEventListener(\"transitionend\", onTransitionEnd, { once: true });\n  }\n};\n\nexport const applyOverlaysStyles = (ids: string[]) => {\n  ids.reverse().forEach((id, index) => applyRootStyles(id, 18 + index * 2));\n};\n\nexport const cleanupOverlaysStyles = (ids: string[]) => {\n  ids.forEach(cleanupRootStyles);\n};\n","import findLast from \"lodash/findLast\";\nimport { createContext, useCallback, useContext, useRef, useState } from \"react\";\n\nimport { delay } from \"@client/utils\";\nimport { applyOverlaysStyles, cleanupOverlaysStyles } from \"@client/utils/dom\";\n\nimport { useUpdate } from \"./useUpdate\";\n\nimport type React from \"react\";\n\nconst ROOT_BODY = \"__content__\";\n\nconst OVERLAY_TIMER = \"__overlay_back\";\n\nexport interface OverlayProps {\n  id: string;\n  key: string;\n  head?: React.ReactNode;\n  body: JSX.Element;\n  foot?: React.ReactNode;\n  height?: number;\n  isFirst?: boolean;\n  className?: string;\n  showState?: boolean;\n  applyOverlay?: (id: string, isOpen?: boolean) => void;\n  closeHandler?: () => void;\n  closeComplete?: () => void;\n}\n\ninterface UseOverlayOpenType {\n  (props: Omit<OverlayProps, \"key\" | \"id\">): void;\n}\n\nlet count = 0;\n\nexport const OverlayOpenContext = createContext<UseOverlayOpenType>(() => void 0);\n\nexport const OverlayCloseContext = createContext<({ modalId, closeAll }?: { modalId?: string; closeAll?: boolean }) => void>(() => void 0);\n\nexport const OverlayArrayContext = createContext<{\n  desktop: Array<OverlayProps>;\n  mobile: Array<OverlayProps>;\n}>({ desktop: [], mobile: [] });\n\nexport const useOverlaysProps = () => {\n  const [overlays, setOverlays] = useState<OverlayProps[]>([]);\n  const overlaysRef = useRef(overlays);\n  const forceUpdate = useUpdate();\n  overlaysRef.current = overlays;\n  const applyOverlayStyle = useCallback((id: string, isOpen) => {\n    delay(\n      0,\n      () => {\n        const newAllOverlays = overlaysRef.current;\n        const stillShow = newAllOverlays.filter((n) => {\n          if (isOpen) {\n            return n.showState || n.id === id;\n          } else {\n            return n.showState && n.id !== id;\n          }\n        });\n        if (stillShow.length) {\n          const allIds = stillShow.map((n) => n.id);\n          const needReApplyIds = allIds.slice(0, -1);\n          const needClearId = allIds[allIds.length - 1];\n          applyOverlaysStyles([ROOT_BODY, ...needReApplyIds]);\n          cleanupOverlaysStyles([needClearId]);\n        } else {\n          cleanupOverlaysStyles([ROOT_BODY]);\n        }\n      },\n      OVERLAY_TIMER\n    );\n  }, []);\n  const open = useCallback(\n    (props: Omit<OverlayProps, \"key\">) => {\n      const overlayProps = props as OverlayProps;\n      const allOverlay = overlaysRef.current;\n      const lastOpen = findLast(allOverlay, (n) => n.showState);\n      overlayProps.key = `__overlay_${count++}`;\n      overlayProps.id = `__overlay_${count++}`;\n      overlayProps.height = lastOpen ? lastOpen.height - 6 : 92;\n      overlayProps.isFirst = lastOpen ? false : true;\n      overlayProps.showState = true;\n      const closeHandler = overlayProps.closeHandler;\n      const closeComplete = overlayProps.closeComplete;\n      overlayProps.closeHandler = () => {\n        overlayProps.showState = false;\n        closeHandler && closeHandler();\n        forceUpdate();\n      };\n      overlayProps.closeComplete = () => {\n        closeComplete && closeComplete();\n        setOverlays((last) => {\n          const newAllOverlays = last.filter((n) => n !== overlayProps);\n          if (newAllOverlays.length) {\n            newAllOverlays.reduce((p, c) => {\n              if (p.showState) {\n                c.isFirst = false;\n                return c;\n              } else if (c.showState) {\n                c.isFirst = true;\n                return c;\n              }\n            });\n          }\n          return newAllOverlays;\n        });\n      };\n      overlayProps.applyOverlay = applyOverlayStyle;\n      setOverlays((last) => {\n        const newAllOverlays = last.filter((n) => n.showState);\n        return [...newAllOverlays, overlayProps];\n      });\n    },\n    [forceUpdate, applyOverlayStyle]\n  );\n  const close = useCallback((props?: { modalId?: string; closeAll?: boolean }) => {\n    const allOverlay = overlaysRef.current;\n    const { modalId, closeAll } = props || {};\n    if (modalId !== undefined) {\n      const currentOverlay = allOverlay.find((n) => n.id === modalId);\n      currentOverlay?.closeHandler();\n    } else if (closeAll) {\n      allOverlay.filter((n) => n.showState).forEach((n) => n?.closeHandler());\n    } else {\n      const currentTopOverlay = findLast(allOverlay, (n) => n.showState);\n      currentTopOverlay?.closeHandler();\n    }\n  }, []);\n  return { overlays, open, close };\n};\n\nexport const useOverlaysOpen = () => useContext(OverlayOpenContext);\n\nexport const useOverlaysClose = () => useContext(OverlayCloseContext);\n\nexport const useOverlayArray = () => useContext(OverlayArrayContext);\n","import { useBreakpointValue } from \"@chakra-ui/react\";\n\nexport const useIsMobile = () => {\n  return useBreakpointValue({ base: true, lg: false });\n};\n","import { useState, useEffect } from \"react\";\n\nexport const useIsMounted = () => {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return mounted;\n};\n","import { useEffect, useRef } from \"react\";\n\nimport { cancel, delay } from \"../utils\";\n\ntype LoadingBarProps = {\n  height?: number;\n  present?: number;\n  loading?: boolean;\n};\n\nconst useLoadingBar = (props: LoadingBarProps = {}) => {\n  const { height = 2.5, present = 0, loading } = props;\n\n  const ref = useRef<HTMLDivElement>(null);\n\n  const state = useRef<LoadingBarProps>({ present, height });\n\n  useEffect(() => {\n    if (!loading) {\n      state.current.height = height;\n      state.current.present = present;\n    }\n  }, [loading, height, present]);\n\n  useEffect(() => {\n    if (ref.current) {\n      const ele = ref.current;\n      if (loading) {\n        let count = 2;\n        let id: number;\n        const start = (): void => {\n          if (count > 0.33) {\n            count -= 0.04;\n          }\n          let next = (state.current.present || 0) + count;\n          next = next < 99.5 ? next : 99.5;\n          ele.style.cssText =\n            `height: ${state.current.height}px;` + `transform: scale(${next / 100}, 1);` + `filter: drop-shadow(2px 2px 2px rgba(200, 200, 200, .4))`;\n          state.current.present = next;\n          id = requestAnimationFrame(start);\n        };\n        id = requestAnimationFrame(start);\n        return () => cancelAnimationFrame(id);\n      } else {\n        delay(40, () => (ele.style.transform = \"scale(1)\"), \"loadingBar\").then(() => delay(80, () => (ele.style.height = \"0px\"), \"loadingBar\"));\n        return () => cancel(\"loadingBar\");\n      }\n    }\n  }, [loading]);\n\n  return { ref };\n};\n\nexport { useLoadingBar };\n","import { useEffect } from \"react\";\n\nexport const useEffectOnce = (fn: () => unknown) => {\n  useEffect(() => {\n    fn();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n","import { isBrowser } from \"framer-motion\";\nimport { useEffect } from \"react\";\n\nimport { useDebouncedState } from \"./useDebouncedState\";\n\nexport const useWindowSize = () => {\n  const [state, setState] = useDebouncedState({\n    height: isBrowser ? window.innerHeight : 0,\n    width: isBrowser ? window.innerHeight : 0,\n  });\n\n  useEffect(() => {\n    const resize = () => setState({ height: window.innerHeight, width: window.innerWidth });\n\n    resize();\n\n    window.addEventListener(\"resize\", resize, { passive: true });\n\n    return window.removeEventListener(\"reset\", resize);\n  }, [setState]);\n\n  return state;\n};\n","import { useEffect } from \"react\";\nimport { createStore, ref } from \"reactivity-store\";\n\nconst useGlobalLockStore = createStore(() => {\n  const count = ref(0);\n  const lock = () => count.value++;\n  const unlock = (): void => (count.value--, void 0);\n\n  return { count, lock, unlock };\n});\n\nexport const useLockBodyScroll = (isLock?: boolean) => {\n  const { lock, unlock } = useGlobalLockStore((state) => ({ lock: state.lock, unlock: state.unlock }));\n  useEffect(() => {\n    if (isLock) {\n      lock();\n      return unlock;\n    }\n  }, [isLock, lock, unlock]);\n};\n\nexport const useLockBodyCount = () => useGlobalLockStore((state) => state.count);\n","import { useAppSelector } from \"@shared\";\n\nimport { preLoadPropsKey } from \"../utils\";\n\nexport const useGetInitialProps = (pagePath: string) => {\n  const routerData = useAppSelector((state) => state.client.clientProps.data);\n\n  const propsKey = preLoadPropsKey(pagePath);\n\n  return routerData[propsKey];\n};\n","import { useMemo } from \"react\";\nimport { createState } from \"reactivity-store\";\n\nimport type { Layout, Layouts } from \"react-grid-layout\";\n\nexport const BLOG_GRID_HEIGHT = 10;\n\nexport const useListLayoutStore = createState(() => ({ data: {} as Layouts }), {\n  withActions: (s) => ({\n    updateLayout: (newLayout: Layouts) => {\n      s.data = newLayout;\n    },\n    mergeLayout: (newLayout: Layouts) => {\n      const oldData = s.data\n      const obj = {};\n      Object.keys(newLayout).forEach((key) => {\n        obj[key] = [];\n        const oldValue = oldData[key];\n        const newValue = newLayout[key];\n        newValue.forEach((item) => {\n          const lastItem = oldValue?.find((_i) => _i.i === item.i);\n          if (lastItem) {\n            obj[key].push(lastItem);\n          } else {\n            obj[key].push(item);\n          }\n        });\n      });\n      s.data = obj;\n    }\n  }),\n});\n\nconst _generateFunction =\n  (width: number) =>\n  (index: number, id: string, dataLength: number): Layout => {\n    const i = id + index;\n    const h = BLOG_GRID_HEIGHT + dataLength;\n    const layout = {\n      i,\n      x: Math.floor(index % width),\n      y: Math.floor(index / width) * h,\n      w: 1,\n      maxW: width,\n      h: h,\n      minH: BLOG_GRID_HEIGHT,\n    };\n    return layout;\n  };\n\nconst xsGenerate = _generateFunction(1);\nconst smGenerate = _generateFunction(2);\nconst mdGenerate = _generateFunction(3);\nconst lgGenerate = _generateFunction(4);\n\nexport const useGetResponseListLayout = (items: { id: string; bodyText: string }[]) => {\n  return useMemo(() => {\n    const xs = items.map(({ id }, i) => xsGenerate(i, id, 4));\n    const sm = items.map(({ id }, i) => smGenerate(i, id, 6));\n    const md = items.map(({ id }, i) => mdGenerate(i, id, 10));\n    const lg = items.map(({ id }, i) => lgGenerate(i, id, 14));\n    return {\n      lg,\n      md,\n      sm,\n      xs,\n      xxs: xs,\n    };\n  }, [items]);\n};\n","import { memo } from \"react\";\n\nimport { useGetInitialProps } from \"../hooks\";\n\nimport type { ComponentType } from \"react\";\n\nexport const AutoInjectProps = (Component: ComponentType<unknown>, path = \"/\") => {\n  const MemoComponent = memo(Component);\n\n  const RouterComponentWithProps = () => {\n    const props = useGetInitialProps(path);\n\n    return <MemoComponent {...props} />;\n  };\n\n  return RouterComponentWithProps;\n};\n","import { Text, Icon, Link, Flex, Box } from \"@chakra-ui/react\";\nimport { memo } from \"react\";\nimport { AiFillHeart } from \"react-icons/ai\";\n\nimport { BLOG_SOURCE } from \"@client/config/source\";\nimport { useIsMounted } from \"@client/hooks\";\n\n// import { BLOG_SOURCE } from \"@app/config/source\";\n\nconst _Footer = () => {\n  const isMounted = useIsMounted();\n\n  return (\n    <Box textAlign=\"center\">\n      <Flex marginTop=\"6\" justifyContent=\"center\" alignItems=\"center\">\n        <Text fontSize={{ base: \"medium\", md: \"xl\" }} fontWeight=\"semibold\" noOfLines={1} display=\"flex\" alignItems=\"center\">\n          <Link href={BLOG_SOURCE} target=\"_blank\" color=\"blue.500\" textDecoration=\"none\" paddingLeft=\"0.2em\">\n            github\n          </Link>\n          <Icon as={AiFillHeart} color=\"red.600\" mx=\"0.2em\" />\n          <Text as=\"span\">@my-react</Text>\n        </Text>\n      </Flex>\n      <Text fontSize=\"sm\" marginTop=\"2.5\" marginBottom=\"9\" color=\"lightTextColor\">\n        {isMounted ? new Date().getFullYear() : \"\"}\n      </Text>\n    </Box>\n  );\n};\n\nexport const Footer = memo(_Footer);\n","import { Button, Icon, useColorMode } from \"@chakra-ui/react\";\nimport { MdOutlineDarkMode, MdOutlineLightMode } from \"react-icons/md\";\n\nexport const ColorMode = () => {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <Button onClick={toggleColorMode} variant=\"ghost\" size=\"sm\">\n      <Icon as={colorMode === \"dark\" ? MdOutlineDarkMode : MdOutlineLightMode} />\n    </Button>\n  );\n};\n","import { useColorModeValue } from \"@chakra-ui/react\";\nimport { css, Global } from \"@emotion/react\";\n\nexport const GlobalStyle = () => {\n  // source from highlight.js\n  const style = useColorModeValue(\n    css`\n      pre code.hljs {\n        display: block;\n        overflow-x: auto;\n        padding: 1em;\n      }\n      code.hljs {\n        padding: 3px 5px;\n      }\n      .hljs {\n        color: #383a42;\n        background: #fafafa;\n      }\n      .hljs-comment,\n      .hljs-quote {\n        color: #a0a1a7;\n        font-style: italic;\n      }\n      .hljs-doctag,\n      .hljs-formula,\n      .hljs-keyword {\n        color: #a626a4;\n      }\n      .hljs-deletion,\n      .hljs-name,\n      .hljs-section,\n      .hljs-selector-tag,\n      .hljs-subst {\n        color: #e45649;\n      }\n      .hljs-literal {\n        color: #0184bb;\n      }\n      .hljs-addition,\n      .hljs-attribute,\n      .hljs-meta .hljs-string,\n      .hljs-regexp,\n      .hljs-string {\n        color: #50a14f;\n      }\n      .hljs-attr,\n      .hljs-number,\n      .hljs-selector-attr,\n      .hljs-selector-class,\n      .hljs-selector-pseudo,\n      .hljs-template-variable,\n      .hljs-type,\n      .hljs-variable {\n        color: #986801;\n      }\n      .hljs-bullet,\n      .hljs-link,\n      .hljs-meta,\n      .hljs-selector-id,\n      .hljs-symbol,\n      .hljs-title {\n        color: #4078f2;\n      }\n      .hljs-built_in,\n      .hljs-class .hljs-title,\n      .hljs-title.class_ {\n        color: #c18401;\n      }\n      .hljs-emphasis {\n        font-style: italic;\n      }\n      .hljs-strong {\n        font-weight: 700;\n      }\n      .hljs-link {\n        text-decoration: underline;\n      }\n    `,\n    css`\n      pre code.hljs {\n        display: block;\n        overflow-x: auto;\n        padding: 1em;\n      }\n      code.hljs {\n        padding: 3px 5px;\n      }\n      .hljs {\n        color: #e9e9f4;\n        background: #282936;\n      }\n      .hljs ::selection,\n      .hljs::selection {\n        background-color: #4d4f68;\n        color: #e9e9f4;\n      }\n      .hljs-comment {\n        color: #626483;\n      }\n      .hljs-tag {\n        color: #62d6e8;\n      }\n      .hljs-operator,\n      .hljs-punctuation,\n      .hljs-subst {\n        color: #e9e9f4;\n      }\n      .hljs-operator {\n        opacity: 0.7;\n      }\n      .hljs-bullet,\n      .hljs-deletion,\n      .hljs-name,\n      .hljs-selector-tag,\n      .hljs-template-variable,\n      .hljs-variable {\n        color: #ea51b2;\n      }\n      .hljs-attr,\n      .hljs-link,\n      .hljs-literal,\n      .hljs-number,\n      .hljs-symbol,\n      .hljs-variable.constant_ {\n        color: #b45bcf;\n      }\n      .hljs-class .hljs-title,\n      .hljs-title,\n      .hljs-title.class_ {\n        color: #00f769;\n      }\n      .hljs-strong {\n        font-weight: 700;\n        color: #00f769;\n      }\n      .hljs-addition,\n      .hljs-code,\n      .hljs-string,\n      .hljs-title.class_.inherited__ {\n        color: #ebff87;\n      }\n      .hljs-built_in,\n      .hljs-doctag,\n      .hljs-keyword.hljs-atrule,\n      .hljs-quote,\n      .hljs-regexp {\n        color: #a1efe4;\n      }\n      .hljs-attribute,\n      .hljs-function .hljs-title,\n      .hljs-section,\n      .hljs-title.function_,\n      .ruby .hljs-property {\n        color: #62d6e8;\n      }\n      .diff .hljs-meta,\n      .hljs-keyword,\n      .hljs-template-tag,\n      .hljs-type {\n        color: #b45bcf;\n      }\n      .hljs-emphasis {\n        color: #b45bcf;\n        font-style: italic;\n      }\n      .hljs-meta,\n      .hljs-meta .hljs-keyword,\n      .hljs-meta .hljs-string {\n        color: #00f769;\n      }\n      .hljs-meta .hljs-keyword,\n      .hljs-meta-keyword {\n        font-weight: 700;\n      }\n    `,\n  );\n\n  return <Global styles={style} />;\n};\n","import { useQuery } from \"@apollo/client\";\nimport { Button, Container, Flex, HStack, Icon, Tag, TagLabel, TagLeftIcon, Text } from \"@chakra-ui/react\";\nimport { GetStarCountDocument } from \"@site/graphql\";\nimport { motion, useScroll, useTransform } from \"framer-motion\";\nimport { memo } from \"react\";\nimport { FaStar } from \"react-icons/fa\";\nimport { SiGithub } from \"react-icons/si\";\nimport { useIntl } from \"react-intl\";\nimport { useLocation, useNavigate } from \"react-router\";\n\nimport { CONTAINER_WIDTH } from \"@client/config/container\";\nimport { useIsMobile } from \"@client/hooks\";\nimport { noBase } from \"@shared\";\n\nimport { ColorMode } from \"../ColorMode\";\n\nimport { GlobalStyle } from \"./GlobalStyle\";\n\nconst map = {\n  \"/\": \"@my-react\",\n  \"/hot\": \"hmr\",\n  \"/blog\": \"blog\",\n};\n\nconst _Header = () => {\n  const location = useLocation();\n\n  const navigate = useNavigate();\n\n  const { formatMessage } = useIntl();\n\n  const isMobile = useIsMobile();\n\n  const { scrollY } = useScroll();\n\n  const opacity = useTransform(scrollY, [0, 0.2, 0.4], [0, 0.4, 1]);\n\n  const id = (map[location.pathname.toLowerCase()] as string) || \"@my-react\";\n\n  const { data, loading } = useQuery(GetStarCountDocument, {\n    variables: {\n      name: \"MyReact\",\n      owner: \"MrWangJustToDo\",\n    },\n  });\n\n  return (\n    <>\n      <Container maxWidth={CONTAINER_WIDTH} paddingX={{ base: \"3\", lg: \"6\" }}>\n        <GlobalStyle />\n        <Flex paddingY=\"2\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text as=\"h1\" fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight={{ base: \"semibold\", md: \"bold\" }} noOfLines={1}>\n            {formatMessage({ id })}\n          </Text>\n          <HStack gap={{ base: \"4px\", lg: \"8px\" }}>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate(noBase ? \"/\" : `/${__BASENAME__}/`)}>\n              Home\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => navigate(noBase ? \"/Blog\" : `/${__BASENAME__}/Blog`)}>\n              Example\n            </Button>\n            <ColorMode />\n            <Button variant=\"outline\" size=\"sm\" as=\"a\" href=\"https://github.com/MrWangJustToDo/MyReact\" target=\"_blank\">\n              <Icon as={SiGithub} />\n              {loading || isMobile ? null : (\n                <Tag variant=\"subtle\" colorScheme=\"orange\" marginLeft=\"3\">\n                  <TagLeftIcon as={FaStar} color=\"orange.300\" />\n                  <TagLabel>{data?.repository?.stargazerCount}</TagLabel>\n                </Tag>\n              )}\n            </Button>\n          </HStack>\n        </Flex>\n      </Container>\n      <motion.div style={{ opacity, borderBottom: \"1px solid rgba(100, 100, 100, .2)\" }}></motion.div>\n    </>\n  );\n};\n\nexport const Header = memo(_Header);\n","import { RemoveScroll } from \"react-remove-scroll\";\n\nimport { useLockBodyCount } from \"@client/hooks\";\n\nexport const LockBody = () => {\n  const count = useLockBodyCount();\n\n  return (\n    <RemoveScroll enabled={count > 0} className=\"placeholder\" as=\"span\">\n      <></>\n    </RemoveScroll>\n  );\n};\n","import { Box, Divider, Portal, useCallbackRef } from \"@chakra-ui/react\";\nimport { animate, motion, useMotionValue, useTransform } from \"framer-motion\";\nimport { useCallback, useRef } from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\n\nimport { useEffectOnce, useWindowSize } from \"@client/hooks\";\n\nimport type { OverlayProps } from \"@client/hooks\";\nimport type { PanInfo } from \"framer-motion\";\n\nexport const Mobile = (props: OverlayProps) => {\n  const { id, head, body, foot, height, className, closeComplete, closeHandler, applyOverlay, isFirst } = props;\n\n  const isOpenRef = useRef(false);\n\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  const allowDragElement = useRef<HTMLDivElement>(null);\n\n  const allowDrag = useRef(false);\n\n  const { height: windowHeight } = useWindowSize();\n\n  const indicatorRotation = useMotionValue(0);\n\n  const indicator1Transform = useTransform(indicatorRotation, (r) => `translateX(2px) rotate(${r}deg)`);\n\n  const indicator2Transform = useTransform(indicatorRotation, (r) => `translateX(-2px) rotate(${-1 * r}deg)`);\n\n  const y = useMotionValue(0);\n\n  const handleDragStart = useCallback((e: PointerEvent) => {\n    if (e.target) {\n      const typedElement = e.target as HTMLElement;\n      if (typedElement.contains(allowDragElement.current)) {\n        allowDrag.current = true;\n      } else {\n        allowDrag.current = false;\n      }\n    } else {\n      allowDrag.current = false;\n    }\n  }, []);\n\n  const handleDrag = useCallback((_, { delta }: PanInfo) => {\n    if (!allowDrag.current) return;\n    // Update drag indicator rotation based on drag velocity\n    const velocity = y.getVelocity();\n    if (velocity > 0) indicatorRotation.set(10);\n    if (velocity < 0) indicatorRotation.set(-10);\n    // Make sure user cannot drag beyond the top of the sheet\n    y.set(Math.max(y.get() + delta.y, 0));\n  }, []); // eslint-disable-line\n\n  const handleDragEnd = useCallback(\n    (_, { velocity }: PanInfo) => {\n      if (velocity.y > 500) {\n        closeHandler && closeHandler();\n      } else {\n        const modal = modalRef.current as HTMLDivElement;\n        const contentHeight = modal?.getBoundingClientRect()?.height;\n        if (y.get() / contentHeight > 0.6) {\n          closeHandler && closeHandler();\n        } else {\n          animate(y, 0, {\n            type: \"spring\",\n            ...{ stiffness: 300, damping: 30, mass: 0.2 },\n          });\n        }\n        indicatorRotation.set(0);\n      }\n    },\n    [indicatorRotation] // eslint-disable-line\n  );\n\n  const animationComplete = useCallbackRef(() => {\n    if (!isOpenRef.current) {\n      isOpenRef.current = true;\n    } else if (isOpenRef.current && closeComplete) {\n      closeComplete();\n      applyOverlay(id, false);\n    }\n  });\n\n  useEffectOnce(() => {\n    applyOverlay(id, true);\n    return () => {\n      applyOverlay(id, false);\n    };\n  });\n\n  return (\n    <Portal>\n      <Box position=\"fixed\" left=\"0\" right=\"0\" top=\"0\" bottom=\"0\" overflow=\"hidden\" zIndex=\"overlay\" id={id}>\n        <motion.div\n          drag=\"y\"\n          dragElastic={0}\n          onDrag={handleDrag}\n          dragMomentum={false}\n          onDragEnd={handleDragEnd}\n          onDragStart={handleDragStart}\n          dragConstraints={{ bottom: 0, top: 0 }}\n          style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }}\n        >\n          <Box position=\"absolute\" width=\"100%\" height=\"100%\" left=\"0\" right=\"0\" onClick={closeHandler} />\n          <motion.div\n            ref={modalRef}\n            style={{\n              y,\n              bottom: \"0\",\n              width: \"100%\",\n              display: \"flex\",\n              overflow: \"hidden\",\n              height: `${height}%`,\n              position: \"absolute\",\n              flexDirection: \"column\",\n              borderRadius: \"8px 8px 0 0\",\n              filter: \"drop-shadow(0 0 0.75rem rgba(100, 100, 100, 0.35))\",\n              border: \"1px solid var(--chakra-colors-cardBorderColor)\",\n            }}\n            initial={{ y: windowHeight }}\n            animate={{ y: 0, transition: { type: \"tween\" } }}\n            exit={{ y: windowHeight, transition: { type: \"tween\" } }}\n            className={className}\n            onAnimationComplete={animationComplete}\n          >\n            <Box ref={allowDragElement} height=\"25px\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\" backgroundColor=\"mobileModalColor\">\n              <motion.span\n                style={{\n                  width: \"18px\",\n                  height: \"4px\",\n                  borderRadius: \"99px\",\n                  transform: indicator1Transform,\n                  backgroundColor: \"var(--chakra-colors-gray-300)\",\n                }}\n              />\n              <Box width=\"0.5\" />\n              <motion.span\n                style={{\n                  width: \"18px\",\n                  height: \"4px\",\n                  borderRadius: \"99px\",\n                  transform: indicator2Transform,\n                  backgroundColor: \"var(--chakra-colors-gray-300)\",\n                }}\n              />\n            </Box>\n            <Divider />\n            <Box backgroundColor=\"mobileModalColor\" paddingX=\"3.5\" paddingY=\"1.5\">\n              {head}\n            </Box>\n            <Box\n              flex=\"1\"\n              enabled={true}\n              id=\"modal-scroll-box\"\n              paddingX=\"3.5\"\n              allowPinchZoom\n              removeScrollBar={isFirst}\n              marginTop=\"-1px\"\n              overflow=\"auto\"\n              position=\"relative\"\n              backgroundColor=\"mobileModalColor\"\n              as={RemoveScroll}\n            >\n              {body}\n            </Box>\n            <Box backgroundColor=\"mobileModalColor\" padding=\"3.5\" paddingY=\"1.5\">\n              {foot}\n            </Box>\n          </motion.div>\n        </motion.div>\n      </Box>\n    </Portal>\n  );\n};\n","import { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useBreakpointValue } from \"@chakra-ui/react\";\n\nimport type { OverlayProps } from \"@client/hooks\";\n\nexport const Desktop = (props: OverlayProps) => {\n  const { head, body, foot, showState, className, closeComplete, closeHandler } = props;\n\n  const size = useBreakpointValue({ base: \"full\", lg: \"3xl\" });\n\n  return (\n    <Modal size={size} isOpen={showState} scrollBehavior=\"inside\" onClose={closeHandler} onCloseComplete={closeComplete}>\n      <ModalOverlay />\n      <ModalContent className={className}>\n        {head && <ModalHeader>{head}</ModalHeader>}\n        <ModalCloseButton />\n        <ModalBody id=\"modal-scroll-box\" paddingTop=\"0\">\n          {body}\n        </ModalBody>\n        {foot && <ModalFooter>{foot}</ModalFooter>}\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { useOverlayArray } from \"@client/hooks\";\n\nimport { Desktop } from \"../Overlay\";\n\nexport const DesktopOverlay = () => {\n  const { desktop: overlays } = useOverlayArray();\n\n  return (\n    <>\n      {overlays.map((p) => (\n        <Desktop key={p.key} {...p} />\n      ))}\n    </>\n  );\n};\n","import { AnimatePresence } from \"framer-motion\";\n\nimport { useOverlayArray } from \"@client/hooks\";\n\nimport { Mobile } from \"../Overlay\";\n\nexport const MobileOverlay = () => {\n  const { mobile: overlays } = useOverlayArray();\n  return (\n    <>\n      {/* currently the exit animation not work, look like it is a bug, SEE https://github.com/framer/motion/issues/1085, https://github.com/framer/motion/issues/1424 */}\n      <AnimatePresence>{overlays.map((p) => (p.showState ? <Mobile key={p.key} {...p} /> : null))}</AnimatePresence>\n    </>\n  );\n};\n","import { Portal, useBreakpointValue } from \"@chakra-ui/react\";\nimport { useMemo } from \"react\";\n\nimport { OverlayArrayContext, OverlayCloseContext, OverlayOpenContext, useOverlaysProps } from \"@client/hooks\";\n\nimport { DesktopOverlay } from \"./DesktopOverlay\";\nimport { MobileOverlay } from \"./MobileOverlay\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const ModuleManager = ({ children }: { children: JSX.Element | JSX.Element[] }) => {\n  const { overlays, open, close } = useOverlaysProps();\n  const overlaysObj = useBreakpointValue(\n    useMemo(\n      () => ({\n        base: { mobile: overlays, desktop: [] },\n        md: { mobile: [], desktop: overlays },\n      }),\n      [overlays]\n    )\n  );\n\n  return (\n    <OverlayArrayContext.Provider value={overlaysObj}>\n      <OverlayCloseContext.Provider value={close}>\n        <OverlayOpenContext.Provider value={open}>\n          {children}\n          <Portal>\n            <MobileOverlay />\n            <DesktopOverlay />\n          </Portal>\n        </OverlayOpenContext.Provider>\n      </OverlayCloseContext.Provider>\n    </OverlayArrayContext.Provider>\n  );\n};\n","import { Box } from \"@chakra-ui/react\";\nimport { Component } from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport { Outlet } from \"react-router\";\n\nimport { Footer } from \"@client/component/Footer\";\nimport { Header } from \"@client/component/Header\";\nimport { LockBody } from \"@client/component/LockBody\";\nimport { ModuleManager } from \"@client/component/ModuleManager\";\nimport { initialStateWrapper } from \"@client/utils\";\n\nimport type { ReactNode } from \"react\";\n\n// TODO\n@initialStateWrapper<{ title: string }>(({ relativePathname }) => ({ props: { title: relativePathname } }))\nexport default class Layout extends Component<{ title: string }, { isMounted: boolean }> {\n  state = {\n    isMounted: false,\n  };\n\n  constructor(props) {\n    super(props);\n    console.warn(\"create\", this);\n  }\n  componentDidMount(): void {\n    console.warn(\"mounted\", this);\n    this.setState({ isMounted: true });\n  }\n  componentWillUnmount(): void {\n    console.warn(\"unmount\", this);\n  }\n  UNSAFE_componentWillMount(): void {\n    console.warn(\"willMount\", this);\n  }\n  render(): ReactNode {\n    console.warn(\"render\", this);\n    const { title } = this.props;\n    const { isMounted } = this.state;\n    return (\n      <>\n        <Helmet title={(title?.slice(1)?.toLowerCase() || \"@my-react\") + \" | @my-react\"} />\n        <LockBody />\n        <ModuleManager>\n          <Box id=\"page-header\" position=\"sticky\" top=\"0\" backgroundColor={isMounted ? \"bannerBackgroundColor\" : undefined} zIndex=\"banner\">\n            <Header />\n          </Box>\n          <div id=\"page-content\">\n            <Outlet />\n          </div>\n          <div id=\"page-footer\">\n            <Footer />\n          </div>\n        </ModuleManager>\n      </>\n    );\n  }\n}\n","import { createElement, lazy } from \"react\";\n\nimport { noBase } from \"@shared\";\n\nimport { AutoInjectProps } from \"../common/AutoInjectProps\";\nimport Layout from \"../common/Layout\";\n\nimport { dynamicRouteConfig } from \"./dynamicRoutes\";\n\nimport type { PreLoadRouteConfig } from \"../types/route\";\n\nconst baseRouter: PreLoadRouteConfig = {\n  preLoad: () => Layout,\n  element: createElement(AutoInjectProps(Layout)),\n};\n\nconst dynamicRoutes = dynamicRouteConfig\n  .map(({ path, componentPath }) => {\n    // just set true for current usage\n    if (noBase) {\n      return { path, componentPath };\n    } else {\n      if (path.startsWith(\"/\")) {\n        return {\n          path: `/${__BASENAME__}/${path.slice(1)}`,\n          componentPath,\n        };\n      } else {\n        return {\n          path: `/${__BASENAME__}/${path}`,\n          componentPath,\n        };\n      }\n    }\n  })\n  .map((it) => ({\n    path: it.path,\n    preLoad: () =>\n      import(\n        /* webpackMode: \"lazy\" */\n        /* webpackPrefetch: true */\n        /* webpackPreload: true */\n        /* webpackChunkName: \"page-[request]\" */\n        `../pages/${it.componentPath}`\n      ),\n    component: lazy(() =>\n      import(\n        /* webpackMode: \"lazy\" */\n        /* webpackPrefetch: true */\n        /* webpackPreload: true */\n        /* webpackChunkName: \"page-[request]\" */\n        `../pages/${it.componentPath}`\n      ).then((module) => ({ default: AutoInjectProps(module.default, it.path) }))\n    ),\n  }))\n  .map(({ path, component: Component, preLoad }) => ({\n    path: path,\n    preLoad,\n    element: createElement(Component),\n  }));\n\nbaseRouter.children = dynamicRoutes;\n\nexport const allRoutes = [baseRouter];\n\ntypeof window !== \"undefined\" && ((window as any).__router__ = allRoutes);\n","/* eslint-disable prettier/prettier */\n/* do not editor this template */\nimport type { DynamicRouteConfig } from \"@client/types/route\";\n\nexport const dynamicRouteConfig: DynamicRouteConfig[] = [{\"path\":\"/Blog\",\"componentPath\":\"Blog\"},{\"path\":\"/\",\"componentPath\":\"index\"},{\"path\":\"/*\",\"componentPath\":\"404\"}];","import type { Cancel, Delay, KeyMap, ReJectMap, TimeoutMap } from \"../types/util\";\n\nconst timeoutMap: TimeoutMap = {};\nconst rejectMap: ReJectMap = {};\nconst keyMap: KeyMap = {};\nlet keyLength = 0;\nconst maxKeyLength = 200;\n\nconst cancel: Cancel = (key) => {\n  if (timeoutMap[key]) {\n    const length = timeoutMap[key].length;\n    timeoutMap[key] = timeoutMap[key].map((id) => id && clearTimeout(id)).slice(length);\n    rejectMap[key] = rejectMap[key].map((reject) => reject && reject()).slice(length);\n  }\n  if (keyLength > maxKeyLength) {\n    const keys = Object.keys(keyMap).sort((key1, key2) => (keyMap[key1] > keyMap[key2] ? 1 : -1));\n    for (const keyItem of keys) {\n      if (keyItem !== key && !rejectMap[keyItem].length) {\n        delete keyMap[keyItem];\n        delete timeoutMap[keyItem];\n        delete rejectMap[keyItem];\n        keyLength--;\n      }\n    }\n  }\n};\n\nconst delay: Delay = (time, action, key) => {\n  if (key === undefined) {\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, time);\n    }).then(() => {\n      if (action) return action();\n    });\n  } else {\n    if (!(key in keyMap)) {\n      keyMap[key] = 1;\n      timeoutMap[key] = [];\n      rejectMap[key] = [];\n      keyLength++;\n    } else {\n      keyMap[key]++;\n    }\n    cancel(key);\n    return new Promise<void>((resolve, reject) => {\n      rejectMap[key].push(reject);\n      timeoutMap[key].push(\n        setTimeout(() => {\n          resolve();\n        }, time)\n      );\n    })\n      .then(() => {\n        if (action) return action();\n      })\n      .catch(() => void 0);\n  }\n};\n\nexport { delay, cancel };\n","import merge from \"lodash/merge\";\nimport { matchRoutes } from \"react-router\";\n\nimport type { PreLoadStateProps, GetInitialStateType, PreLoadStateType, AllPreLoadStateType, PreLoadComponentType } from \"@client/types/common\";\nimport type { PreLoadRouteConfig } from \"@client/types/route\";\nimport type { LoadableComponent } from \"@loadable/component\";\nimport type { RootStore } from \"@shared\";\nimport type { ComponentClass } from \"react\";\nimport type { Params } from \"react-router\";\n\nexport type RedirectType = {\n  code?: number;\n  location: { pathName: string; query?: URLSearchParams };\n};\n\nfunction preLoad(\n  routes: PreLoadRouteConfig[],\n  pathname: string,\n  query: URLSearchParams,\n  store: RootStore\n): Promise<{\n  // used to preload script by page initial\n  page?: string[];\n  error?: string;\n  props?: Record<string, Record<string, unknown>>;\n  redirect?: RedirectType;\n}> {\n  const branch = matchRoutes(routes, pathname) || [];\n\n  const relativePathname = pathname;\n\n  const promises: Promise<{\n    error?: string;\n    page?: string[];\n    redirect?: RedirectType;\n    props?: Record<string, Record<string, unknown>>;\n  } | void>[] = [];\n\n  branch.forEach(({ route, params, pathname }) => {\n    const match = { params, pathname };\n    promises.push(_preLoad({ route: route as PreLoadRouteConfig, store, match, query, relativePathname }));\n  });\n\n  return Promise.all(promises).then((val) => {\n    if (val.length) {\n      const allInitialProps = val.filter(Boolean).reduce<{\n        error?: string;\n        page?: string[];\n        props?: Record<string, Record<string, unknown>>;\n        redirect?: RedirectType;\n      }>((s, c) => {\n        if (!c) {\n          return s;\n        }\n        s.props = merge(s.props, c.props);\n        s.page = (s.page || []).concat(c.page || []);\n        s.error = [s.error, c.error].filter(Boolean).join(\" || \");\n        s.redirect = c.redirect ? c.redirect : s.redirect;\n        return s;\n      }, {});\n      return allInitialProps;\n    }\n    return {\n      redirect: {\n        code: 301,\n        location: { pathName: \"/404\" },\n      },\n    };\n  });\n}\n\nconst preLoadPropsKey = (pathName: string) => `__preload-[${pathName}]-props__`;\n\ntype PreLoadProps = {\n  route: PreLoadRouteConfig;\n  store: RootStore;\n  match: { params: Params<string>; pathname: string };\n  relativePathname: string;\n  query: URLSearchParams;\n};\n\ntype PreLoadType = (props: PreLoadProps) => Promise<{\n  error?: string;\n  page?: string[];\n  redirect?: RedirectType;\n  props?: Record<string, Record<string, unknown>>;\n} | void>;\n\nconst resolvePreLoadStateFunction = async ({ route }: Pick<PreLoadProps, \"route\">): Promise<AllPreLoadStateType | null> => {\n  const preLoadStateArray: PreLoadStateType[] = [];\n  // for router\n  if (route.getInitialState) {\n    preLoadStateArray.push(route.getInitialState);\n  }\n\n  if (__STREAM__) {\n    if (route.preLoad) {\n      const component = await route.preLoad();\n      if (component[\"default\"]) {\n        const typedComponent = component[\"default\"] as PreLoadComponentType;\n        if (typedComponent.getInitialState) {\n          preLoadStateArray.push(typedComponent.getInitialState);\n        }\n      }\n      if (component[\"getInitialState\"]) {\n        const typedComponent = component as PreLoadComponentType;\n        preLoadStateArray.push(typedComponent.getInitialState);\n      }\n    }\n  } else {\n    if (route.component) {\n      const WrapperComponent = route.component;\n      if (WrapperComponent[\"load\"] && typeof WrapperComponent[\"load\"] === \"function\") {\n        const loadAbleComponent = WrapperComponent as LoadableComponent<Record<string, unknown>>;\n        const preLoadComponent: PreLoadComponentType & { readonly default?: PreLoadComponentType } = await loadAbleComponent.load();\n        if (preLoadComponent.getInitialState && typeof preLoadComponent.getInitialState === \"function\") {\n          preLoadStateArray.push(preLoadComponent.getInitialState);\n        }\n        if (typeof preLoadComponent.default !== \"undefined\") {\n          const c = preLoadComponent.default;\n          if (c.getInitialState && typeof c.getInitialState === \"function\") {\n            preLoadStateArray.push(c.getInitialState);\n          }\n        }\n      } else {\n        const preLoadComponent = WrapperComponent as PreLoadComponentType;\n        if (preLoadComponent.getInitialState && typeof preLoadComponent.getInitialState === \"function\") {\n          preLoadStateArray.push(preLoadComponent.getInitialState);\n        }\n      }\n    }\n  }\n\n  if (preLoadStateArray.length) {\n    return async ({ store, pathName, params, relativePathname, query }: PreLoadStateProps) => {\n      const propsKey = preLoadPropsKey(pathName);\n      const res = await Promise.all(\n        preLoadStateArray.map((fn) =>\n          Promise.resolve()\n            .then(() => fn({ store, pathName, params, relativePathname, query }))\n            .catch((e) => {\n              // catch all error by default\n              console.error(`[${__CLIENT__ ? \"client\" : \"server\"}] getInitialState error ${e.toString()}`);\n              return null;\n            })\n        )\n      );\n\n      const result = res.filter(Boolean).reduce<{\n        redirect?: RedirectType;\n        error?: string;\n        props?: Record<string, unknown>;\n      }>((s, c) => {\n        if (!c) {\n          return s;\n        }\n        s.error = [s.error, c.error].filter(Boolean).join(\" || \");\n        s.props = merge(s.props, c.props);\n        s.redirect = c.redirect ? c.redirect : s.redirect;\n        return s;\n      }, {});\n\n      return {\n        ...result,\n        props: { [propsKey]: result.props || {} },\n      };\n    };\n  } else {\n    return null;\n  }\n};\n\nconst _preLoad: PreLoadType = async ({ route, store, match, query, relativePathname }) => {\n  const getInitialState = await resolvePreLoadStateFunction({ route });\n  if (getInitialState) {\n    const initialState = await getInitialState({\n      store,\n      pathName: match.pathname,\n      params: match.params,\n      relativePathname,\n      query,\n    });\n    if (route.path) {\n      return { ...initialState, page: [route.path] };\n    } else {\n      return initialState;\n    }\n  } else if (route.path) {\n    return { page: [route.path] };\n  }\n};\n\nfunction initialStateWrapper<T extends Record<string, unknown>>(getInitialState: GetInitialStateType<T>) {\n  function Wrapper(Component: ComponentClass<T> & { getInitialState?: GetInitialStateType<T> }): void {\n    Component.getInitialState = getInitialState;\n  }\n  return Wrapper;\n}\n\nexport { preLoad, initialStateWrapper, preLoadPropsKey };\n","import memoize from \"lodash/memoize\";\n\nexport const getIsMiddleware = memoize(() => (__SERVER__ ? JSON.parse(process.env.MIDDLEWARE || \"false\") : window.__ENV__.isMIDDLEWARE));\n\nexport const getIsSSR = memoize(() => (__SERVER__ ? JSON.parse(process.env.SSR || \"false\") : window.__ENV__.isSSR));\n\nexport const getIsStream = memoize(() => (__SERVER__ ? JSON.parse(process.env.STREAM || \"false\") : window.__ENV__.isSTREAM));\n\nexport const getIsAnimateRouter = memoize(() => (__SERVER__ ? JSON.parse(process.env.ANIMATE_ROUTER || \"false\") : window.__ENV__.isANIMATE_ROUTER));\n\nexport const getIsP_CSR = memoize(() => (__SERVER__ ? false : window.__ENV__.isPURE_CSR));\n\nexport const getIsStaticGenerate = memoize(() =>\n  __SERVER__ ? JSON.parse(process.env.STATIC_GENERATE || \"false\") && process.env.NODE_ENV === \"production\" : window.__ENV__.isSTATIC\n);\n\nexport const getPublicApi = memoize(() =>\n  __SERVER__ ? (__DEVELOPMENT__ ? process.env.PUBLIC_DEV_API_HOST : process.env.PUBLIC_PROD_API_HOST) : window.__ENV__.PUBLIC_API_HOST\n);\n\nexport const noBase = __DEVELOPMENT__ || __BASENAME__ === \"\";\n","import { serverActionName } from \"./store/action\";\nimport { getDataAction_Server } from \"./store/reducer\";\n\nimport type { AppDispatch } from \"./store\";\n\nexport const supportedLang = {\n  en: \"English\",\n  zh: \"中文\",\n};\n\nexport const loadCurrentLang = async (dispatch: AppDispatch, lang: keyof typeof supportedLang) => {\n  await dispatch(getDataAction_Server({ name: serverActionName.serverLang, lang }));\n};\n\nexport const defaultLang = \"en\";\n","import { createRequest } from \"project-tool/request\";\nimport { call, put, select } from \"redux-saga/effects\";\n\nimport { getPublicApi } from \"@shared\";\nimport { clientActionName, serverActionName } from \"@shared/store/action\";\nimport { getDataFail_Server, getDataLoading_server, getDataSuccess_Server, setDataSuccess_client } from \"@shared/store/reducer\";\n\nimport type { StoreState } from \"@shared/store/type\";\n\nexport function* langSaga({ done, lang }: { done: () => void; lang: string }) {\n  try {\n    const langData: { [props: string]: any } = yield select<(s: StoreState) => { [props: string]: unknown }>((state) => state.server.serverLang.data);\n    if (!langData[lang]) {\n      yield put(getDataLoading_server({ name: serverActionName.serverLang }));\n      const request = createRequest({ baseURL: getPublicApi() });\n      const {\n        data: { data },\n      } = yield call((apiName: string) => request.get(apiName, { params: { lang } }), \"/api/lang\");\n      yield put(getDataSuccess_Server({ name: serverActionName.serverLang, data: { [lang]: data } }));\n    }\n    yield put(setDataSuccess_client({ name: clientActionName.clientLang, data: lang }));\n  } catch (e) {\n    if (__DEVELOPMENT__) {\n      console.error(\"langSaga error: \", (e as Error).message);\n    }\n    yield put(getDataFail_Server({ name: serverActionName.serverLang, error: (e as Error).toString() }));\n  } finally {\n    done();\n  }\n}\n","import { all, takeLatest } from \"redux-saga/effects\";\n\nimport { serverActionName } from \"../action\";\nimport { serverAction } from \"../reducer\";\n\nimport { langSaga } from \"./action\";\n\ntype StartActionType = { type: ReturnType<typeof serverAction.GET_DATA_ACTION>; done: () => void; [props: string]: any };\n\nfunction* rootSaga() {\n  yield all([takeLatest<StartActionType>(serverAction.GET_DATA_ACTION(serverActionName.serverLang), ({ done, lang }) => langSaga({ done, lang }))]);\n}\n\nexport { rootSaga };\n","import { fork, take, cancel } from \"redux-saga/effects\";\n\nimport type { rootSaga } from \".\";\nimport type { SagaStore } from \"../type\";\nimport type createSagaMiddleware from \"redux-saga\";\nimport type { Saga, Task } from \"redux-saga\";\n\nexport const CANCEL_SAGAS_HMR = \"@CANCEL_SAGAS_HMR\";\n\nfunction createAbortAbleSaga(saga: typeof rootSaga) {\n  if (__DEVELOPMENT__) {\n    return function* main() {\n      const sagaTask: Task = yield fork(saga);\n\n      yield take(CANCEL_SAGAS_HMR);\n      yield cancel(sagaTask);\n    };\n  } else {\n    return saga;\n  }\n}\n\nconst SagaManager = {\n  startSagas(saga: typeof rootSaga, sagaMiddleware: ReturnType<typeof createSagaMiddleware>) {\n    return sagaMiddleware.run(createAbortAbleSaga(saga) as Saga);\n  },\n\n  cancelSagas(store: SagaStore) {\n    store.dispatch({\n      type: CANCEL_SAGAS_HMR,\n    });\n  },\n};\n\nexport { SagaManager };\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { legacy_createStore as createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport { rootReducer } from \"./reducer\";\nimport { rootSaga } from \"./saga\";\nimport { SagaManager } from \"./saga/utils\";\n\nimport type { SagaStore } from \"./type\";\nimport type { TypedUseSelectorHook } from \"react-redux\";\nimport type { Middleware, PreloadedState } from \"redux\";\n\ntype CreateStoreProps = {\n  preloadedState?: PreloadedState<ReturnType<typeof rootReducer>>;\n  middleware?: Middleware[];\n};\n\nconst devTools =\n  __CLIENT__ && typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === \"function\" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ actionsDenylist: [] });\n\nconst composeEnhancers = devTools || compose;\n\nexport const createUniversalStore = (props: CreateStoreProps = {}): SagaStore => {\n  const { preloadedState, middleware = [] } = props;\n  const sagaMiddleware = createSagaMiddleware();\n  const allMiddleware = [thunkMiddleware, sagaMiddleware, ...middleware];\n  const store = createStore(rootReducer, preloadedState, composeEnhancers(applyMiddleware(...allMiddleware))) as SagaStore;\n  store.sagaTask = SagaManager.startSagas(rootSaga, sagaMiddleware);\n\n  // Enable Webpack hot module\n  if (__DEVELOPMENT__ && module.hot) {\n    module.hot.accept(\"./reducer\", () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { rootReducer: nextRootReducer } = require(\"./reducer\");\n      store.replaceReducer(nextRootReducer);\n    });\n\n    module.hot.accept(\"./saga\", () => {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { rootSaga: nextRootSaga } = require(\"./saga\");\n      SagaManager.cancelSagas(store);\n      store.sagaTask = SagaManager.startSagas(nextRootSaga, sagaMiddleware);\n    });\n  }\n\n  return store;\n};\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport type RootStore = ReturnType<typeof createUniversalStore>;\n\nexport type AppDispatch = ReturnType<typeof createUniversalStore>[\"dispatch\"];\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { extendTheme } from \"@chakra-ui/react\";\n\nimport { semanticTokens } from \"./semanticTokens\";\nimport { styles } from \"./styles\";\n\nimport type { ChakraTheme} from \"@chakra-ui/react\";\n\n\nexport const theme: Partial<ChakraTheme> = extendTheme({\n  styles,\n  semanticTokens,\n});\n","import type { ChakraTheme } from \"@chakra-ui/react\";\n\nexport const styles: ChakraTheme[\"styles\"] = {\n  global: {\n    body: {\n      fontFamily: `ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,\n      Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji`,\n    },\n  },\n};\n","import type { ChakraTheme } from \"@chakra-ui/react\";\n\nexport const semanticTokens: ChakraTheme[\"semanticTokens\"] = {\n  colors: {\n    mobileCardBackgroundColor: {\n      default: \"white\",\n      _dark: \"gray.700\",\n    },\n    cardBackgroundColor: {\n      default: \"whiteAlpha.500\",\n      _dark: \"blackAlpha.600\",\n    },\n    mobileModalColor: {\n      default: \"rgb(220, 220, 220)\",\n      _dark: \"gray.700\",\n    },\n    cardBorderColor: {\n      default: \"gray.300\",\n      _dark: \"gray.600\",\n    },\n    lightTextColor: {\n      default: \"gray.600\",\n      _dark: \"gray.400\",\n    },\n    siteBackgroundColor: {\n      default: \"rgba(250, 250, 250, 0.8)\",\n      _dark: \"rgba(24, 24, 24, 0.2)\",\n    },\n    bannerBackgroundColor: {\n      default: \"rgb(255, 255, 255)\",\n      _dark: \"#1A202C\",\n    },\n  },\n};\n","import { ColorModeScript } from \"@chakra-ui/react\";\n\nimport type { HTMLProps } from \".\";\n\nexport const Body = ({ children, script = [], refresh = [] }: HTMLProps) => (\n  <body>\n    <ColorModeScript /* type='cookie' */ type='localStorage' />\n    {typeof children === \"string\" ? <div id=\"__content__\" dangerouslySetInnerHTML={{ __html: children || \"\" }} /> : <div id=\"__content__\">{children}</div>}\n    {script.filter(Boolean).map((ele) => ele)}\n    {refresh.filter(Boolean).map((ele) => ele)}\n  </body>\n);\n","import { noBase } from \"@shared\";\n\nimport type { HTMLProps } from \".\";\n\nexport const Head = ({ env = \"{}\", link = [], preLoad = [], preloadedState = \"{}\", helmetContext: { helmet } = {}, emotionChunks }: HTMLProps) => (\n  <head>\n    <meta charSet=\"utf-8\" />\n    <meta name=\"build-time\" content={__BUILD_TIME__} />\n    <meta name=\"power-by\" content={`@my-react ꒰ঌ( ⌯' '⌯)໒꒱`} />\n    <meta name=\"author\" content=\"MrWangJustToDo\" />\n    <meta\n      name=\"description\"\n      content=\"@my-react is a React like package, it can be used to build a modern website just like this, feel free to use and fire a issue if you have! link: https://github.com/MrWangJustToDo/MyReact\"\n    />\n    <meta name=\"keywords\" content=\"react, react-dom, ssr, csr, ssg\" />\n    <base href={noBase ? \"/\" : `/${__BASENAME__}/`} />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    <link rel=\"shortcut icon\" href=\"./favicon.ico\" type=\"image/x-icon\" />\n    {/* a type issue for react-helmet-async  */}\n    <>\n      {helmet?.base.toComponent()}\n      {helmet?.title.toComponent()}\n      {helmet?.meta.toComponent()}\n      {helmet?.link.toComponent()}\n      {helmet?.noscript.toComponent()}\n      {helmet?.style.toComponent()}\n      {helmet?.script.toComponent()}\n    </>\n    {preLoad.filter(Boolean).map((ele) => ele)}\n    {link.filter(Boolean).map((ele) => ele)}\n    {emotionChunks?.styles.map((style, index) => (\n      <style data-server data-emotion={`${style.key} ${style.ids.join(\" \")}`} key={style.key + \"_\" + index} dangerouslySetInnerHTML={{ __html: style.css }} />\n    ))}\n    <script id=\"__preload_env__\" type=\"application/json\" dangerouslySetInnerHTML={{ __html: `${env}` }} />\n    <script id=\"__preload_state__\" type=\"application/json\" dangerouslySetInnerHTML={{ __html: `${preloadedState}` }} />\n  </head>\n);\n","\nimport { Body } from \"./Body\";\nimport { Head } from \"./Head\";\n\nimport type { extractCriticalToChunks } from \"@emotion/server\";\nimport type { ReactElement } from \"react\";\nimport type { HelmetServerState } from \"react-helmet-async\";\n\nexport type HTMLProps = {\n  env?: string;\n  lang?: string;\n  children?: string | JSX.Element;\n  preloadedState?: string;\n  link?: ReactElement[];\n  script?: ReactElement[];\n  preLoad?: ReactElement[];\n  refresh?: ReactElement[];\n  emotionChunks?: ReturnType<typeof extractCriticalToChunks>;\n  helmetContext?: { helmet?: HelmetServerState };\n};\n\nexport const HTML = (props: HTMLProps) => {\n  return (\n    <html lang={props.lang || \"\"}>\n      <Head {...props} />\n      <Body {...props} />\n    </html>\n  );\n};\n","export const safeData = <T extends Record<string, unknown>>(data: T, key?: string): T => {\n  if (key) {\n    const cacheData = data[key];\n    Object.defineProperty(data, key, {\n      get: function () {\n        return cacheData;\n      },\n      configurable: false,\n    });\n    return data;\n  } else {\n    Object.keys(data).forEach((key) => {\n      const cacheData = data[key];\n      Object.defineProperty(data, key, {\n        get: function () {\n          return cacheData;\n        },\n        configurable: false,\n      });\n    });\n    return data;\n  }\n};\n","import createCache from \"@emotion/cache\";\n\nexport const createEmotionCache = () => createCache({ key: \"css\" });\n","export enum clientActionName {\n  clientLang = \"clientLang\",\n  clientProps = \"clientProps\",\n}\n\nexport enum serverActionName {\n  serverLang = \"serverLang\",\n}\n","import type { ClientActionType, CreateClientActionProps, CreateClientActionType } from \"../type\";\n\nconst clientAction: ClientActionType = {\n  SET_DATA_ACTION: (name) => `@client_action_${name}_start`,\n  SET_DATA_LOADING: (name) => `@client_action_${name}_loading`,\n  SET_DATA_SUCCESS: (name) => `@client_action_${name}_success`,\n  SET_DATA_FAIL: (name) => `@client_action_${name}_fail`,\n};\n\nconst setDataLoading_client: CreateClientActionType = ({ name }) => ({ type: clientAction.SET_DATA_LOADING(name), loadingState: true });\n\n// not need\nconst setDataAction_client: CreateClientActionType = ({ name }) => ({ type: clientAction.SET_DATA_ACTION(name), loadingState: true });\n\nconst setDataSuccess_client: CreateClientActionType = <T>({ name, data }: CreateClientActionProps<T>) => ({\n  type: clientAction.SET_DATA_SUCCESS(name),\n  data,\n  loadingState: false,\n});\n\nconst setDataFail_client: CreateClientActionType = <T>({ name, error }: CreateClientActionProps<T>) => ({\n  type: clientAction.SET_DATA_FAIL(name),\n  error,\n  loadingState: false,\n});\n\nexport { clientAction, setDataLoading_client, setDataAction_client, setDataSuccess_client, setDataFail_client };\n","import { produce } from \"immer\";\n\nimport { clientActionName } from \"@shared/store/action\";\n\nimport { clientAction } from \"../share/action\";\n\nimport type { ReducerState, ReducerStateAction, ReducerStateActionMapType } from \"@shared/store/type\";\nimport type { Reducer } from \"redux\";\n\ntype CurrentState = ReducerState<string>;\n\nconst initState: CurrentState = { data: \"\", error: null, loaded: false, loading: false };\n\nconst clientLangReducer: Reducer<CurrentState> = (state: CurrentState = initState, action: ReducerStateAction<string>) => {\n  const actionReducer = actionReducerMap[action.type];\n  if (actionReducer) {\n    return actionReducer(state, action);\n  } else {\n    return state;\n  }\n};\n\nconst actionReducerMap: ReducerStateActionMapType<string> = {\n  [clientAction.SET_DATA_LOADING(clientActionName.clientLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = \"\";\n      proxy.error = null;\n      proxy.loading = action.loadingState || true;\n      proxy.loaded = false;\n    }),\n  [clientAction.SET_DATA_SUCCESS(clientActionName.clientLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = action.data || \"\";\n      proxy.error = null;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n  [clientAction.SET_DATA_FAIL(clientActionName.clientLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = \"\";\n      proxy.error = action.error;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n};\n\nexport { clientLangReducer };\n","import { produce } from \"immer\";\n\nimport { clientActionName } from \"@shared/store/action\";\n\nimport { clientAction } from \"../share/action\";\n\nimport type { ReducerState, ReducerStateAction, ReducerStateActionMapType } from \"@shared/store/type\";\nimport type { Reducer } from \"redux\";\n\ntype State = Record<string, Record<string, unknown>>;\n\ntype CurrentState = ReducerState<State>;\n\nconst initState: CurrentState = { data: {}, error: null, loaded: false, loading: false };\n\nconst clientPropsReducer: Reducer<CurrentState> = (state: CurrentState = initState, action: ReducerStateAction<State>) => {\n  const actionReducer = actionReducerMap[action.type];\n  if (actionReducer) {\n    return actionReducer(state, action);\n  } else {\n    return state;\n  }\n};\n\nconst actionReducerMap: ReducerStateActionMapType<State> = {\n  [clientAction.SET_DATA_LOADING(clientActionName.clientProps)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.error = null;\n      proxy.loading = action.loadingState || true;\n      proxy.loaded = false;\n    }),\n  [clientAction.SET_DATA_SUCCESS(clientActionName.clientProps)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = action.data;\n      proxy.error = null;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n  [clientAction.SET_DATA_FAIL(clientActionName.clientProps)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = {};\n      proxy.error = action.error;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n};\n\nexport { clientPropsReducer };\n","import { combineReducers } from \"redux\";\n\nimport { clientActionName } from \"@shared/store/action\";\n\nimport { clientLangReducer, clientPropsReducer } from \"./action\";\n\nexport const client = combineReducers({\n  [clientActionName.clientLang]: clientLangReducer,\n  [clientActionName.clientProps]: clientPropsReducer,\n});\n\nexport * from \"./share/action\";\n","import type { CreateServerActionProps, CreateServerActionType, CreateServerActionWithDispatchType, ServerActionType } from \"../type\";\n\nconst serverAction: ServerActionType = {\n  GET_DATA_ACTION: (name) => `@server_action_${name}_startWithSaga`,\n  GET_DATA_LOADING: (name) => `@server_action_${name}_loading`,\n  GET_DATA_SUCCESS: (name) => `@server_action_${name}_success`,\n  GET_DATA_FAIL: (name) => `@server_action_${name}_fail`,\n};\n\n// support a usage like await dispatch(getDataAction_Server({name})) compose redux-saga & redux-thunk\nconst getDataAction_Server: CreateServerActionWithDispatchType =\n  ({ name, ...resProps }) =>\n  (dispatch) => {\n    let done: null | (() => void) = null;\n    const temp = new Promise<void>((r) => {\n      done = r;\n    });\n    dispatch({ type: serverAction.GET_DATA_ACTION(name), done, ...resProps });\n    return temp;\n  };\n\nconst getDataLoading_server: CreateServerActionType = ({ name }) => ({ type: serverAction.GET_DATA_LOADING(name), loadingState: true });\n\nconst getDataSuccess_Server: CreateServerActionType = <T>({ name, data }: CreateServerActionProps<T, unknown>) => ({\n  type: serverAction.GET_DATA_SUCCESS(name),\n  data,\n  loadingState: false,\n});\n\nconst getDataFail_Server: CreateServerActionType = <T>({ name, error }: CreateServerActionProps<T, unknown>) => ({\n  type: serverAction.GET_DATA_FAIL(name),\n  error,\n  loadingState: false,\n});\n\nexport { serverAction, getDataLoading_server, getDataAction_Server, getDataSuccess_Server, getDataFail_Server };\n","import { produce } from \"immer\";\n\nimport { serverActionName } from \"@shared/store/action\";\n\nimport { serverAction } from \"../share/action\";\n\nimport type { ReducerState, ReducerStateAction, ReducerStateActionMapType } from \"@shared/store/type\";\nimport type { Reducer } from \"redux\";\n\ntype LangObject = { [props: string]: Record<string, string> };\n\ntype CurrentState = ReducerState<LangObject>;\n\nconst initState: CurrentState = { data: {}, error: null, loaded: false, loading: false };\n\nconst serverLangReducer: Reducer<CurrentState> = (state: CurrentState = initState, action: ReducerStateAction<LangObject>) => {\n  const actionReducer = actionReducerMap[action.type];\n  if (actionReducer) {\n    return actionReducer(state, action);\n  } else {\n    return state;\n  }\n};\n\nconst actionReducerMap: ReducerStateActionMapType<LangObject> = {\n  [serverAction.GET_DATA_LOADING(serverActionName.serverLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.error = null;\n      proxy.loading = action.loadingState || true;\n      proxy.loaded = false;\n    }),\n  [serverAction.GET_DATA_SUCCESS(serverActionName.serverLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.data = { ...proxy.data, ...action.data };\n      proxy.error = null;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n  [serverAction.GET_DATA_FAIL(serverActionName.serverLang)]: (state, action) =>\n    produce(state, (proxy) => {\n      proxy.error = action.error;\n      proxy.loading = false;\n      proxy.loaded = true;\n    }),\n};\n\nexport { serverLangReducer };\n","import { combineReducers } from \"redux\";\n\nimport { serverActionName } from \"@shared/store/action\";\n\nimport { serverLangReducer } from \"./action\";\n\nexport const server = combineReducers({\n  [serverActionName.serverLang]: serverLangReducer,\n});\n\nexport * from \"./share/action\";\n","import { combineReducers } from \"redux\";\n\nimport { client } from \"./client\";\nimport { server } from \"./server\";\n\nexport const rootReducer = combineReducers({\n  client,\n  server,\n});\n\nexport * from \"./client\";\n\nexport * from \"./server\";\n","var map = {\n\t\"./\": [\n\t\t51363,\n\t\t50,\n\t\t736,\n\t\t904,\n\t\t89,\n\t\t392\n\t],\n\t\"./404\": [\n\t\t25261,\n\t\t50,\n\t\t725\n\t],\n\t\"./404.tsx\": [\n\t\t25261,\n\t\t50,\n\t\t725\n\t],\n\t\"./Blog\": [\n\t\t45319,\n\t\t50,\n\t\t736,\n\t\t904,\n\t\t89,\n\t\t614,\n\t\t270,\n\t\t792\n\t],\n\t\"./Blog.tsx\": [\n\t\t45319,\n\t\t50,\n\t\t736,\n\t\t904,\n\t\t89,\n\t\t614,\n\t\t270,\n\t\t792\n\t],\n\t\"./index\": [\n\t\t51363,\n\t\t50,\n\t\t736,\n\t\t904,\n\t\t89,\n\t\t392\n\t],\n\t\"./index.tsx\": [\n\t\t51363,\n\t\t50,\n\t\t736,\n\t\t904,\n\t\t89,\n\t\t392\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 14296;\nmodule.exports = webpackAsyncContext;","__webpack_require__.O(0, [179], () => {\n\t[50,736,904,89,392,725,614,270,792].map(__webpack_require__.E);\n}, 5);"],"names":["module","exports","myreactReconciler","hasRequiredIndex_production","react","require$$0","myreactShared","index_production","SuppressedError","HOOK_TYPE","UpdateQueueType","STATE_TYPE","PATCH_TYPE","Effect_TYPE","Element","Symbol","for","Memo","ForwardRef","Portal","Fragment","Context","Provider","Consumer","Lazy","Suspense","Strict","KeepLive","Scope","Comment","Offscreen","Profiler","UniqueArray","this","set","Set","arr","Array","length","prototype","uniPop","v","pop","delete","uniPush","has","add","push","uniShift","shift","uniUnshift","unshift","uniDelete","filter","i","clear","getAll","ListTreeNode","value","prev","next","ListTree","head","foot","node","listNode","pickHead","pickFoot","listToFoot","action","listToHead","toArray","re","hasNode","size","Object","is","hasValue","some","iterator","every","concat","list","_this","clone","newList","TYPEKEY","compareVersion","version1","version2","compare","arr1","arr2","v1","v2","slice","split","map","Number","exclude","src","rest","include","isArray","target","isArrayEquals","key","isCollection","Map","WeakMap","WeakSet","isFunction","isInteger","isNormalEquals","isSkipKey","hasSkipKeyFunction","_typeof","srcKeys","keys","targetKeys","res","isNumber","isObject","isString","isSymbol","merge","once","called","args","_i","arguments","call","apply","to","from","pack","ar","l","__spreadArray","remove","myreactSharedExports","MyWeakMap","currentRenderDispatch","createRef","currentRefreshHandler","currentTriggerFiber","fiberToDispatchMap","defaultGenerateEffectMap","fiber","effect","get","renderDispatch","patch","__effect__","effectMap","runtimeMap","allEffect","safeCallWithFiber","layoutEffect","__layoutEffect__","layoutEffectMap","allLayoutEffect","insertionEffect","__insertionEffect__","insertionEffectMap","allInsertionEffect","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","assign","t","s","n","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","op","TypeError","__my_react_shared__","enableDebugFiled","isErrorBoundariesInstance","instance","Component","componentDidCatch","getDerivedStateFromError","isErrorBoundariesComponent","type","NODE_TYPE","__class__","typedComponent","elementType","typedInstance","defaultGenerateErrorBoundariesMap","parent","parentErrorBoundaries","defaultResolveErrorBoundaries","enableLegacyLifeCycle","processComponentStateFromProps","isErrorCatch","pendingProps","currentStateObj","pendingState","state","getDerivedStateFromProps","payloadState","_a","newState","processComponentFiberOnUpdate","_setOwner","processComponentRenderOnMountAndUpdate","render","processComponentDidMountOnMount","current","componentDidMount","mode","pendingLayoutEffect","__initial__","processComponentContextOnUpdate","contextType","_contextFiber","__unmount__","ProviderFiber","resolveContextFiber","context","resolveContextValue","_setContext","classComponentMount","props","callback","isForce","error","revertState","stack","memoizedState","stableState","processComponentInstanceOnMount","beforeSyncFlush","hasLegacyLifeFunction","UNSAFE_componentWillMount","componentWillMount","processComponentWillMountOnMount","syncFlushComponentQueue","afterSyncFlush","children","classComponentUpdateFromNormal","__inherit__","UNSAFE_componentWillReceiveProps","nextProps_1","componentWillReceiveProps","nextProps_2","processComponentWillReceiveProps","baseState","baseProps","nextState","nextProps","nextContext","shouldUpdate","shouldComponentUpdate","processComponentShouldUpdateOnUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","processComponentWillUpdate","snapshot","getSnapshotBeforeUpdate","processComponentGetSnapshotOnUpdate","componentDidUpdate","forEach","c","processComponentDidUpdateOnUpdate","updated","syncComponentStateToFiber","typedPendingState","typedMemoizedState","typedInstance_1","typedInstance_2","typedInstance_3","classComponentUpdate","processComponentStateFromError","componentStack","processComponentDidCatchOnMountAndUpdate","runtimeFiber","errorCatchFiber","classComponentUpdateFromError","processClassComponentUpdateQueue","enableTaskPriority","allQueue","updateQueue","needUpdate","isSync","sync","nextStateObj","_loop_1","updater","nextNode","component","lastResult_1","fallback","payLoad","_update","__triggerConcurrent__","_loop_2","lastResult_2","processFunctionComponentUpdateQueue","_loop_3","hook","trigger","payLoad_1","typedTrigger_1","lastResult_3","reducer","_loop_4","payLoad_2","typedTrigger_2","lastResult_4","syncFiberStateToComponent","callback_1","cb","getExistingChildren","parentFiber","existingChildrenMap","existingChildrenArray","child","index","existingChild","sibling","dynamicFragmentProps","wrap","deleteIfNeed","existingChildren","pendingUnmount","getNewFiberWithUpdate","newChild","prevFiberChild","draftList_1","draftFiber_1","__fragment__","newElement","createElement","updateFiberNode","prevFiber","createFiberNode","createFragmentWithUpdate","keyToGet","isValidElement","draftList","draftFiber","isSameType","checkIsSameType","getIsSameTypeNode","getNewFiberWithInitial","createFragmentWithInitial","transformChildrenFiber","__create__","newChildren","lastFiber","newFiber","currentHookTreeNode$2","__my_react_internal__","currentHookTreeNode","currentHookNodeIndex$2","currentHookNodeIndex","currentComponentFiber$2","currentComponentFiber","enablePerformanceLog","nextWorkCommon","nextWorkNormal","__comment__","__text__","nextWorkClassComponent","nextWorkFunctionComponent","hookList","typedElementType","__forwardRef__","typedElementTypeWithRef_1","ref","nextWorkComponent","__function__","nextWorkLazy","resolveLazyElement","nextWorkConsumer","Internal","typedChildren","runtimeNextWork","__lazy__","__consumer__","currentRunningFiber","performToNextFiberWithAll","isAppCrashed","__triggerSync__","__stable__","nextFiber","scheduledFiber","generateCommitList","performToNextFiberWithTrigger","updateLoopSyncWithAll","nextWorkingFiber","updateLoopSyncWithTrigger","updateLoopConcurrentWithAll","shouldYield","updateLoopConcurrentWithTrigger","globalLoop$2","globalLoop","currentRenderPlatform$9","currentRenderPlatform","enableScopeTreeLog","updateSyncWithAll","renderPlatform","commitList","pendingCommitFiberList","reconcileUpdate","microTask","updateSyncWithTrigger","updateConcurrentWithAll","yieldTask","updateConcurrentWithTrigger","defaultGenerateUnmountMap","unmount","generateFiberToList","unmountList","_unmount","unmountFiberNode","unmountFiber","unmountMap","allUnmount_1","globalLoop$1","currentRenderPlatform$8","enableConcurrentMode$1","enableConcurrentMode","enableLoopFromRoot$2","enableLoopFromRoot","scheduleNext","isAppUnmounted","pendingUpdateFiberArray","dispatchSet","hasPending","find","isAppMounted","scheduleUpdate","nextWorkFiber","nextWorkSyncFiber","allLive","hasSync","__skippedSync__","rootFiber","allPending","item","__skippedConcurrent__","Error","triggerUpdate","undefined","pendingEffect","macroTask","triggerError","errorBoundariesFiber","resolveErrorBoundaries","getFiberTree","currentRenderPlatform$7","emptyProps$1","MyReactFiberNode","element","memoizedProps","_installElement","getTypeFromElementNode","nodeType","_addDependence","dependence","_removeDependence","h","_prepare","flag","_b","_c","newFiberNode","pendingCreate","pendingUpdate","pendingPosition","pendingAppend","pendingRef","patchToFiberInitial","__update__","enableLoopFromRoot$1","nextElement","prevElementType","prevProps","prevRef","nextElementType","nextRef","__memo__","__provider__","prepareUpdateAllDependence","pendingContext","__plain__","patchToFiberUpdate","commitUnsetRef","commitClearNode","patchToFiberUnmount","suspenseMap","strictMap","scopeMap","errorBoundariesMap","contextMap","eventMap","Boolean","nativeNode","typeToFibersMap","setRefreshTypeMap","exist","getCurrentFibersFromType","enableSyncFlush$1","enableSyncFlush","syncFlush","beforeSyncUpdate","afterSyncUpdate","currentRenderPlatform$6","currentRunningFiber$1","enableOptimizeTreeLog","warnMap","errorMap","originalWarn","console","warn","originalError","devWarn","renderFiber","logObj","logString","join","devError","debugWithNode","mayFiberContainer","containerNode","__fiber__","__props__","shouldIncludeLog","getElementName","targetRender","name_2","displayName","name","typedRender","name_3","__portal__","__null__","__empty__","__scope__","__strict__","__profiler__","__suspense__","__keepLive__","name_4","name_5","toString","getFiberNodeName","getFiberNodeNameWithFiber","preString","padEnd","temp","getHookTree","treeHookNode","errorType","pre","repeat","lastRender","nextRender","onceWarnWithKeyAndFiber","tree","currentRenderPlatform$5","last","dispatchError","enableHMRForDev","emptyProps","getTypeFromElement","String","isMyReactComponent","existElementType","incomingElementType","typedExistElement","typedIncomingElement","getNext","root","listTree","currentRenderPlatform$4","emptyObj","defaultGenerateContextMap","parentMap","contextId","defaultGetContextValue","ContextObject","defaultGetContextFiber_New","parent_1","__context__","set_1","_ownerFiber","currentRenderPlatform$3","defaultDispatchMount","_fiber","_dispatch","_hydrate","mountInsertionEffect","mountCommit","_result","commitCreate","commitUpdate","commitAppend","_final","commitSetRef","mountLayoutEffect","mountEffect","mountLoop","defaultGenerateScopeMap","parentScopeFiber","defaultGenerateSuspenseMap","defaultResolveSuspense","currentRenderPlatform$2","defaultDispatchUpdate","_list","commitPosition","MyReactInternalInstance","currentRenderPlatform$1","MyReactHookNode","_super","deps","dispatchState","__","constructor","create","__extends","defineProperty","enumerable","configurable","cancel","currentComponentFiber$1","MyReactSignal","_rawValue","_renderDispatch","_depsSet","getValue","_value","setValue","newValue","allDeps","enableDebugLog$1","enableDebugLog","currentHookTreeNode$1","currentHookNodeIndex$1","defaultReducer","createHookNode","currentHook","currentHookIndex","hookNode","useMemo","useState","useReducer","useEffect","useLayoutEffect","useInsertionEffect","useImperativeHandle","useRef","useCallback","useDeferredValue","useId","uniqueIdCount","useDebugValue","useContext","useSyncExternalStore","storeApi_1","getServerSnapshot","getSnapshot","useSignal","useTransition","startTransition","loadingCallback","effectHookNode","pendingInsertionEffect","storeApi","subscribe","updateHookNode","isHMR","newStoreApi","processLazy","loaded","e_1","_loaded","loader","default","_loading","CustomRenderDispatch","rootNode","pendingAsyncLoadFiberList","performanceLogTimeLimit","runtimeRef","typeForCreate","typeForUpdate","typeForAppend","__append__","__position__","typeForRef","__ref__","_pendingUnmount","_effect","_layoutEffect","_insertionEffect","resolveStrictMap","resolveStrict","resolveScopeMap","resolveScope","resolveSuspenseMap","resolveSuspense","resolveErrorBoundariesMap","resolveContextMap","_contextObject","reconcileCommit","pendingFiber","CustomRenderPlatform","_task","_treeHookNode","_errorType","dispatchHook","_params","isCommentElement","WrapperByScope","classComponentActive","processComponentPropsAndContextOnActive","defaultGenerateStrict","defaultGenerateStrictMap","parentIsStrict","defaultGetContextFiber","deleteEffect","devErrorWithFiber","devWarnWithFiber","getCurrentDispatchFromFiber","getCurrentDispatchFromType","fibers","getCurrentTypeFromRefresh","getFiberTreeWithFiber","str","hmr","nextType","forceRefresh","initHMR","env","initialFiberNode","isCommentEndElement","isCommentStartElement","mount","hydrate","mountAsync","loopCount","beforeLength","afterLength","onceErrorWithKey","onceErrorWithKeyAndFiber","onceWarnWithKey","processHookNode","resolveHookValue","processState","ownerFiber","resetLogScope","runtimeNextWorkDev","start","Date","now","end","typedFiber","timeNow","_debugRenderState","mountTime","_debugIsMount","prevRenderState","prevRenderTime","updateTime","renderCount","updateTimeInterval","typeForNativeNode","safeCall","safeCallWithSync","setLogScope","setRefreshHandler","handler","triggerRevert","triggerUnmount","version","require","RESERVED_PROPS","__self","__source","jsx","config","maybeKey","source","self","propsName","typedType_1","defaultProps","jsxs","apolloClient","ActorType","AuditLogOrderField","CheckAnnotationLevel","CheckConclusionState","CheckRunType","CheckStatusState","CollaboratorAffiliation","CommentAuthorAssociation","CommentCannotUpdateReason","CommitContributionOrderField","ContributionLevel","DefaultRepositoryPermissionField","DependencyGraphEcosystem","DeploymentOrderField","DeploymentProtectionRuleType","DeploymentReviewState","DeploymentState","DeploymentStatusState","DiffSide","DiscussionOrderField","DismissReason","EnterpriseAdministratorInvitationOrderField","EnterpriseAdministratorRole","EnterpriseDefaultRepositoryPermissionSettingValue","EnterpriseEnabledDisabledSettingValue","EnterpriseEnabledSettingValue","EnterpriseMemberOrderField","EnterpriseMembersCanCreateRepositoriesSettingValue","EnterpriseMembersCanMakePurchasesSettingValue","EnterpriseServerInstallationOrderField","EnterpriseServerUserAccountEmailOrderField","EnterpriseServerUserAccountOrderField","EnterpriseServerUserAccountsUploadOrderField","EnterpriseServerUserAccountsUploadSyncState","EnterpriseUserAccountMembershipRole","EnterpriseUserDeployment","FileViewedState","FundingPlatform","GistOrderField","GistPrivacy","GitSignatureState","IdentityProviderConfigurationState","IpAllowListEnabledSettingValue","IpAllowListEntryOrderField","IpAllowListForInstalledAppsEnabledSettingValue","IssueCommentOrderField","IssueOrderField","IssueState","IssueTimelineItemsItemType","LabelOrderField","LanguageOrderField","LockReason","MergeStateStatus","MergeableState","MigrationSourceType","MigrationState","MilestoneOrderField","MilestoneState","NotificationRestrictionSettingValue","OidcProviderType","OauthApplicationCreateAuditEntryState","OperationType","OrderDirection","OrgAddMemberAuditEntryPermission","OrgCreateAuditEntryBillingPlan","OrgEnterpriseOwnerOrderField","OrgRemoveBillingManagerAuditEntryReason","OrgRemoveMemberAuditEntryMembershipType","OrgRemoveMemberAuditEntryReason","OrgRemoveOutsideCollaboratorAuditEntryMembershipType","OrgRemoveOutsideCollaboratorAuditEntryReason","OrgUpdateDefaultRepositoryPermissionAuditEntryPermission","OrgUpdateMemberAuditEntryPermission","OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility","OrganizationInvitationRole","OrganizationInvitationType","OrganizationMemberRole","OrganizationMembersCanCreateRepositoriesSettingValue","OrganizationOrderField","PackageFileOrderField","PackageOrderField","PackageType","PackageVersionOrderField","PatchStatus","PinnableItemType","PinnedDiscussionGradient","PinnedDiscussionPattern","ProjectCardArchivedState","ProjectCardState","ProjectColumnPurpose","ProjectItemType","ProjectNextFieldType","ProjectNextOrderField","ProjectOrderField","ProjectState","ProjectTemplate","ProjectViewLayout","PullRequestMergeMethod","PullRequestOrderField","PullRequestReviewCommentState","PullRequestReviewDecision","PullRequestReviewEvent","PullRequestReviewState","PullRequestState","PullRequestTimelineItemsItemType","PullRequestUpdateState","ReactionContent","ReactionOrderField","RefOrderField","ReleaseOrderField","RepoAccessAuditEntryVisibility","RepoAddMemberAuditEntryVisibility","RepoArchivedAuditEntryVisibility","RepoChangeMergeSettingAuditEntryMergeType","RepoCreateAuditEntryVisibility","RepoDestroyAuditEntryVisibility","RepoRemoveMemberAuditEntryVisibility","ReportedContentClassifiers","RepositoryAffiliation","RepositoryContributionType","RepositoryInteractionLimit","RepositoryInteractionLimitExpiry","RepositoryInteractionLimitOrigin","RepositoryInvitationOrderField","RepositoryLockReason","RepositoryMigrationOrderDirection","RepositoryMigrationOrderField","RepositoryOrderField","RepositoryPermission","RepositoryPrivacy","RepositoryVisibility","RepositoryVulnerabilityAlertState","RequestableCheckStatusState","RoleInOrganization","SamlDigestAlgorithm","SamlSignatureAlgorithm","SavedReplyOrderField","SearchType","SecurityAdvisoryEcosystem","SecurityAdvisoryIdentifierType","SecurityAdvisoryOrderField","SecurityAdvisorySeverity","SecurityVulnerabilityOrderField","SponsorOrderField","SponsorableOrderField","SponsorsActivityAction","SponsorsActivityOrderField","SponsorsActivityPeriod","SponsorsGoalKind","SponsorsTierOrderField","SponsorshipNewsletterOrderField","SponsorshipOrderField","SponsorshipPrivacy","StarOrderField","StatusState","SubscriptionState","TeamDiscussionCommentOrderField","TeamDiscussionOrderField","TeamMemberOrderField","TeamMemberRole","TeamMembershipType","TeamOrderField","TeamPrivacy","TeamRepositoryOrderField","TeamReviewAssignmentAlgorithm","TeamRole","TopicSuggestionDeclineReason","TrackedIssueStates","UserBlockDuration","UserStatusOrderField","VerifiableDomainOrderField","autoMergeCache","InMemoryCache","typePolicies","Repository","fields","issues","keyArgs","existing","incoming","nodes","pageInfo","startCursor","Issue","comments","plainCache","isBrowser","window","tokenString","fromCharCode","httpLink","HttpLink","uri","fetch","generateFetchWithTimeout","onErrorLink","onError","networkError","graphQLErrors","message","authLink","setContext","headers","Authorization","atob","Buffer","__SERVER__","createApolloClient","initialState","enableInfinityLoad","_apolloClient","restProps","__rest","ApolloClient","ssrMode","link","cache","_createApolloClient","restore","existCacheData","extract","getApolloClient","useApollo","GetViewerDocument","kind","definitions","operation","variableDefinitions","variable","defaultValue","selectionSet","selections","GetBlogListDocument","GetSingleBlogDocument","GetStarCountDocument","CONTAINER_WIDTH","BLOG_SOURCE","BLOG_REPOSITORY","BLOG_REPOSITORY_OWNER","allRoutes","div","_Bar","forwardRef","useEffectOnce","document","id","content","querySelector","insertBefore","useIsMounted","createPortal","_jsx","className","style","height","transform","Bar","memo","LoadingBar","loading","useLoading","useLoadingBar","dd","LoadedLocationContext","createContext","WrapperRoute","_ref","routes","usePreLoad","preLoad","_jsxs","RenderMatch","all","useRoutes","location","_Fragment","getIsAnimateRouter","AnimatePresence","exitBeforeEnter","motion","initial","animate","exit","variants","opacity","in","out","transition","damping","stiffness","pathname","WrapperApollo","useAppSelector","client","clientProps","data","useLocation","preLoadState","preLoadPropsKey","apolloState","ApolloProvider","WrapperErrorCatch","_Component","_inherits","_classCallCheck","_len","_key","hasError","_createClass","info","setState","color","whiteSpace","WrapperLang","htmlRef","server","serverLang","lang","clientLang","IntlProvider","locale","messages","defaultLocale","defaultLang","App","emotionCache","createEmotionCache","Root","store","cookieStorageManagerSSR","cookie","StrictMode","CacheProvider","ChakraProvider","theme","serverState","getState","Router","HelmetProvider","place","preLoadEnvElement","preLoadStateElement","createUniversalStore","preloadedState","JSON","parse","innerHTML","__ENV__","__PRELOAD_STORE_STATE__","safeData","loadableReady","isPURE_CSR","loadCurrentLang","dispatch","LANG","createRoot","isSSR","isDEVELOPMENT","isMIDDLEWARE","hydrateRoot","createState","withActions","generateActions","setLoading","useDebouncedState","time","_useState","_useState2","_slicedToArray","debounce","INITIAL_RECT","width","left","right","top","bottom","x","useDomSize","cssSelector","_useDebouncedState","_useDebouncedState2","rect","setRect","domElement","ResizeObserver","resizeObserver","getBoundingClientRect","observe","disconnect","handleResize","addEventListener","passive","removeEventListener","isRedirect","useStore","navigate","useNavigate","_useSearchParams","useSearchParams","query","firstLoad","getIsP_CSR","loadedPath","loadingPath","timer1","timer2","storeRef","loadedLocation","setLoadedLocation","isRedirectCurrentPath","clearTimeout","setTimeout","currentLoadKey","_redirect$location$qu","_ref2","redirect","pathName","setDataSuccess_client","clientActionName","currentLoad","cleanupRootStyles","rootId","getElementById","removeProperty","cleanupOverlaysStyles","ids","ROOT_BODY","count","OverlayOpenContext","OverlayCloseContext","OverlayArrayContext","desktop","mobile","useOverlaysProps","_useReducer","overlays","setOverlays","overlaysRef","forceUpdate","applyOverlayStyle","isOpen","delay","stillShow","showState","allIds","needReApplyIds","needClearId","_toConsumableArray","reverse","innerHeight","overflow","willChange","applyRootStyles","open","overlayProps","allOverlay","lastOpen","findLast","isFirst","closeHandler","closeComplete","newAllOverlays","reduce","applyOverlay","close","modalId","closeAll","currentOverlay","currentTopOverlay","useOverlaysOpen","useOverlaysClose","useOverlayArray","useIsMobile","useBreakpointValue","base","lg","mounted","setMounted","_props$height","_props$present","present","ele","requestAnimationFrame","cssText","cancelAnimationFrame","fn","useWindowSize","resize","innerWidth","useGlobalLockStore","createStore","lock","unlock","useLockBodyCount","useGetInitialProps","pagePath","useListLayoutStore","updateLayout","newLayout","mergeLayout","oldData","obj","oldValue","lastItem","_generateFunction","dataLength","Math","floor","w","maxW","minH","xsGenerate","smGenerate","mdGenerate","lgGenerate","useGetResponseListLayout","items","xs","sm","md","_ref3","_ref4","xxs","AutoInjectProps","path","MemoComponent","_objectSpread","_Footer","isMounted","Box","textAlign","Flex","marginTop","justifyContent","alignItems","Text","fontSize","fontWeight","noOfLines","display","Link","href","textDecoration","paddingLeft","Icon","as","AiFillHeart","mx","marginBottom","getFullYear","Footer","ColorMode","_useColorMode","useColorMode","colorMode","toggleColorMode","Button","onClick","variant","MdOutlineDarkMode","MdOutlineLightMode","GlobalStyle","useColorModeValue","css","_templateObject","_taggedTemplateLiteral","_templateObject2","Global","styles","_Header","_data$repository","formatMessage","useIntl","isMobile","scrollY","useScroll","useTransform","toLowerCase","_useQuery","useQuery","variables","owner","Container","maxWidth","paddingX","paddingY","HStack","gap","noBase","__BASENAME__","SiGithub","Tag","colorScheme","marginLeft","TagLeftIcon","FaStar","TagLabel","repository","stargazerCount","borderBottom","Header","LockBody","RemoveScroll","enabled","Mobile","isOpenRef","modalRef","allowDragElement","allowDrag","windowHeight","indicatorRotation","useMotionValue","indicator1Transform","r","indicator2Transform","handleDragStart","contains","handleDrag","delta","velocity","getVelocity","max","handleDragEnd","_modal$getBoundingCli","modal","contentHeight","mass","animationComplete","useCallbackRef","position","zIndex","drag","dragElastic","onDrag","dragMomentum","onDragEnd","onDragStart","dragConstraints","flexDirection","borderRadius","border","onAnimationComplete","backgroundColor","span","Divider","flex","allowPinchZoom","removeScrollBar","padding","Desktop","Modal","scrollBehavior","onClose","onCloseComplete","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","paddingTop","ModalFooter","DesktopOverlay","MobileOverlay","ModuleManager","_useOverlaysProps","overlaysObj","Layout","initialStateWrapper","title","relativePathname","_dec","_class","_assertThisInitialized","_title$slice","Helmet","Outlet","baseRouter","dynamicRoutes","componentPath","startsWith","it","lazy","__router__","timeoutMap","rejectMap","keyMap","keyLength","_step","_iterator","_createForOfIteratorHelper","sort","key1","key2","keyItem","err","catch","branch","matchRoutes","promises","route","match","params","_preLoad","val","page","code","resolvePreLoadStateFunction","_asyncToGenerator","_regeneratorRuntime","_callee2","preLoadStateArray","_typedComponent","WrapperComponent","loadAbleComponent","preLoadComponent","_preLoadComponent","_context2","getInitialState","load","abrupt","_ref5","_callee","propsKey","_context","_defineProperty","stop","_x2","_x","_ref7","_callee3","_ref6","_context3","_x3","getIsMiddleware","memoize","getIsSSR","getIsStream","isSTREAM","isANIMATE_ROUTER","getIsStaticGenerate","isSTATIC","getPublicApi","PUBLIC_API_HOST","supportedLang","en","zh","getDataAction_Server","serverActionName","langSaga","request","_yield$call","select","put","getDataLoading_server","createRequest","baseURL","apiName","getDataSuccess_Server","t0","getDataFail_Server","finish","rootSaga","takeLatest","serverAction","GET_DATA_ACTION","_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionsDenylist","compose","_props$middleware","middleware","sagaMiddleware","createSagaMiddleware","allMiddleware","thunkMiddleware","rootReducer","applyMiddleware","sagaTask","saga","run","SagaManager","useAppDispatch","useDispatch","useSelector","extendTheme","global","fontFamily","semanticTokens","colors","mobileCardBackgroundColor","_dark","cardBackgroundColor","mobileModalColor","cardBorderColor","lightTextColor","siteBackgroundColor","bannerBackgroundColor","Body","_ref$script","script","_ref$refresh","refresh","ColorModeScript","dangerouslySetInnerHTML","__html","Head","_ref$env","_ref$link","_ref$preLoad","_ref$preloadedState","_ref$helmetContext","helmetContext","helmet","emotionChunks","charSet","__BUILD_TIME__","rel","toComponent","meta","noscript","HTML","cacheData","createCache","clientAction","loadingState","initState","actionReducerMap","_actionReducerMap","produce","proxy","combineReducers","_combineReducers","actionReducer","GET_DATA_LOADING","GET_DATA_SUCCESS","GET_DATA_FAIL","resProps","_objectWithoutProperties","_excluded","webpackAsyncContext","req","__webpack_require__","o","O","E"],"sourceRoot":""}