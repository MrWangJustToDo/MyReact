{"version":3,"file":"page-Excalidraw-d137dc8e32740e8bd2ba.js","mappings":"gTASAA,EAA4BC,EAAAA,GAAQC,aAA5BC,EAAMH,EAANG,OAAQC,EAAOJ,EAAPI,QAEhBC,EAA+CC,EAAAA,EAAQJ,aAAvCK,EAAOF,EAAfF,OAA0BK,EAAQH,EAAjBD,QAEV,SAASK,EAAUC,GAA0C,IAAvCC,EAAUD,EAAVC,WAC7BC,GAAYC,EAAAA,EAAAA,MAElBC,GAA4BC,EAAAA,EAAAA,WAAmC,kBAAM,IAAI,IAACC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAnEI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAElBI,GAAcC,EAAAA,EAAAA,KAAkB,GAAO,IAE7CC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAK,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAnB,EAAA,OAAAiB,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACiB,oCAAgC,OAAAH,EAAAC,EAAAG,KAArDvB,EAAUmB,EAAVnB,WAERU,GAAU,kBAAMV,CAAU,IAE1BL,IAEAI,IAAW,wBAAAqB,EAAAI,OAAA,GAAAN,EAAA,KACZ,kBARU,OAAAH,EAAAU,MAAA,KAAAC,UAAA,KAULC,EAAKC,YAAW,WACpBd,GACF,GAAG,KAEH,OAAO,WACLpB,IAEAI,IAEA+B,aAAaF,EACf,CACF,GAAG,IAEH,IAAMG,EAAW3B,EAAYQ,EAAcT,EAE3C,OACE6B,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACC,OAAO,QAAQC,MAAM,QAAOC,SAC7B1B,GAKAsB,EAAAA,EAAAA,KAACtB,EAAM,CAAC2B,MAAON,EAAW,OAAS,WAJnCC,EAAAA,EAAAA,KAACC,EAAAA,EAAG,CAACE,MAAM,OAAOD,OAAO,OAAOI,QAAQ,OAAOC,WAAW,SAASC,eAAe,SAAQJ,SAAC,iBAQnG,CAEO,IAAMK,EAAoC,eAAAC,GAAAzB,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAyB,IAAA,IAAAC,EAAA,OAAA1B,IAAAA,MAAA,SAAA2B,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OAKhD,OAHMqB,EAAYE,aAAaC,QAAQ,wBAGvCF,EAAAG,OAAA,SAEO,CAAEC,MAAO,CAAE9C,WAA0B,SAAdyC,KAAuC,wBAAAC,EAAApB,OAAA,GAAAkB,EAAA,KAExE,kBATgD,OAAAD,EAAAhB,MAAA,KAAAC,UAAA,KAWpCuB,GAAW,C","sources":["webpack://@my-react/ssr-example/./src/client/pages/Excalidraw.tsx"],"sourcesContent":["import { Box, useColorModeValue } from \"@chakra-ui/react\";\nimport { useEffect, useState } from \"react\";\n\nimport { useFoot, useIsMounted } from \"@client/hooks\";\nimport { useHead } from \"@client/hooks/useHead\";\n\nimport type { GetInitialStateType } from \"@client/types/common\";\nimport type { Excalidraw as ExcalidrawPreview } from \"@excalidraw/excalidraw\";\n\nconst { enable, disable } = useFoot.getActions();\n\nconst { enable: _enable, disable: _disable } = useHead.getActions();\n\nexport default function Excalidraw({ isDarkMode }: { isDarkMode: boolean }) {\n  const isMounted = useIsMounted();\n\n  const [Render, setRender] = useState<typeof ExcalidrawPreview>(() => null);\n\n  const _isDarkMode = useColorModeValue(false, true);\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { Excalidraw } = await import(\"@excalidraw/excalidraw\");\n\n      setRender(() => Excalidraw);\n\n      disable();\n\n      _disable();\n    };\n\n    const id = setTimeout(() => {\n      fetch();\n    }, 2000);\n\n    return () => {\n      enable();\n\n      _enable();\n\n      clearTimeout(id);\n    };\n  }, []);\n\n  const darkMode = isMounted ? _isDarkMode : isDarkMode;\n\n  return (\n    <Box height=\"100vh\" width=\"100vw\">\n      {!Render ? (\n        <Box width=\"100%\" height=\"100%\" display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          Loading ...\n        </Box>\n      ) : (\n        <Render theme={darkMode ? \"dark\" : \"light\"} />\n      )}\n    </Box>\n  );\n}\n\nexport const getInitialState: GetInitialStateType = async () => {\n  if (__CLIENT__) {\n    const colorMode = localStorage.getItem(\"chakra-ui-color-mode\");\n\n    //preload excalidraw\n    // await import(\"@excalidraw/excalidraw\");\n\n    return { props: { isDarkMode: colorMode === \"dark\" ? true : false } };\n  }\n};\n\nexport const isStatic = true;\n"],"names":["_useFoot$getActions","useFoot","getActions","enable","disable","_useHead$getActions","useHead","_enable","_disable","Excalidraw","_ref","isDarkMode","isMounted","useIsMounted","_useState","useState","_useState2","_slicedToArray","Render","setRender","_isDarkMode","useColorModeValue","useEffect","fetch","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$import","_context","prev","next","sent","stop","apply","arguments","id","setTimeout","clearTimeout","darkMode","_jsx","Box","height","width","children","theme","display","alignItems","justifyContent","getInitialState","_ref3","_callee2","colorMode","_context2","localStorage","getItem","abrupt","props","isStatic"],"sourceRoot":""}