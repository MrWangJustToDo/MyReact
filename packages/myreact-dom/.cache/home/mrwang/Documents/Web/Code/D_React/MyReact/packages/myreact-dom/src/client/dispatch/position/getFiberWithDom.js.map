{"version":3,"file":"getFiberWithDom.js","sourceRoot":"","sources":["getFiberWithDom.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,IAAM,eAAe,GAAG,UAC7B,KAA8B,EAC9B,SAAkG;IAAlG,0BAAA,EAAA,sBAAoF,CAAC,IAAK,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ;IAElG,IAAI,CAAC,KAAK;QAAE,OAAO,IAAI,CAAC;IACxB,IAAI,KAAK,CAAC,YAAY;QAAE,OAAO,IAAI,CAAC;IACpC,IAAI,KAAK,CAAC,GAAG;QAAE,OAAO,KAAK,CAAC;IAC5B,IAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,OAAO,UAAU,CAAC,MAAM,CAA0B,UAAC,CAAC,EAAE,CAAC;YACrD,IAAI,CAAC;gBAAE,OAAO,CAAC,CAAC;YAChB,CAAC,GAAG,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAClC,OAAO,CAAC,CAAC;QACX,CAAC,EAAE,IAAI,CAAC,CAAC;KACV;SAAM;QACL,OAAO,eAAe,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;KAC/C;AACH,CAAC,CAAC","sourcesContent":["import type { MyReactFiberNode } from \"@my-react/react\";\n\nexport const getFiberWithDom = (\n  fiber: MyReactFiberNode | null,\n  transform: (f: MyReactFiberNode) => MyReactFiberNode | MyReactFiberNode[] | null = (f) => f.parent\n): MyReactFiberNode | null => {\n  if (!fiber) return null;\n  if (fiber.__isPortal__) return null;\n  if (fiber.dom) return fiber;\n  const nextFibers = transform(fiber);\n  if (Array.isArray(nextFibers)) {\n    return nextFibers.reduce<MyReactFiberNode | null>((p, c) => {\n      if (p) return p;\n      p = getFiberWithDom(c, transform);\n      return p;\n    }, null);\n  } else {\n    return getFiberWithDom(nextFibers, transform);\n  }\n};\n"]}