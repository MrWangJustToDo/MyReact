{"version":3,"file":"render.js","sourceRoot":"","sources":["render.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE3E,OAAO,EAAE,WAAW,EAAE,sBAAsB,EAAE,MAAM,cAAc,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAK3C,IAAA,cAAc,GAKZ,oBAAoB,eALR,EACd,UAAU,GAIR,oBAAoB,WAJZ,EACV,aAAa,GAGX,oBAAoB,cAHT,EACb,SAAS,GAEP,oBAAoB,UAFb,EACS,qBAAqB,GACrC,oBAAoB,iBADiB,CAChB;AAEjB,IAAA,eAAe,GAAK,kBAAkB,gBAAvB,CAAwB;AAE/C,MAAM,CAAC,IAAM,MAAM,GAAG,UAAC,OAAuB,EAAE,SAAoD;;IAClG,cAAc,CAAC,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;IAE9C,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;IAE3B,IAAM,cAAc,GAAG,SAAS,CAAC,SAAS,CAAC;IAC3C,IAAI,cAAc,YAAY,qBAAqB,EAAE;QACnD,IAAI,cAAc,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YAC3C,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YACpC,cAAc,CAAC,MAAM,EAAE,CAAC;YACxB,OAAO;SACR;aAAM;YACL,sBAAsB,CAAC,SAAS,CAAC,CAAC;SACnC;KACF;IACD,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAC,CAAC,YAAK,OAAA,MAAA,CAAC,CAAC,MAAM,iDAAI,CAAA,EAAA,CAAC,CAAC;IAE5D,IAAM,KAAK,GAAG,eAAe,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;IAExE,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC;IAEtB,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;IAEtB,SAAS,CAAC,OAAO,GAAG,KAAK,CAAC;IAE1B,aAAa,CAAC,OAAO,GAAG,SAAS,CAAC;IAElC,MAAA,SAAS,CAAC,YAAY,0DAAG,QAAQ,EAAE,SAAS,CAAC,CAAC;IAE9C,SAAS,CAAC,SAAS,GAAG,KAAK,CAAC;IAE5B,WAAW,CAAC,KAAK,CAAC,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import { __myreact_internal__, __myreact_shared__ } from \"@my-react/react\";\n\nimport { startRender, unmountComponentAtNode } from \"../../shared\";\nimport { ClientDispatch } from \"../dispatch\";\n\nimport type { MyReactElement, MyReactFiberNode } from \"@my-react/react\";\n\nconst {\n  globalDispatch,\n  isAppCrash,\n  rootContainer,\n  rootFiber,\n  MyReactFiberNode: MyReactFiberNodeClass,\n} = __myreact_internal__;\n\nconst { createFiberNode } = __myreact_shared__;\n\nexport const render = (element: MyReactElement, container: Element & { __fiber__: MyReactFiberNode }) => {\n  globalDispatch.current = new ClientDispatch();\n\n  isAppCrash.current = false;\n\n  const containerFiber = container.__fiber__;\n  if (containerFiber instanceof MyReactFiberNodeClass) {\n    if (containerFiber.checkIsSameType(element)) {\n      containerFiber.installVDom(element);\n      containerFiber.update();\n      return;\n    } else {\n      unmountComponentAtNode(container);\n    }\n  }\n  Array.from(container.children).forEach((n) => n.remove?.());\n\n  const fiber = createFiberNode({ fiberIndex: 0, parent: null }, element);\n\n  fiber.dom = container;\n\n  fiber.__root__ = true;\n\n  rootFiber.current = fiber;\n\n  rootContainer.current = container;\n\n  container.setAttribute?.(\"render\", \"MyReact\");\n\n  container.__fiber__ = fiber;\n\n  startRender(fiber);\n};\n"]}