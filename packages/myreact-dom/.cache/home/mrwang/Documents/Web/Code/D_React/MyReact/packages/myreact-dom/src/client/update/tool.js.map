{"version":3,"file":"tool.js","sourceRoot":"","sources":["tool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAEvD,OAAO,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,MAAM,kBAAkB,CAAC;AAI/E,IAAA,cAAc,GAAiB,oBAAoB,eAArC,EAAE,UAAU,GAAK,oBAAoB,WAAzB,CAA0B;AAE5D,IAAI,YAAY,GAA4B,IAAI,CAAC;AAEjD,MAAM,CAAC,IAAM,qBAAqB,GAAG;IACnC,QAAQ,EAAE,UAAC,KAA8B;QACvC,IAAI,KAAK,EAAE;YACT,YAAY,GAAG,KAAK,CAAC;SACtB;aAAM;YACL,YAAY,GAAG,IAAI,CAAC;YACpB,cAAc,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;SAC1C;IACH,CAAC;IACD,OAAO,EAAE;QACP,IAAI,UAAU,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QACpC,IAAM,UAAU,GAAG,YAAY,CAAC;QAChC,YAAY,GAAG,IAAI,CAAC;QACpB,IAAI,UAAU;YAAE,OAAO,UAAU,CAAC;QAClC,OAAO,uBAAuB,CAAC,OAAO,CAAC,MAAM,EAAE;YAC7C,IAAM,gBAAgB,GAAG,uBAAuB,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACjE,IAAI,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,KAAK,EAAE;gBAC3B,cAAc,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAC3C,0BAA0B,CAAC,OAAO,GAAG,gBAAgB,CAAC;gBACtD,OAAO,gBAAgB,CAAC;aACzB;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IACD,aAAa,EAAE,UAAC,KAAuB;QACrC,cAAc,CAAC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IACD,OAAO,EAAE;QACP,IAAI,UAAU,CAAC,OAAO;YAAE,OAAO,KAAK,CAAC;QACrC,OAAO,YAAY,KAAK,IAAI,IAAI,uBAAuB,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAC7E,CAAC;IACD,SAAS,EAAE,cAAM,OAAA,YAAY,KAAK,IAAI,EAArB,CAAqB;IACtC,WAAW,EAAE,cAAM,OAAA,0BAA0B,CAAC,OAAO,EAAlC,CAAkC;CACtD,CAAC","sourcesContent":["import { __myreact_internal__ } from \"@my-react/react\";\n\nimport { pendingModifyFiberArray, pendingModifyTopLevelFiber } from \"@ReactDOM_shared\";\n\nimport type { MyReactFiberNode } from \"@my-react/react\";\n\nconst { globalDispatch, isAppCrash } = __myreact_internal__;\n\nlet currentYield: MyReactFiberNode | null = null;\n\nexport const updateFiberController = {\n  setYield: (fiber: MyReactFiberNode | null) => {\n    if (fiber) {\n      currentYield = fiber;\n    } else {\n      currentYield = null;\n      globalDispatch.current.endProgressList();\n    }\n  },\n  getNext: () => {\n    if (isAppCrash.current) return null;\n    const yieldFiber = currentYield;\n    currentYield = null;\n    if (yieldFiber) return yieldFiber;\n    while (pendingModifyFiberArray.current.length) {\n      const newProgressFiber = pendingModifyFiberArray.current.shift();\n      if (newProgressFiber?.mount) {\n        globalDispatch.current.beginProgressList();\n        pendingModifyTopLevelFiber.current = newProgressFiber;\n        return newProgressFiber;\n      }\n    }\n    return null;\n  },\n  getUpdateList: (fiber: MyReactFiberNode) => {\n    globalDispatch.current.generateUpdateList(fiber);\n  },\n  hasNext: () => {\n    if (isAppCrash.current) return false;\n    return currentYield !== null || pendingModifyFiberArray.current.length > 0;\n  },\n  doesPause: () => currentYield !== null,\n  getTopLevel: () => pendingModifyTopLevelFiber.current,\n};\n"]}