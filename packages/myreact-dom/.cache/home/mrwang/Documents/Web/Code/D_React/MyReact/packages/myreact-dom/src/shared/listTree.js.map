{"version":3,"file":"listTree.js","sourceRoot":"","sources":["listTree.ts"],"names":[],"mappings":"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","sourcesContent":["export class ListTreeNode<T> {\n  value: T;\n  prev: ListTreeNode<T> | null = null;\n  next: ListTreeNode<T> | null = null;\n  children: ListTreeNode<T>[] = [];\n\n  constructor(value: T) {\n    this.value = value;\n  }\n}\n\nexport class LinkTreeList<T> {\n  rawArray: T[] = [];\n\n  scopeRoot = { index: -1, value: new ListTreeNode<any>(false) };\n\n  scopeArray: Array<{ index: number; value: ListTreeNode<T> }> = [];\n  // listArray: ListTreeNode<T>[][] = [];\n\n  scopeLength = 0;\n\n  length = 0;\n\n  head: ListTreeNode<T> | null = null;\n  foot: ListTreeNode<T> | null = null;\n\n  scopePush(scopeItem: { index: number; value: ListTreeNode<T> }) {\n    while (this.scopeLength && this.scopeArray[this.scopeLength - 1].index >= scopeItem.index) {\n      this.scopeArray.pop();\n      this.scopeLength--;\n    }\n    if (this.scopeLength) {\n      this.scopeArray[this.scopeLength - 1].value.children.push(scopeItem.value);\n    } else {\n      this.scopeRoot.value.children.push(scopeItem.value);\n    }\n    this.scopeArray.push(scopeItem);\n    this.scopeLength++;\n  }\n\n  append(node: T, index: number) {\n    this.length++;\n    this.rawArray.push(node);\n    const listNode = new ListTreeNode(node);\n    this.push(listNode);\n    this.scopePush({ index, value: listNode });\n    // if (this.listArray[index]) {\n    //   const array = this.listArray[index];\n    //   array.push(listNode);\n    // } else {\n    //   this.listArray[index] = [listNode];\n    // }\n  }\n\n  unshift(node: ListTreeNode<T>) {\n    if (!this.head) {\n      this.head = node;\n      this.foot = node;\n    } else {\n      this.head.prev = node;\n      node.next = this.head;\n      this.head = node;\n    }\n  }\n\n  shift() {\n    if (this.head) {\n      const re = this.head;\n      if (this.head.next) {\n        this.head = this.head.next;\n        re.next = null;\n        this.head.prev = null;\n      } else {\n        this.head = null;\n        this.foot = null;\n      }\n      return re;\n    } else {\n      return null;\n    }\n  }\n\n  push(node: ListTreeNode<T>) {\n    if (!this.foot) {\n      this.head = node;\n      this.foot = node;\n    } else {\n      this.foot.next = node;\n      node.prev = this.foot;\n      this.foot = node;\n    }\n  }\n\n  pop() {\n    if (this.foot) {\n      const re = this.foot;\n      if (this.foot.prev) {\n        this.foot = this.foot.prev;\n        re.prev = null;\n        this.foot.next = null;\n      } else {\n        this.head = null;\n        this.foot = null;\n      }\n      return re;\n    } else {\n      return null;\n    }\n  }\n\n  pickHead() {\n    return this.head;\n  }\n\n  pickFoot() {\n    return this.foot;\n  }\n\n  listToFoot(action: (p: T) => void) {\n    let node = this.head;\n    while (node) {\n      action(node.value);\n      node = node.next;\n    }\n  }\n\n  listToHead(action: (p: T) => void) {\n    let node = this.foot;\n    while (node) {\n      action(node.value);\n      node = node.prev;\n    }\n  }\n\n  reconcile(action: (p: T) => void) {\n    const reconcileScope = (node: ListTreeNode<T>) => {\n      if (node.children) {\n        node.children.forEach(reconcileScope);\n      }\n      action(node.value);\n    };\n    if (this.scopeLength) {\n      this.scopeRoot.value.children.forEach(reconcileScope);\n    }\n    // for (let i = this.listArray.length - 1; i >= 0; i--) {\n    //   const array = this.listArray[i];\n    //   if (array) {\n    //     array.forEach((p) => action(p.value));\n    //   }\n    // }\n  }\n\n  has() {\n    return this.head !== null;\n  }\n}\n"]}