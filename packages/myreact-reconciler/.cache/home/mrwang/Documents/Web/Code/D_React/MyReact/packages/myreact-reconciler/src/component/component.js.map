{"version":3,"file":"component.js","sourceRoot":"","sources":["component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,iBAAiB,CAAC;AAE3E,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,2BAA2B,EAAE,MAAM,UAAU,CAAC;AAW/C,IAAA,cAAc,GAAK,oBAAoB,eAAzB,CAA0B;AAExC,IAAA,eAAe,GAAsB,kBAAkB,gBAAxC,EAAE,eAAe,GAAK,kBAAkB,gBAAvB,CAAwB;AAEhE,IAAM,8BAA8B,GAAG,UAAC,KAAuB;IAC7D,IAAM,YAAY,GAAG,KAAK,CAAC,OAAyB,CAAC;IAErD,IAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAE,YAAY,CAAC,IAAgC,CAAC,MAAM,CAAC;IAEtH,IAAM,cAAc,GAAG,SAAwD,CAAC;IAEhF,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAElE,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IACpD,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;IAErD,IAAI,OAAO,cAAc,CAAC,wBAAwB,KAAK,UAAU,EAAE;QACjE,IAAM,YAAY,GAAG,cAAc,CAAC,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3E,IAAI,YAAY,EAAE;YAChB,aAAa,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;SAC5E;KACF;AACH,CAAC,CAAC;AAEF,IAAM,+BAA+B,GAAG,UAAC,KAAuB;IAC9D,IAAM,YAAY,GAAG,KAAK,CAAC,OAAyB,CAAC;IAErD,IAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAE,YAAY,CAAC,IAAgC,CAAC,MAAM,CAAC;IAEtH,IAAM,cAAc,GAAG,SAAwD,CAAC;IAEhF,IAAM,aAAa,GAAG,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;IAEzE,IAAM,OAAO,GAAG,eAAe,CAAC,aAAa,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;IAE3E,IAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC;IAEpD,IAAM,QAAQ,GAAG,IAAI,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAEpD,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;IAEvB,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;IAE3B,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAEhC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEzB,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,IAAM,6BAA6B,GAAG,UAAC,KAAuB;IAC5D,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAClE,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,IAAM,sCAAsC,GAAG,UAAC,KAAuB;IACrE,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAElE,IAAM,QAAQ,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC;IAExC,KAAK,CAAC,mBAAmB,GAAG,QAAQ,CAAC;IAErC,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,IAAM,+BAA+B,GAAG,UAAC,KAAuB;IAC9D,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAElE,IAAI,aAAa,CAAC,iBAAiB,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;QACvE,aAAa,CAAC,iBAAiB,GAAG,IAAI,CAAC;QACvC,cAAc,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE;;YAChD,aAAa,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACxC,MAAA,aAAa,CAAC,iBAAiB,6DAAI,CAAC;QACtC,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAEF,IAAM,+BAA+B,GAAG,UAAC,KAAuB;IAC9D,IAAM,YAAY,GAAG,KAAK,CAAC,OAAyB,CAAC;IAErD,IAAM,SAAS,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAE,YAAY,CAAC,IAAgC,CAAC,MAAM,CAAC;IAEtH,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAElE,IAAM,cAAc,GAAG,SAAwD,CAAC;IAEhF,IAAI,CAAC,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,WAAW,CAAA,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,EAAE;QACnE,IAAM,aAAa,GAAG,eAAe,CAAC,KAAK,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;QAEzE,IAAM,OAAO,GAAG,eAAe,CAAC,aAAa,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;QAE3E,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,CAAC,aAAa,CAAC,CAAC;QAEzC,OAAO,OAAO,CAAC;KAChB;SAAM;QACL,IAAM,OAAO,GAAG,eAAe,CAAC,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;QAEvF,OAAO,OAAO,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,IAAM,oCAAoC,GAAG,UAC3C,KAAuB,EACvB,EAAuG;QAArG,SAAS,eAAA,EAAE,SAAS,eAAA,EAAE,WAAW,iBAAA;IAEnC,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAElE,IAAI,KAAK,CAAC,eAAe;QAAE,OAAO,IAAI,CAAC;IAEvC,IAAI,aAAa,CAAC,qBAAqB,EAAE;QACvC,OAAO,aAAa,CAAC,qBAAqB,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;KAC/E;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,IAAM,iCAAiC,GAAG,UACxC,KAAuB,EACvB,EAUC;QATC,SAAS,eAAA,EACT,SAAS,eAAA,EACT,WAAW,iBAAA,EACX,QAAQ,cAAA;IAQV,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAClE,IAAM,SAAS,GAAG,aAAa,CAAC,kBAAkB,IAAI,QAAQ,CAAC,MAAM,CAAC;IAEtE,wDAAwD;IACxD,IAAI,SAAS,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;QACjD,aAAa,CAAC,iBAAiB,GAAG,IAAI,CAAC;QACvC,cAAc,CAAC,OAAO,CAAC,mBAAmB,CAAC,KAAK,EAAE;;YAChD,aAAa,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACxC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAZ,CAAY,CAAC,CAAC;YACtC,MAAA,aAAa,CAAC,kBAAkB,8DAAG,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;KACJ;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,mBAAmB,GAAG,UAAC,KAAuB;IACzD,+BAA+B,CAAC,KAAK,CAAC,CAAC;IACvC,8BAA8B,CAAC,KAAK,CAAC,CAAC;IACtC,IAAM,QAAQ,GAAG,sCAAsC,CAAC,KAAK,CAAC,CAAC;IAC/D,+BAA+B,CAAC,KAAK,CAAC,CAAC;IACvC,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,oBAAoB,GAAG,UAAC,KAAuB;IAC1D,6BAA6B,CAAC,KAAK,CAAC,CAAC;IACrC,8BAA8B,CAAC,KAAK,CAAC,CAAC;IAChC,IAAA,KAAkC,2BAA2B,CAAC,KAAK,CAAC,EAAlE,QAAQ,cAAA,EAAE,OAAO,aAAA,EAAE,QAAQ,cAAuC,CAAC;IAC3E,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAClE,IAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC;IACtC,IAAM,SAAS,GAAG,aAAa,CAAC,KAAK,CAAC;IACtC,IAAM,WAAW,GAAG,aAAa,CAAC,OAAO,CAAC;IAC1C,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IACzD,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IACrD,IAAM,WAAW,GAAG,+BAA+B,CAAC,KAAK,CAAC,CAAC;IAC3D,IAAI,YAAY,GAAG,OAAO,CAAC;IAC3B,IAAI,CAAC,YAAY,EAAE;QACjB,YAAY,GAAG,oCAAoC,CAAC,KAAK,EAAE;YACzD,SAAS,WAAA;YACT,SAAS,WAAA;YACT,WAAW,aAAA;SACZ,CAAC,CAAC;KACJ;IACD,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC;IAChC,aAAa,CAAC,KAAK,GAAG,SAAS,CAAC;IAChC,aAAa,CAAC,OAAO,GAAG,WAAW,CAAC;IACpC,IAAI,YAAY,EAAE;QAChB,IAAM,QAAQ,GAAG,sCAAsC,CAAC,KAAK,CAAC,CAAC;QAC/D,iCAAiC,CAAC,KAAK,EAAE;YACvC,WAAW,aAAA;YACX,SAAS,WAAA;YACT,SAAS,WAAA;YACT,QAAQ,UAAA;SACT,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;KACjB;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC,CAAC","sourcesContent":["import { __myreact_shared__, __myreact_internal__ } from \"@my-react/react\";\n\nimport { nextWorkCommon } from \"../generate/invoke\";\nimport { processComponentUpdateQueue } from \"../queue\";\n\nimport type {\n  memo,\n  ClassComponent,\n  MyReactComponentStaticType,\n  MixinMyReactComponentType,\n  MyReactElement,\n  MyReactFiberNode,\n} from \"@my-react/react\";\n\nconst { globalDispatch } = __myreact_internal__;\n\nconst { getContextFiber, getContextValue } = __myreact_shared__;\n\nconst processComponentStateFromProps = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as MyReactElement;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const props = Object.assign({}, typedElement.props);\n  const state = Object.assign({}, typedInstance.state);\n\n  if (typeof typedComponent.getDerivedStateFromProps === \"function\") {\n    const payloadState = typedComponent.getDerivedStateFromProps(props, state);\n    if (payloadState) {\n      typedInstance.state = Object.assign({}, typedInstance.state, payloadState);\n    }\n  }\n};\n\nconst processComponentInstanceOnMount = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as MyReactElement;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  const ProviderFiber = getContextFiber(fiber, typedComponent.contextType);\n\n  const context = getContextValue(ProviderFiber, typedComponent.contextType);\n\n  const props = Object.assign({}, typedElement.props);\n\n  const instance = new typedComponent(props, context);\n\n  instance.props = props;\n\n  instance.context = context;\n\n  fiber.installInstance(instance);\n\n  instance.setFiber(fiber);\n\n  instance.setContext(ProviderFiber);\n};\n\nconst processComponentFiberOnUpdate = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  typedInstance.setFiber(fiber);\n};\n\nconst processComponentRenderOnMountAndUpdate = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const children = typedInstance.render();\n\n  fiber.__dynamicChildren__ = children;\n\n  return nextWorkCommon(fiber);\n};\n\nconst processComponentDidMountOnMount = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  if (typedInstance.componentDidMount && !typedInstance.__pendingEffect__) {\n    typedInstance.__pendingEffect__ = true;\n    globalDispatch.current.pendingLayoutEffect(fiber, () => {\n      typedInstance.__pendingEffect__ = false;\n      typedInstance.componentDidMount?.();\n    });\n  }\n};\n\nconst processComponentContextOnUpdate = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as MyReactElement;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  if (!typedInstance?.__context__ || !typedInstance.__context__.mount) {\n    const ProviderFiber = getContextFiber(fiber, typedComponent.contextType);\n\n    const context = getContextValue(ProviderFiber, typedComponent.contextType);\n\n    typedInstance?.setContext(ProviderFiber);\n\n    return context;\n  } else {\n    const context = getContextValue(typedInstance.__context__, typedComponent.contextType);\n\n    return context;\n  }\n};\n\nconst processComponentShouldUpdateOnUpdate = (\n  fiber: MyReactFiberNode,\n  { nextState, nextProps, nextContext }: { nextState: unknown; nextProps: unknown; nextContext: unknown }\n) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  if (fiber.__needTrigger__) return true;\n\n  if (typedInstance.shouldComponentUpdate) {\n    return typedInstance.shouldComponentUpdate(nextProps, nextState, nextContext);\n  }\n\n  return true;\n};\n\nconst processComponentDidUpdateOnUpdate = (\n  fiber: MyReactFiberNode,\n  {\n    baseState,\n    baseProps,\n    baseContext,\n    callback,\n  }: {\n    baseState: unknown;\n    baseProps: unknown;\n    baseContext: unknown;\n    callback: Array<() => void>;\n  }\n) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  const hasEffect = typedInstance.componentDidUpdate || callback.length;\n\n  // TODO it is necessary to use __pendingEffect__ field ?\n  if (hasEffect && !typedInstance.__pendingEffect__) {\n    typedInstance.__pendingEffect__ = true;\n    globalDispatch.current.pendingLayoutEffect(fiber, () => {\n      typedInstance.__pendingEffect__ = false;\n      callback.forEach((c) => c.call(null));\n      typedInstance.componentDidUpdate?.(baseProps, baseState, baseContext);\n    });\n  }\n};\n\nexport const classComponentMount = (fiber: MyReactFiberNode) => {\n  processComponentInstanceOnMount(fiber);\n  processComponentStateFromProps(fiber);\n  const children = processComponentRenderOnMountAndUpdate(fiber);\n  processComponentDidMountOnMount(fiber);\n  return children;\n};\n\nexport const classComponentUpdate = (fiber: MyReactFiberNode) => {\n  processComponentFiberOnUpdate(fiber);\n  processComponentStateFromProps(fiber);\n  const { newState, isForce, callback } = processComponentUpdateQueue(fiber);\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  const baseState = typedInstance.state;\n  const baseProps = typedInstance.props;\n  const baseContext = typedInstance.context;\n  const nextState = Object.assign({}, baseState, newState);\n  const nextProps = Object.assign({}, fiber.__props__);\n  const nextContext = processComponentContextOnUpdate(fiber);\n  let shouldUpdate = isForce;\n  if (!shouldUpdate) {\n    shouldUpdate = processComponentShouldUpdateOnUpdate(fiber, {\n      nextState,\n      nextProps,\n      nextContext,\n    });\n  }\n  typedInstance.state = nextState;\n  typedInstance.props = nextProps;\n  typedInstance.context = nextContext;\n  if (shouldUpdate) {\n    const children = processComponentRenderOnMountAndUpdate(fiber);\n    processComponentDidUpdateOnUpdate(fiber, {\n      baseContext,\n      baseProps,\n      baseState,\n      callback,\n    });\n    return children;\n  } else {\n    return [];\n  }\n};\n"]}