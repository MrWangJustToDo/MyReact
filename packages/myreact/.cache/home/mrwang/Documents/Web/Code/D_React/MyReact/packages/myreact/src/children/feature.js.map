{"version":3,"file":"feature.js","sourceRoot":"","sources":["feature.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE1D,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAIpC,MAAM,CAAC,IAAM,GAAG,GAAG,UAAC,SAAgC,EAAE,MAAkD;IACtG,OAAA,UAAU,CAAC,SAAS,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAA7B,CAA6B,EAAE,MAAM,CAAC;AAAnE,CAAmE,CAAC;AAEtE,MAAM,CAAC,IAAM,OAAO,GAAG,UAAC,SAAgC;IACtD,OAAA,GAAG,CAAC,SAAS,EAAE,UAAC,OAAO,EAAE,KAAK;QAC5B,OAAA,YAAY,CAAC,OAAO,EAAE;YACpB,GAAG,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,MAAK,SAAS,CAAC,CAAC,CAAC,YAAK,OAAO,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC,WAAI,KAAK,CAAE;SACnE,CAAC;IAFF,CAEE,CACH;AAJD,CAIC,CAAC;AAEJ,MAAM,CAAC,IAAM,OAAO,GAAG,UACrB,SAAgC,EAChC,MAAmF;IAEnF,UAAU,CAAC,SAAS,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,IAAI,EAA7B,CAA6B,EAAE,MAAM,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,KAAK,GAAG,UAAC,SAAgC;IACpD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QAC5B,OAAO,SAAS,CAAC,MAAM,CAAS,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAZ,CAAY,EAAE,CAAC,CAAC,CAAC;KAC5D;IACD,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,IAAI,GAAG,UAAC,KAA4B;IAC/C,IAAI,cAAc,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IACxC,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,SAAS;QAAE,OAAO,IAAI,CAAC;IAEtG,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;AACzF,CAAC,CAAC","sourcesContent":["import { cloneElement, isValidElement } from \"../element\";\n\nimport { mapByJudge } from \"./tool\";\n\nimport type { MaybeArrayElementNode, Element } from \"../element\";\n\nexport const map = (arrayLike: MaybeArrayElementNode, action: (child: Element, index: number) => Element) =>\n  mapByJudge(arrayLike, (v) => v !== undefined && v !== null, action);\n\nexport const toArray = (arrayLike: MaybeArrayElementNode) =>\n  map(arrayLike, (element, index) =>\n    cloneElement(element, {\n      key: element?.key !== undefined ? `.$${element.key}` : `.${index}`,\n    })\n  );\n\nexport const forEach = (\n  arrayLike: MaybeArrayElementNode,\n  action: (child: Element, index: number, children: MaybeArrayElementNode) => Element\n) => {\n  mapByJudge(arrayLike, (v) => v !== undefined && v !== null, action);\n};\n\nexport const count = (arrayLike: MaybeArrayElementNode): number => {\n  if (Array.isArray(arrayLike)) {\n    return arrayLike.reduce<number>((p, c) => p + count(c), 0);\n  }\n  return 1;\n};\n\nexport const only = (child: MaybeArrayElementNode) => {\n  if (isValidElement(child)) return child;\n  if (typeof child === \"string\" || typeof child === \"number\" || typeof child === \"boolean\") return true;\n\n  throw new Error(\"Children.only() expected to receive a single MyReact element child.\");\n};\n"]}