{"version":3,"file":"tool.js","sourceRoot":"","sources":["tool.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAI3C,MAAM,CAAC,IAAM,UAAU,GAAG,UACxB,SAAY,EACZ,KAAkC,EAClC,MAAuE;IAEvE,IAAM,aAAa,GAAG,eAAe,CAAC,SAAS,CAAC,CAAC;IAEjD,OAAO,aAAa,CAAC,GAAG,CAAC,UAAC,CAAC,EAAE,KAAK;QAChC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE;YACZ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAY,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;SAC9D;aAAM;YACL,OAAO,CAAC,CAAC;SACV;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { flattenChildren } from \"../share\";\n\nimport type { ArrayElementNode, Element, ElementNode, MaybeArrayElementNode } from \"../element\";\n\nexport const mapByJudge = <T extends MaybeArrayElementNode>(\n  arrayLike: T,\n  judge: (t: ElementNode) => boolean,\n  action: (v: Element, index: number, array: ArrayElementNode) => Element\n) => {\n  const arrayChildren = flattenChildren(arrayLike);\n\n  return arrayChildren.map((v, index) => {\n    if (judge(v)) {\n      return action.call(null, v as Element, index, arrayChildren);\n    } else {\n      return v;\n    }\n  });\n};\n"]}