{"version":3,"file":"feature.js","sourceRoot":"","sources":["feature.ts"],"names":[],"mappings":"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","sourcesContent":["import { getContextFiber, getContextValue, processComponentUpdateQueue } from \"../fiber\";\nimport { globalDispatch } from \"../share\";\n\nimport type { Element, ClassComponent, memo } from \"../element\";\nimport type { MyReactFiberNode } from \"../fiber\";\nimport type { MixinMyReactComponentType, MyReactComponentStaticType } from \"./instance\";\n\nconst processComponentStateFromProps = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as Element;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const props = Object.assign({}, typedElement.props);\n  const state = Object.assign({}, typedInstance.state);\n\n  if (typeof typedComponent.getDerivedStateFromProps === \"function\") {\n    const payloadState = typedComponent.getDerivedStateFromProps(props, state);\n    if (payloadState) {\n      typedInstance.state = Object.assign({}, typedInstance.state, payloadState);\n    }\n  }\n};\n\nconst processComponentInstanceOnMount = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as Element;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  const ProviderFiber = getContextFiber(fiber, typedComponent.contextType);\n\n  const context = getContextValue(ProviderFiber, typedComponent.contextType);\n\n  const props = Object.assign({}, typedElement.props);\n\n  const instance = new typedComponent(props, context);\n\n  instance.props = props;\n\n  instance.context = context;\n\n  fiber.installInstance(instance);\n\n  instance.setFiber(fiber);\n\n  instance.setContext(ProviderFiber);\n};\n\nconst processComponentFiberOnUpdate = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  typedInstance.setFiber(fiber);\n};\n\nconst processComponentRenderOnMountAndUpdate = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const children = typedInstance.render();\n\n  fiber.__dynamicChildren__ = children;\n\n  return children;\n};\n\nconst processComponentDidMountOnMount = (fiber: MyReactFiberNode) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  if (typedInstance.componentDidMount && !typedInstance.__pendingEffect__) {\n    typedInstance.__pendingEffect__ = true;\n    globalDispatch.current.pendingLayoutEffect(fiber, () => {\n      typedInstance.__pendingEffect__ = false;\n      typedInstance.componentDidMount?.();\n    });\n  }\n};\n\nconst processComponentContextOnUpdate = (fiber: MyReactFiberNode) => {\n  const typedElement = fiber.element as Element;\n\n  const Component = fiber.__isDynamicNode__ ? typedElement.type : (typedElement.type as ReturnType<typeof memo>).render;\n\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  const typedComponent = Component as ClassComponent & MyReactComponentStaticType;\n\n  if (!typedInstance?.__context__ || !typedInstance.__context__.mount) {\n    const ProviderFiber = getContextFiber(fiber, typedComponent.contextType);\n\n    const context = getContextValue(ProviderFiber, typedComponent.contextType);\n\n    typedInstance?.setContext(ProviderFiber);\n\n    return context;\n  } else {\n    const context = getContextValue(typedInstance.__context__, typedComponent.contextType);\n\n    return context;\n  }\n};\n\nconst processComponentShouldUpdateOnUpdate = (\n  fiber: MyReactFiberNode,\n  { nextState, nextProps, nextContext }: { nextState: unknown; nextProps: unknown; nextContext: unknown }\n) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n\n  if (fiber.__needTrigger__) return true;\n\n  if (typedInstance.shouldComponentUpdate) {\n    return typedInstance.shouldComponentUpdate(nextProps, nextState, nextContext);\n  }\n\n  return true;\n};\n\nconst processComponentDidUpdateOnUpdate = (\n  fiber: MyReactFiberNode,\n  {\n    baseState,\n    baseProps,\n    baseContext,\n    callback,\n  }: {\n    baseState: unknown;\n    baseProps: unknown;\n    baseContext: unknown;\n    callback: Array<() => void>;\n  }\n) => {\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  const hasEffect = typedInstance.componentDidUpdate || callback.length;\n\n  // TODO it is necessary to use __pendingEffect__ field ?\n  if (hasEffect && !typedInstance.__pendingEffect__) {\n    typedInstance.__pendingEffect__ = true;\n    globalDispatch.current.pendingLayoutEffect(fiber, () => {\n      typedInstance.__pendingEffect__ = false;\n      callback.forEach((c) => c.call(null));\n      typedInstance.componentDidUpdate?.(baseProps, baseState, baseContext);\n    });\n  }\n};\n\nexport const classComponentMount = (fiber: MyReactFiberNode) => {\n  processComponentInstanceOnMount(fiber);\n  processComponentStateFromProps(fiber);\n  const children = processComponentRenderOnMountAndUpdate(fiber);\n  processComponentDidMountOnMount(fiber);\n  return children;\n};\n\nexport const classComponentUpdate = (fiber: MyReactFiberNode) => {\n  processComponentFiberOnUpdate(fiber);\n  processComponentStateFromProps(fiber);\n  const { newState, isForce, callback } = processComponentUpdateQueue(fiber);\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  const baseState = typedInstance.state;\n  const baseProps = typedInstance.props;\n  const baseContext = typedInstance.context;\n  const nextState = Object.assign({}, baseState, newState);\n  const nextProps = Object.assign({}, fiber.__props__);\n  const nextContext = processComponentContextOnUpdate(fiber);\n  let shouldUpdate = isForce;\n  if (!shouldUpdate) {\n    shouldUpdate = processComponentShouldUpdateOnUpdate(fiber, {\n      nextState,\n      nextProps,\n      nextContext,\n    });\n  }\n  typedInstance.state = nextState;\n  typedInstance.props = nextProps;\n  typedInstance.context = nextContext;\n  if (shouldUpdate) {\n    const children = processComponentRenderOnMountAndUpdate(fiber);\n    processComponentDidUpdateOnUpdate(fiber, {\n      baseContext,\n      baseProps,\n      baseState,\n      callback,\n    });\n    return children;\n  } else {\n    return [];\n  }\n};\n"]}