{"version":3,"file":"instance.js","sourceRoot":"","sources":["instance.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,uBAAuB,EAAE,MAAM,aAAa,CAAC;AACtD,OAAO,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AA2B1C;IAIU,oCAAuB;IAK/B,0BAAY,KAAS,EAAE,OAAkB;QAAzC,YACE,iBAAO,SAGR;QARD,WAAK,GAAa,IAAI,CAAC;QACvB,WAAK,GAAa,IAAI,CAAC;QACvB,aAAO,GAAa,IAAI,CAAC;QAgBzB,cAAQ,GAAG,UAAC,OAAwC,EAAE,QAA0C;;YAC9F,IAAM,OAAO,GAAyB;gBACpC,IAAI,EAAE,OAAO;gBACb,OAAO,SAAA;gBACP,QAAQ,UAAA;gBACR,OAAO,EAAE,KAAI;aACd,CAAC;YAEF,MAAA,KAAI,CAAC,SAAS,0CAAE,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAElD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;gBACrB,MAAA,KAAI,CAAC,SAAS,0CAAE,MAAM,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAEF,iBAAW,GAAG;;YACZ,IAAM,OAAO,GAAyB;gBACpC,IAAI,EAAE,OAAO;gBACb,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,KAAI;aACd,CAAC;YAEF,MAAA,KAAI,CAAC,SAAS,0CAAE,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAElD,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;;gBACrB,MAAA,KAAI,CAAC,SAAS,0CAAE,MAAM,EAAE,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC;QAvCA,KAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,CAAC;QAC3B,KAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,CAAC;;IACjC,CAAC;IAED,sBAAI,8CAAgB;aAApB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;;;OAAA;IAED,sBAAI,gDAAkB;aAAtB;YACE,OAAO,IAAI,CAAC;QACd,CAAC;;;OAAA;IA+BD,kCAAO,GAAP;;QACE,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAM,QAAQ,GAAG,IAA4C,CAAC;QAC9D,MAAA,QAAQ,CAAC,oBAAoB,wDAAI,CAAC;IACpC,CAAC;IACH,uBAAC;AAAD,CAAC,AAzDD,CAIU,uBAAuB,GAqDhC;;AAED;IAIU,wCAAyB;IAJnC;;IAYA,CAAC;IAPC,oDAAqB,GAArB,UAAsB,SAAY,EAAE,SAAY,EAAE,WAAc;QAC9D,OAAO,CACL,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;YACtC,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC;YACtC,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAC3C,CAAC;IACJ,CAAC;IACH,2BAAC;AAAD,CAAC,AAZD,CAIU,gBAAgB,GAQzB","sourcesContent":["import { MyReactInternalInstance } from \"../internal\";\nimport { isNormalEquals } from \"../share\";\n\nimport type { DynamicElementNode, createContext } from \"../element\";\nimport type { ComponentUpdateQueue } from \"../fiber\";\n\ninterface MyReactComponentType<P, S, C> {\n  render(this: MyReactComponent): DynamicElementNode;\n  componentDidMount?(this: MyReactComponent): void;\n  shouldComponentUpdate?(this: MyReactComponent, nextProps: P, nextState: S, nextContext: C): boolean;\n  componentDidUpdate?(this: MyReactComponent, prevProps: P, prevState: S, prevContext: C): void;\n  componentWillUnmount?(): void;\n}\n\nexport type MyReactComponentStaticType<\n  P extends Record<string, unknown> = any,\n  S extends Record<string, unknown> = any\n> = {\n  contextType: null | ReturnType<typeof createContext>;\n  getDerivedStateFromProps(props: P, state: S): S;\n};\n\nexport type MixinMyReactComponentType<\n  P extends Record<string, unknown> = any,\n  S extends Record<string, unknown> = any,\n  C extends Record<string, unknown> = any\n> = MyReactComponent<P, S, C> & MyReactComponentType<P, S, C>;\n\nexport class MyReactComponent<\n  P extends Record<string, unknown> = any,\n  S extends Record<string, unknown> = any,\n  C extends Record<string, unknown> = any\n> extends MyReactInternalInstance {\n  state: S | null = null;\n  props: P | null = null;\n  context: C | null = null;\n\n  constructor(props?: P, context?: C | null) {\n    super();\n    this.props = props || null;\n    this.context = context || null;\n  }\n\n  get isReactComponent() {\n    return true;\n  }\n\n  get isMyReactComponent() {\n    return true;\n  }\n\n  setState = (payLoad: ComponentUpdateQueue[\"payLoad\"], callback: ComponentUpdateQueue[\"callback\"]) => {\n    const updater: ComponentUpdateQueue = {\n      type: \"state\",\n      payLoad,\n      callback,\n      trigger: this,\n    };\n\n    this.__fiber__?.__compUpdateQueue__.push(updater);\n\n    Promise.resolve().then(() => {\n      this.__fiber__?.update();\n    });\n  };\n\n  forceUpdate = () => {\n    const updater: ComponentUpdateQueue = {\n      type: \"state\",\n      isForce: true,\n      trigger: this,\n    };\n\n    this.__fiber__?.__compUpdateQueue__.push(updater);\n\n    Promise.resolve().then(() => {\n      this.__fiber__?.update();\n    });\n  };\n\n  unmount() {\n    super.unmount();\n    const instance = this as unknown as MixinMyReactComponentType;\n    instance.componentWillUnmount?.();\n  }\n}\n\nexport class MyReactPureComponent<\n  P extends Record<string, unknown> = any,\n  S extends Record<string, unknown> = any,\n  C extends Record<string, unknown> = any\n> extends MyReactComponent<P, S, C> {\n  shouldComponentUpdate(nextProps: P, nextState: S, nextContext: C) {\n    return (\n      !isNormalEquals(nextProps, this.props) ||\n      !isNormalEquals(nextState, this.state) ||\n      !isNormalEquals(nextContext, this.context)\n    );\n  }\n}\n"]}