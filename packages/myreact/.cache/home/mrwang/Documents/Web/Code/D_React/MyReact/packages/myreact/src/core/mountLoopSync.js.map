{"version":3,"file":"mountLoopSync.js","sourceRoot":"","sources":["mountLoopSync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,yBAAyB,EAAE,yBAAyB,EAAE,MAAM,UAAU,CAAC;AAEhF,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AAIxC,MAAM,SAAS,GAAG,CAAC,KAAuB,EAAE,EAAE;IAC5C,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,GAAG,EAAE;IACvB,OAAO,yBAAyB,CAAC,OAAO,CAAC,MAAM,EAAE;QAC/C,MAAM,KAAK,GAAG,yBAAyB,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACxD,IAAI,KAAK,EAAE;YACT,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;SAChE;KACF;AACH,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;IACpB,OAAO,yBAAyB,CAAC,OAAO,CAAC,MAAM,EAAE;QAC/C,MAAM,KAAK,GAAG,yBAAyB,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACxD,IAAI,KAAK,EAAE;YACT,yBAAyB,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;SAChE;KACF;AACH,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,GAAG,EAAE;IACrB,WAAW,EAAE,CAAC;IACd,QAAQ,EAAE,CAAC;IACX,IAAI,yBAAyB,CAAC,OAAO,CAAC,MAAM,EAAE;QAC5C,SAAS,EAAE,CAAC;KACb;AACH,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,KAAuB,EAAE,EAAE;IAC1C,SAAS,CAAC,KAAK,CAAC,CAAC;IACjB,SAAS,EAAE,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,KAAuB,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import { cRoundTransformFiberArray, nRoundTransformFiberArray } from \"../share\";\n\nimport { nextWorkSync } from \"./invoke\";\n\nimport type { MyReactFiberNode } from \"../fiber\";\n\nconst loopStart = (fiber: MyReactFiberNode) => {\n  cRoundTransformFiberArray.current.push(...nextWorkSync(fiber));\n};\n\nconst loopCurrent = () => {\n  while (cRoundTransformFiberArray.current.length) {\n    const fiber = cRoundTransformFiberArray.current.shift();\n    if (fiber) {\n      nRoundTransformFiberArray.current.push(...nextWorkSync(fiber));\n    }\n  }\n};\n\nconst loopNext = () => {\n  while (nRoundTransformFiberArray.current.length) {\n    const fiber = nRoundTransformFiberArray.current.shift();\n    if (fiber) {\n      cRoundTransformFiberArray.current.push(...nextWorkSync(fiber));\n    }\n  }\n};\n\nconst loopToEnd = () => {\n  loopCurrent();\n  loopNext();\n  if (cRoundTransformFiberArray.current.length) {\n    loopToEnd();\n  }\n};\n\nconst loopAll = (fiber: MyReactFiberNode) => {\n  loopStart(fiber);\n  loopToEnd();\n};\n\nexport const mountLoopSync = (fiber: MyReactFiberNode) => loopAll(fiber);\n"]}