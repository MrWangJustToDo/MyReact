{"version":3,"file":"updateLoopAsync.js","sourceRoot":"","sources":["updateLoopAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAIzC,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,cAOC,EACD,WAA0B,EAC1B,eAA2B,EAC3B,EAAE;IACF,OAAO,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,EAAE,EAAE;QACjD,MAAM,KAAK,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,KAAK,EAAE;YACT,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACrF,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACpC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SACpC;KACF;IACD,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,EAAE;QAC/B,eAAe,EAAE,CAAC;KACnB;AACH,CAAC,CAAC","sourcesContent":["import { safeCall } from \"../share\";\n\nimport { nextWorkAsync } from \"./invoke\";\n\nimport type { MyReactFiberNode } from \"../fiber\";\n\nexport const updateLoopAsync = (\n  loopController: {\n    setYield: (f: MyReactFiberNode | null) => void;\n    getNext: () => MyReactFiberNode | null;\n    getUpdateList: (f: MyReactFiberNode) => void;\n    hasNext: () => boolean;\n    doesPause: () => boolean;\n    getTopLevel: () => MyReactFiberNode | null;\n  },\n  shouldPause: () => boolean,\n  reconcileUpdate: () => void\n) => {\n  while (loopController.hasNext() && !shouldPause()) {\n    const fiber = loopController.getNext();\n    if (fiber) {\n      const nextFiber = safeCall(() => nextWorkAsync(fiber, loopController.getTopLevel()));\n      loopController.getUpdateList(fiber);\n      loopController.setYield(nextFiber);\n    }\n  }\n  if (!loopController.doesPause()) {\n    reconcileUpdate();\n  }\n};\n"]}