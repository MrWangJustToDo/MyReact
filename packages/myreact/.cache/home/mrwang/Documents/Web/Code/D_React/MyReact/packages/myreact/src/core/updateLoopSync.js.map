{"version":3,"file":"updateLoopSync.js","sourceRoot":"","sources":["updateLoopSync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAIzC,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,cAMC,EACD,eAA2B,EAC3B,EAAE;IACF,IAAI,cAAc,CAAC,OAAO,EAAE,EAAE;QAC5B,IAAI,KAAK,GAAG,cAAc,CAAC,OAAO,EAAE,CAAC;QACrC,OAAO,KAAK,EAAE;YACZ,MAAM,MAAM,GAAG,KAAyB,CAAC;YACzC,KAAK,GAAG,QAAQ,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YAC5E,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACrC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;SAChC;KACF;IACD,eAAe,EAAE,CAAC;AACpB,CAAC,CAAC","sourcesContent":["import { safeCall } from \"../share\";\n\nimport { nextWorkAsync } from \"./invoke\";\n\nimport type { MyReactFiberNode } from \"../fiber\";\n\nexport const updateLoopSync = (\n  loopController: {\n    hasNext: () => boolean;\n    getNext: () => MyReactFiberNode | null;\n    getUpdateList: (f: MyReactFiberNode) => void;\n    setYield: (f: MyReactFiberNode | null) => void;\n    getTopLevel: () => MyReactFiberNode | null;\n  },\n  reconcileUpdate: () => void\n) => {\n  if (loopController.hasNext()) {\n    let fiber = loopController.getNext();\n    while (fiber) {\n      const _fiber = fiber as MyReactFiberNode;\n      fiber = safeCall(() => nextWorkAsync(_fiber, loopController.getTopLevel()));\n      loopController.getUpdateList(_fiber);\n      loopController.setYield(fiber);\n    }\n  }\n  reconcileUpdate();\n};\n"]}