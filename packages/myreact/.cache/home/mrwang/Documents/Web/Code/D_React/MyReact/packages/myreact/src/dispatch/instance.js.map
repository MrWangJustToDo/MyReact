{"version":3,"file":"instance.js","sourceRoot":"","sources":["instance.ts"],"names":[],"mappings":"AAIA;IAAA;IA0DA,CAAC;IAzDC,+BAAO,GAAP,UAAQ,MAAwB;QAC9B,KAAK,CAAC,CAAC;IACT,CAAC;IACD,mCAAW,GAAX;QACE,OAAO,KAAK,CAAC;IACf,CAAC;IACD,uEAAuE;IACvE,QAAQ;IACR,uCAAe,GAAf,UAAgB,MAAwB,EAAE,QAAiB,EAAE,mBAAqC;QAChG,OAAO,KAAK,CAAC;IACf,CAAC;IACD,uCAAe,GAAf,UAAgB,KAAqC;QACnD,KAAK,CAAC,CAAC;IACT,CAAC;IACD,uCAAe,GAAf,UAAgB,KAAqC;QACnD,KAAK,CAAC,CAAC;IACT,CAAC;IACD,yCAAiB,GAAjB;QACE,KAAK,CAAC,CAAC;IACT,CAAC;IACD,uCAAe,GAAf;QACE,KAAK,CAAC,CAAC;IACT,CAAC;IACD,0CAAkB,GAAlB,UAAmB,MAA6C;QAC9D,KAAK,CAAC,CAAC;IACT,CAAC;IACD,MAAM;IACN,qCAAa,GAAb,UAAc,MAAwB;QACpC,KAAK,CAAC,CAAC;IACT,CAAC;IACD,qCAAa,GAAb,UAAc,MAAwB;QACpC,KAAK,CAAC,CAAC;IACT,CAAC;IACD,qCAAa,GAAb,UAAc,MAAwB;QACpC,KAAK,CAAC,CAAC;IACT,CAAC;IACD,sCAAc,GAAd,UAAe,MAAwB;QACrC,KAAK,CAAC,CAAC;IACT,CAAC;IACD,uCAAe,GAAf,UAAgB,MAAwB;QACtC,KAAK,CAAC,CAAC;IACT,CAAC;IACD,sCAAc,GAAd,UAAe,MAAwB,EAAE,eAAsD;QAC7F,KAAK,CAAC,CAAC;IACT,CAAC;IACD,2CAAmB,GAAnB,UAAoB,MAAwB,EAAE,aAAyB;QACrE,KAAK,CAAC,CAAC;IACT,CAAC;IACD,qCAAa,GAAb,UAAc,MAAwB,EAAE,OAAmB;QACzD,KAAK,CAAC,CAAC;IACT,CAAC;IACD,qCAAa,GAAb;QACE,KAAK,CAAC,CAAC;IACT,CAAC;IACD,sCAAc,GAAd;QACE,KAAK,CAAC,CAAC;IACT,CAAC;IACH,oBAAC;AAAD,CAAC,AA1DD,IA0DC","sourcesContent":["import type { MyReactFiberNode } from \"../fiber\";\nimport type { LinkTreeList } from \"../share\";\nimport type { FiberDispatch } from \"./interface\";\n\nexport class EmptyDispatch implements FiberDispatch {\n  trigger(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  resolveLazy(): boolean {\n    return false;\n  }\n  // TODO this part of logic should not include global dispatch interface\n  // start\n  reconcileCommit(_fiber: MyReactFiberNode, _hydrate: boolean, _parentFiberWithDom: MyReactFiberNode): boolean {\n    return false;\n  }\n  reconcileCreate(_list: LinkTreeList<MyReactFiberNode>): void {\n    void 0;\n  }\n  reconcileUpdate(_list: LinkTreeList<MyReactFiberNode>): void {\n    void 0;\n  }\n  beginProgressList(): void {\n    void 0;\n  }\n  endProgressList(): void {\n    void 0;\n  }\n  generateUpdateList(_fiber: MyReactFiberNode | MyReactFiberNode[]): void {\n    void 0;\n  }\n  // end\n  pendingCreate(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  pendingUpdate(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  pendingAppend(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  pendingContext(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  pendingPosition(_fiber: MyReactFiberNode): void {\n    void 0;\n  }\n  pendingUnmount(_fiber: MyReactFiberNode, _pendingUnmount: MyReactFiberNode | MyReactFiberNode[]): void {\n    void 0;\n  }\n  pendingLayoutEffect(_fiber: MyReactFiberNode, _layoutEffect: () => void): void {\n    void 0;\n  }\n  pendingEffect(_fiber: MyReactFiberNode, _effect: () => void): void {\n    void 0;\n  }\n  updateAllSync(): void {\n    void 0;\n  }\n  updateAllAsync(): void {\n    void 0;\n  }\n}\n"]}