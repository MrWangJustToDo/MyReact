{"version":3,"file":"interface.js","sourceRoot":"","sources":["interface.ts"],"names":[],"mappings":"","sourcesContent":["import type { MyReactFiberNode } from \"../fiber\";\nimport type { LinkTreeList } from \"../share\";\n\nexport interface FiberDispatch {\n  trigger(_fiber: MyReactFiberNode): void;\n\n  resolveLazy(): boolean;\n\n  // loop to mount/hydrate\n  reconcileCommit(_fiber: MyReactFiberNode, _hydrate: boolean, _parentFiberWithDom: MyReactFiberNode): boolean;\n\n  // loop to update\n  reconcileCreate(_list: LinkTreeList<MyReactFiberNode>): void;\n\n  reconcileUpdate(_list: LinkTreeList<MyReactFiberNode>): void;\n\n  beginProgressList(): void;\n\n  endProgressList(): void;\n\n  generateUpdateList(_fiber: MyReactFiberNode): void;\n\n  pendingCreate(_fiber: MyReactFiberNode): void;\n\n  pendingUpdate(_fiber: MyReactFiberNode): void;\n\n  pendingAppend(_fiber: MyReactFiberNode): void;\n\n  pendingContext(_fiber: MyReactFiberNode): void;\n\n  pendingPosition(_fiber: MyReactFiberNode): void;\n\n  pendingUnmount(_fiber: MyReactFiberNode, _pendingUnmount: MyReactFiberNode | MyReactFiberNode[]): void;\n\n  pendingLayoutEffect(_fiber: MyReactFiberNode, _layoutEffect: () => void): void;\n\n  pendingEffect(_fiber: MyReactFiberNode, _effect: () => void): void;\n\n  updateAllSync(): void;\n\n  updateAllAsync(): void;\n}\n"]}