{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,IAAM,eAAe,GAAG,UAC7B,KAA8B,EAC9B,aAAuD;IAEvD,IAAI,aAAa,IAAI,KAAK,EAAE;QAC1B,IAAM,EAAE,GAAG,aAAa,CAAC,EAAE,CAAC;QAC5B,IAAM,YAAY,GAAG,KAAK,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAC9C,OAAO,YAAY,CAAC;KACrB;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,eAAe,GAAG,UAC7B,KAA8B,EAC9B,aAAuD;IAEvD,IAAM,YAAY,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,CAAC,KAAK,CAG3E,CAAC;IAET,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import type { createContext } from \"../element\";\nimport type { MyReactFiberNode } from \"./instance\";\n\nexport const getContextFiber = (\n  fiber: MyReactFiberNode | null,\n  ContextObject?: ReturnType<typeof createContext> | null\n) => {\n  if (ContextObject && fiber) {\n    const id = ContextObject.id;\n    const contextFiber = fiber.__contextMap__[id];\n    return contextFiber;\n  }\n  return null;\n};\n\nexport const getContextValue = (\n  fiber: MyReactFiberNode | null,\n  ContextObject?: ReturnType<typeof createContext> | null\n) => {\n  const contextValue = (fiber ? fiber.__props__.value : ContextObject?.Provider.value) as Record<\n    string,\n    unknown\n  > | null;\n\n  return contextValue;\n};\n"]}