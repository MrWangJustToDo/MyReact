{"version":3,"file":"queue.js","sourceRoot":"","sources":["queue.ts"],"names":[],"mappings":";AAGA,MAAM,CAAC,IAAM,2BAA2B,GAAG,UAAC,KAAuB;IACjE,IAAM,mBAAmB,GAAG,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC/D,KAAK,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAC/B,IAAM,aAAa,GAAG,KAAK,CAAC,QAAqC,CAAC;IAClE,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;IACzD,IAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;IACzD,OAAO,mBAAmB,CAAC,MAAM,CAK/B,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC;QACT,QAAQ,wBACH,CAAC,CAAC,QAAQ,GACV,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CACnF;QACD,OAAO,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,IAAI,KAAK;QACxC,QAAQ,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;KAClE,CAAC,EAPQ,CAOR,EACF,EAAE,QAAQ,eAAO,SAAS,CAAE,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAC7D,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,sBAAsB,GAAG,UAAC,KAAuB;IAC5D,IAAM,cAAc,GAAG,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1D,KAAK,CAAC,mBAAmB,GAAG,EAAE,CAAC;IAC/B,cAAc,CAAC,OAAO,CAAC,UAAC,EAAmB;YAAjB,MAAM,YAAA,EAAE,OAAO,aAAA;QACvC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import type { MixinMyReactComponentType } from \"../component\";\nimport type { MyReactFiberNode } from \"./instance\";\n\nexport const processComponentUpdateQueue = (fiber: MyReactFiberNode) => {\n  const allComponentUpdater = fiber.__compUpdateQueue__.slice(0);\n  fiber.__compUpdateQueue__ = [];\n  const typedInstance = fiber.instance as MixinMyReactComponentType;\n  const baseState = Object.assign({}, typedInstance.state);\n  const baseProps = Object.assign({}, typedInstance.props);\n  return allComponentUpdater.reduce<{\n    newState: Record<string, unknown>;\n    isForce: boolean;\n    callback: Array<() => void>;\n  }>(\n    (p, c) => ({\n      newState: {\n        ...p.newState,\n        ...(typeof c.payLoad === \"function\" ? c.payLoad(baseState, baseProps) : c.payLoad),\n      },\n      isForce: p.isForce || c.isForce || false,\n      callback: c.callback ? p.callback.concat(c.callback) : p.callback,\n    }),\n    { newState: { ...baseState }, isForce: false, callback: [] }\n  );\n};\n\nexport const processHookUpdateQueue = (fiber: MyReactFiberNode) => {\n  const allHookUpdater = fiber.__hookUpdateQueue__.slice(0);\n  fiber.__hookUpdateQueue__ = [];\n  allHookUpdater.forEach(({ action, trigger }) => {\n    trigger.result = trigger.reducer(trigger.result, action);\n  });\n};\n"]}