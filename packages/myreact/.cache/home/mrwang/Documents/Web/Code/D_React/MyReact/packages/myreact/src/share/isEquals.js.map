{"version":3,"file":"isEquals.js","sourceRoot":"","sources":["isEquals.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,IAAM,cAAc,GAAG,UAC5B,GAA+D,EAC/D,MAAkE,EAClE,QAAe;IAAf,yBAAA,EAAA,eAAe;IAEf,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,EAAE;QAC5F,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjC,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,OAAO,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM;YAAE,OAAO,KAAK,CAAC;QACvD,IAAI,GAAG,GAAG,IAAI,CAAC;QACf,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;YACrB,IAAI,GAAG,KAAK,UAAU,EAAE;gBACtB,IAAI,QAAQ,EAAE;oBACZ,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC/C;qBAAM;oBACL,SAAS;iBACV;aACF;iBAAM;gBACL,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aAC/C;YACD,IAAI,CAAC,GAAG;gBAAE,OAAO,GAAG,CAAC;SACtB;QACD,OAAO,GAAG,CAAC;KACZ;IAED,OAAO,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,aAAa,GAAG,UAAC,GAAU,EAAE,MAAa;IACrD,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,EAAE;QAC/E,IAAI,EAAE,GAAG,IAAI,CAAC;QACd,KAAK,IAAM,GAAG,IAAI,GAAG,EAAE;YACrB,EAAE,GAAG,EAAE,IAAI,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,EAAE;gBAAE,OAAO,EAAE,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;KACX;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC","sourcesContent":["export const isNormalEquals = (\n  src: Record<string, unknown> | string | number | boolean | null,\n  target: Record<string, unknown> | string | number | boolean | null,\n  children = true\n) => {\n  if (typeof src === \"object\" && typeof target === \"object\" && src !== null && target !== null) {\n    const srcKeys = Object.keys(src);\n    const targetKeys = Object.keys(target);\n    if (srcKeys.length !== targetKeys.length) return false;\n    let res = true;\n    for (const key in src) {\n      if (key === \"children\") {\n        if (children) {\n          res = res && Object.is(src[key], target[key]);\n        } else {\n          continue;\n        }\n      } else {\n        res = res && Object.is(src[key], target[key]);\n      }\n      if (!res) return res;\n    }\n    return res;\n  }\n\n  return Object.is(src, target);\n};\n\nexport const isArrayEquals = (src: any[], target: any[]) => {\n  if (Array.isArray(src) && Array.isArray(target) && src.length === target.length) {\n    let re = true;\n    for (const key in src) {\n      re = re && Object.is(src[key], target[key]);\n      if (!re) return re;\n    }\n    return re;\n  }\n  return false;\n};\n"]}